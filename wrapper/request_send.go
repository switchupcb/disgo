// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package wrapper

import (
	"fmt"

	json "github.com/goccy/go-json"
	"github.com/rs/xid"
	"github.com/valyala/fasthttp"
)

var (
	// RouteIDs represents a map of Routes to Route IDs (map[string]uint8).
	RouteIDs = map[string]uint8{
		"":                                               0,
		"OAuth":                                          1,
		"GetGlobalApplicationCommands":                   2,
		"CreateGlobalApplicationCommand":                 3,
		"GetGlobalApplicationCommand":                    4,
		"EditGlobalApplicationCommand":                   5,
		"DeleteGlobalApplicationCommand":                 6,
		"BulkOverwriteGlobalApplicationCommands":         7,
		"GetGuildApplicationCommands":                    8,
		"CreateGuildApplicationCommand":                  9,
		"GetGuildApplicationCommand":                     10,
		"EditGuildApplicationCommand":                    11,
		"DeleteGuildApplicationCommand":                  12,
		"BulkOverwriteGuildApplicationCommands":          13,
		"GetGuildApplicationCommandPermissions":          14,
		"GetApplicationCommandPermissions":               15,
		"EditApplicationCommandPermissions":              16,
		"BatchEditApplicationCommandPermissions":         17,
		"CreateInteractionResponse":                      18,
		"GetOriginalInteractionResponse":                 19,
		"EditOriginalInteractionResponse":                20,
		"DeleteOriginalInteractionResponse":              21,
		"CreateFollowupMessage":                          22,
		"GetFollowupMessage":                             23,
		"EditFollowupMessage":                            24,
		"DeleteFollowupMessage":                          25,
		"GetCurrentApplication":                          26,
		"GetApplicationRoleConnectionMetadataRecords":    27,
		"UpdateApplicationRoleConnectionMetadataRecords": 28,
		"GetGuildAuditLog":                               29,
		"ListAutoModerationRulesForGuild":                30,
		"GetAutoModerationRule":                          31,
		"CreateAutoModerationRule":                       32,
		"ModifyAutoModerationRule":                       33,
		"DeleteAutoModerationRule":                       34,
		"GetChannel":                                     35,
		"ModifyChannel":                                  36,
		"ModifyChannelGroupDM":                           37,
		"ModifyChannelGuild":                             38,
		"ModifyChannelThread":                            39,
		"DeleteCloseChannel":                             40,
		"GetChannelMessages":                             41,
		"GetChannelMessage":                              42,
		"CreateMessage":                                  43,
		"CrosspostMessage":                               44,
		"CreateReaction":                                 45,
		"DeleteOwnReaction":                              46,
		"DeleteUserReaction":                             47,
		"GetReactions":                                   48,
		"DeleteAllReactions":                             49,
		"DeleteAllReactionsforEmoji":                     50,
		"EditMessage":                                    51,
		"DeleteMessage":                                  52,
		"BulkDeleteMessages":                             53,
		"EditChannelPermissions":                         54,
		"GetChannelInvites":                              55,
		"CreateChannelInvite":                            56,
		"DeleteChannelPermission":                        57,
		"FollowAnnouncementChannel":                      58,
		"TriggerTypingIndicator":                         59,
		"GetPinnedMessages":                              60,
		"PinMessage":                                     61,
		"UnpinMessage":                                   62,
		"GroupDMAddRecipient":                            63,
		"GroupDMRemoveRecipient":                         64,
		"StartThreadfromMessage":                         65,
		"StartThreadwithoutMessage":                      66,
		"StartThreadinForumChannel":                      67,
		"JoinThread":                                     68,
		"AddThreadMember":                                69,
		"LeaveThread":                                    70,
		"RemoveThreadMember":                             71,
		"GetThreadMember":                                72,
		"ListThreadMembers":                              73,
		"ListPublicArchivedThreads":                      74,
		"ListPrivateArchivedThreads":                     75,
		"ListJoinedPrivateArchivedThreads":               76,
		"ListGuildEmojis":                                77,
		"GetGuildEmoji":                                  78,
		"CreateGuildEmoji":                               79,
		"ModifyGuildEmoji":                               80,
		"DeleteGuildEmoji":                               81,
		"CreateGuild":                                    82,
		"GetGuild":                                       83,
		"GetGuildPreview":                                84,
		"ModifyGuild":                                    85,
		"DeleteGuild":                                    86,
		"GetGuildChannels":                               87,
		"CreateGuildChannel":                             88,
		"ModifyGuildChannelPositions":                    89,
		"ListActiveGuildThreads":                         90,
		"GetGuildMember":                                 91,
		"ListGuildMembers":                               92,
		"SearchGuildMembers":                             93,
		"AddGuildMember":                                 94,
		"ModifyGuildMember":                              95,
		"ModifyCurrentMember":                            96,
		"AddGuildMemberRole":                             97,
		"RemoveGuildMemberRole":                          98,
		"RemoveGuildMember":                              99,
		"GetGuildBans":                                   100,
		"GetGuildBan":                                    101,
		"CreateGuildBan":                                 102,
		"RemoveGuildBan":                                 103,
		"GetGuildRoles":                                  104,
		"CreateGuildRole":                                105,
		"ModifyGuildRolePositions":                       106,
		"ModifyGuildRole":                                107,
		"DeleteGuildRole":                                108,
		"ModifyGuildMFALevel":                            109,
		"GetGuildPruneCount":                             110,
		"BeginGuildPrune":                                111,
		"GetGuildVoiceRegions":                           112,
		"GetGuildInvites":                                113,
		"GetGuildIntegrations":                           114,
		"DeleteGuildIntegration":                         115,
		"GetGuildWidgetSettings":                         116,
		"ModifyGuildWidget":                              117,
		"GetGuildWidget":                                 118,
		"GetGuildVanityURL":                              119,
		"GetGuildWidgetImage":                            120,
		"GetGuildWelcomeScreen":                          121,
		"ModifyGuildWelcomeScreen":                       122,
		"GetGuildOnboarding":                             123,
		"ModifyGuildOnboarding":                          124,
		"ModifyCurrentUserVoiceState":                    125,
		"ModifyUserVoiceState":                           126,
		"ListScheduledEventsforGuild":                    127,
		"CreateGuildScheduledEvent":                      128,
		"GetGuildScheduledEvent":                         129,
		"ModifyGuildScheduledEvent":                      130,
		"DeleteGuildScheduledEvent":                      131,
		"GetGuildScheduledEventUsers":                    132,
		"GetGuildTemplate":                               133,
		"CreateGuildfromGuildTemplate":                   134,
		"GetGuildTemplates":                              135,
		"CreateGuildTemplate":                            136,
		"SyncGuildTemplate":                              137,
		"ModifyGuildTemplate":                            138,
		"DeleteGuildTemplate":                            139,
		"GetInvite":                                      140,
		"DeleteInvite":                                   141,
		"CreateStageInstance":                            142,
		"GetStageInstance":                               143,
		"ModifyStageInstance":                            144,
		"DeleteStageInstance":                            145,
		"GetSticker":                                     146,
		"ListNitroStickerPacks":                          147,
		"ListGuildStickers":                              148,
		"GetGuildSticker":                                149,
		"CreateGuildSticker":                             150,
		"ModifyGuildSticker":                             151,
		"DeleteGuildSticker":                             152,
		"GetCurrentUser":                                 153,
		"GetUser":                                        154,
		"ModifyCurrentUser":                              155,
		"GetCurrentUserGuilds":                           156,
		"GetCurrentUserGuildMember":                      157,
		"LeaveGuild":                                     158,
		"CreateDM":                                       159,
		"CreateGroupDM":                                  160,
		"GetUserConnections":                             161,
		"GetUserApplicationRoleConnection":               162,
		"UpdateUserApplicationRoleConnection":            163,
		"ListVoiceRegions":                               164,
		"CreateWebhook":                                  165,
		"GetChannelWebhooks":                             166,
		"GetGuildWebhooks":                               167,
		"GetWebhook":                                     168,
		"GetWebhookwithToken":                            169,
		"ModifyWebhook":                                  170,
		"ModifyWebhookwithToken":                         171,
		"DeleteWebhook":                                  172,
		"DeleteWebhookwithToken":                         173,
		"ExecuteWebhook":                                 174,
		"ExecuteSlackCompatibleWebhook":                  175,
		"ExecuteGitHubCompatibleWebhook":                 176,
		"GetWebhookMessage":                              177,
		"EditWebhookMessage":                             178,
		"DeleteWebhookMessage":                           179,
		"GetGateway":                                     180,
		"GetGatewayBot":                                  181,
		"GetCurrentBotApplicationInformation":            182,
		"GetCurrentAuthorizationInformation":             183,
	}
)

// Send sends a GetGlobalApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *GetGlobalApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[2]("2")
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGlobalApplicationCommands(bot.ApplicationID) + "?" + query

	result := make([]*ApplicationCommand, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGlobalApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *CreateGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[3]("3")
	endpoint := EndpointCreateGlobalApplicationCommand(bot.ApplicationID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(ApplicationCommand)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGlobalApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *GetGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[4]("4", "297ffb1f"+r.CommandID)
	endpoint := EndpointGetGlobalApplicationCommand(bot.ApplicationID, r.CommandID)

	result := new(ApplicationCommand)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a EditGlobalApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *EditGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[5]("5", "297ffb1f"+r.CommandID)
	endpoint := EndpointEditGlobalApplicationCommand(bot.ApplicationID, r.CommandID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(ApplicationCommand)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGlobalApplicationCommand request to Discord and returns a error.
func (r *DeleteGlobalApplicationCommand) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[6]("6", "297ffb1f"+r.CommandID)
	endpoint := EndpointDeleteGlobalApplicationCommand(bot.ApplicationID, r.CommandID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a BulkOverwriteGlobalApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *BulkOverwriteGlobalApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[7]("7")
	endpoint := EndpointBulkOverwriteGlobalApplicationCommands(bot.ApplicationID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := make([]*ApplicationCommand, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *GetGuildApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[8]("8", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuildApplicationCommands(bot.ApplicationID, r.GuildID) + "?" + query

	result := make([]*ApplicationCommand, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *CreateGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[9]("9", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateGuildApplicationCommand(bot.ApplicationID, r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(ApplicationCommand)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *GetGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[10]("10", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	endpoint := EndpointGetGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID)

	result := new(ApplicationCommand)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a EditGuildApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *EditGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[11]("11", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	endpoint := EndpointEditGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(ApplicationCommand)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuildApplicationCommand request to Discord and returns a error.
func (r *DeleteGuildApplicationCommand) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[12]("12", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	endpoint := EndpointDeleteGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a BulkOverwriteGuildApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *BulkOverwriteGuildApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[13]("13", "45892a5d"+r.GuildID)
	endpoint := EndpointBulkOverwriteGuildApplicationCommands(bot.ApplicationID, r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := make([]*ApplicationCommand, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *GetGuildApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[14]("14", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildApplicationCommandPermissions(bot.ApplicationID, r.GuildID)

	result := new(GuildApplicationCommandPermissions)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *GetApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[15]("15", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	endpoint := EndpointGetApplicationCommandPermissions(bot.ApplicationID, r.GuildID, r.CommandID)

	result := new(GuildApplicationCommandPermissions)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a EditApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *EditApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[16]("16", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	endpoint := EndpointEditApplicationCommandPermissions(bot.ApplicationID, r.GuildID, r.CommandID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildApplicationCommandPermissions)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a BatchEditApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *BatchEditApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[17]("17", "45892a5d"+r.GuildID)
	endpoint := EndpointBatchEditApplicationCommandPermissions(bot.ApplicationID, r.GuildID)

	result := new(GuildApplicationCommandPermissions)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateInteractionResponse request to Discord and returns a error.
func (r *CreateInteractionResponse) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[18]("18", "beb3d0e6"+r.InteractionID, "cb69bb28"+r.InteractionToken)
	endpoint := EndpointCreateInteractionResponse(r.InteractionID, r.InteractionToken)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetOriginalInteractionResponse request to Discord and returns a error.
func (r *GetOriginalInteractionResponse) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[19]("19", "cb69bb28"+r.InteractionToken)
	query, err := EndpointQueryString(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken) + "?" + query

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a EditOriginalInteractionResponse request to Discord and returns a Message.
func (r *EditOriginalInteractionResponse) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[20]("20", "cb69bb28"+r.InteractionToken)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointEditOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken) + "?" + query

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	contentType := ContentTypeJSON
	if len(r.Files) != 0 {
		var multipartErr error
		if contentType, body, multipartErr = createMultipartForm(body, r.Files...); multipartErr != nil {
			return nil, ErrorRequest{
				ClientID:      bot.ApplicationID,
				CorrelationID: xid,
				RouteID:       routeid,
				ResourceID:    resourceid,
				Endpoint:      "",
				Err:           err,
			}
		}
	}

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, contentType, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteOriginalInteractionResponse request to Discord and returns a error.
func (r *DeleteOriginalInteractionResponse) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[21]("21", "cb69bb28"+r.InteractionToken)
	endpoint := EndpointDeleteOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a CreateFollowupMessage request to Discord and returns a Message.
func (r *CreateFollowupMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[22]("22", "cb69bb28"+r.InteractionToken)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointCreateFollowupMessage(bot.ApplicationID, r.InteractionToken) + "?" + query

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	contentType := ContentTypeJSON
	if len(r.Files) != 0 {
		var multipartErr error
		if contentType, body, multipartErr = createMultipartForm(body, r.Files...); multipartErr != nil {
			return nil, ErrorRequest{
				ClientID:      bot.ApplicationID,
				CorrelationID: xid,
				RouteID:       routeid,
				ResourceID:    resourceid,
				Endpoint:      "",
				Err:           err,
			}
		}
	}

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, contentType, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetFollowupMessage request to Discord and returns a Message.
func (r *GetFollowupMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[23]("23", "cb69bb28"+r.InteractionToken, "d57d6589"+r.MessageID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID) + "?" + query

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a EditFollowupMessage request to Discord and returns a Message.
func (r *EditFollowupMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[24]("24", "cb69bb28"+r.InteractionToken, "d57d6589"+r.MessageID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointEditFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID) + "?" + query

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	contentType := ContentTypeJSON
	if len(r.Files) != 0 {
		var multipartErr error
		if contentType, body, multipartErr = createMultipartForm(body, r.Files...); multipartErr != nil {
			return nil, ErrorRequest{
				ClientID:      bot.ApplicationID,
				CorrelationID: xid,
				RouteID:       routeid,
				ResourceID:    resourceid,
				Endpoint:      "",
				Err:           err,
			}
		}
	}

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, contentType, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteFollowupMessage request to Discord and returns a error.
func (r *DeleteFollowupMessage) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[25]("25", "cb69bb28"+r.InteractionToken, "d57d6589"+r.MessageID)
	endpoint := EndpointDeleteFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetCurrentApplication request to Discord and returns a Application.
func (r *GetCurrentApplication) Send(bot *Client) (*Application, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[26]("26")
	endpoint := EndpointGetCurrentApplication()

	result := new(Application)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetApplicationRoleConnectionMetadataRecords request to Discord and returns a []*ApplicationRoleConnectionMetadata.
func (r *GetApplicationRoleConnectionMetadataRecords) Send(bot *Client) ([]*ApplicationRoleConnectionMetadata, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[27]("27")
	endpoint := EndpointGetApplicationRoleConnectionMetadataRecords(bot.ApplicationID)

	result := make([]*ApplicationRoleConnectionMetadata, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a UpdateApplicationRoleConnectionMetadataRecords request to Discord and returns a []*ApplicationRoleConnectionMetadata.
func (r *UpdateApplicationRoleConnectionMetadataRecords) Send(bot *Client) ([]*ApplicationRoleConnectionMetadata, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[28]("28")
	endpoint := EndpointUpdateApplicationRoleConnectionMetadataRecords(bot.ApplicationID)

	result := make([]*ApplicationRoleConnectionMetadata, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildAuditLog request to Discord and returns a AuditLog.
func (r *GetGuildAuditLog) Send(bot *Client) (*AuditLog, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[29]("29", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuildAuditLog(r.GuildID) + "?" + query

	result := new(AuditLog)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListAutoModerationRulesForGuild request to Discord and returns a []*AutoModerationAction.
func (r *ListAutoModerationRulesForGuild) Send(bot *Client) ([]*AutoModerationAction, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[30]("30", "45892a5d"+r.GuildID)
	endpoint := EndpointListAutoModerationRulesForGuild(r.GuildID)

	result := make([]*AutoModerationAction, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetAutoModerationRule request to Discord and returns a AutoModerationRule.
func (r *GetAutoModerationRule) Send(bot *Client) (*AutoModerationRule, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[31]("31", "45892a5d"+r.GuildID, "1b7efe5d"+r.AutoModerationRuleID)
	endpoint := EndpointGetAutoModerationRule(r.GuildID, r.AutoModerationRuleID)

	result := new(AutoModerationRule)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateAutoModerationRule request to Discord and returns a AutoModerationRule.
func (r *CreateAutoModerationRule) Send(bot *Client) (*AutoModerationRule, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[32]("32", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateAutoModerationRule(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(AutoModerationRule)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyAutoModerationRule request to Discord and returns a AutoModerationRule.
func (r *ModifyAutoModerationRule) Send(bot *Client) (*AutoModerationRule, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[33]("33", "45892a5d"+r.GuildID, "1b7efe5d"+r.AutoModerationRuleID)
	endpoint := EndpointModifyAutoModerationRule(r.GuildID, r.AutoModerationRuleID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(AutoModerationRule)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteAutoModerationRule request to Discord and returns a error.
func (r *DeleteAutoModerationRule) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[34]("34", "45892a5d"+r.GuildID, "1b7efe5d"+r.AutoModerationRuleID)
	endpoint := EndpointDeleteAutoModerationRule(r.GuildID, r.AutoModerationRuleID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetChannel request to Discord and returns a Channel.
func (r *GetChannel) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[35]("35", "e5416649"+r.ChannelID)
	endpoint := EndpointGetChannel(r.ChannelID)

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyChannel request to Discord and returns a Channel.
func (r *ModifyChannel) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[36]("36", "e5416649"+r.ChannelID)
	endpoint := EndpointModifyChannel(r.ChannelID)

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyChannelGroupDM request to Discord and returns a Channel.
func (r *ModifyChannelGroupDM) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[37]("37", "e5416649"+r.ChannelID)
	endpoint := EndpointModifyChannelGroupDM(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyChannelGuild request to Discord and returns a Channel.
func (r *ModifyChannelGuild) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[38]("38", "e5416649"+r.ChannelID)
	endpoint := EndpointModifyChannelGuild(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyChannelThread request to Discord and returns a Channel.
func (r *ModifyChannelThread) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[39]("39", "e5416649"+r.ChannelID)
	endpoint := EndpointModifyChannelThread(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteCloseChannel request to Discord and returns a Channel.
func (r *DeleteCloseChannel) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[40]("40", "e5416649"+r.ChannelID)
	endpoint := EndpointDeleteCloseChannel(r.ChannelID)

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetChannelMessages request to Discord and returns a []*Message.
func (r *GetChannelMessages) Send(bot *Client) ([]*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[41]("41", "e5416649"+r.ChannelID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetChannelMessages(r.ChannelID) + "?" + query

	result := make([]*Message, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetChannelMessage request to Discord and returns a Message.
func (r *GetChannelMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[42]("42", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointGetChannelMessage(r.ChannelID, r.MessageID)

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateMessage request to Discord and returns a Message.
func (r *CreateMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[43]("43", "e5416649"+r.ChannelID)
	endpoint := EndpointCreateMessage(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	contentType := ContentTypeJSON
	if len(r.Files) != 0 {
		var multipartErr error
		if contentType, body, multipartErr = createMultipartForm(body, r.Files...); multipartErr != nil {
			return nil, ErrorRequest{
				ClientID:      bot.ApplicationID,
				CorrelationID: xid,
				RouteID:       routeid,
				ResourceID:    resourceid,
				Endpoint:      "",
				Err:           err,
			}
		}
	}

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, contentType, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CrosspostMessage request to Discord and returns a Message.
func (r *CrosspostMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[44]("44", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointCrosspostMessage(r.ChannelID, r.MessageID)

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateReaction request to Discord and returns a error.
func (r *CreateReaction) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[45]("45", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	endpoint := EndpointCreateReaction(r.ChannelID, r.MessageID, r.Emoji)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a DeleteOwnReaction request to Discord and returns a error.
func (r *DeleteOwnReaction) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[46]("46", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	endpoint := EndpointDeleteOwnReaction(r.ChannelID, r.MessageID, r.Emoji)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a DeleteUserReaction request to Discord and returns a error.
func (r *DeleteUserReaction) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[47]("47", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji, "209c92df"+r.UserID)
	endpoint := EndpointDeleteUserReaction(r.ChannelID, r.MessageID, r.Emoji, r.UserID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetReactions request to Discord and returns a []*User.
func (r *GetReactions) Send(bot *Client) ([]*User, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[48]("48", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetReactions(r.ChannelID, r.MessageID, r.Emoji) + "?" + query

	result := make([]*User, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteAllReactions request to Discord and returns a error.
func (r *DeleteAllReactions) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[49]("49", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointDeleteAllReactions(r.ChannelID, r.MessageID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a DeleteAllReactionsforEmoji request to Discord and returns a error.
func (r *DeleteAllReactionsforEmoji) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[50]("50", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	endpoint := EndpointDeleteAllReactionsforEmoji(r.ChannelID, r.MessageID, r.Emoji)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a EditMessage request to Discord and returns a Message.
func (r *EditMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[51]("51", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointEditMessage(r.ChannelID, r.MessageID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	contentType := ContentTypeJSON
	if len(r.Files) != 0 {
		var multipartErr error
		if contentType, body, multipartErr = createMultipartForm(body, r.Files...); multipartErr != nil {
			return nil, ErrorRequest{
				ClientID:      bot.ApplicationID,
				CorrelationID: xid,
				RouteID:       routeid,
				ResourceID:    resourceid,
				Endpoint:      "",
				Err:           err,
			}
		}
	}

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, contentType, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteMessage request to Discord and returns a error.
func (r *DeleteMessage) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[52]("52", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointDeleteMessage(r.ChannelID, r.MessageID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a BulkDeleteMessages request to Discord and returns a error.
func (r *BulkDeleteMessages) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[53]("53", "e5416649"+r.ChannelID)
	endpoint := EndpointBulkDeleteMessages(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a EditChannelPermissions request to Discord and returns a error.
func (r *EditChannelPermissions) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[54]("54", "e5416649"+r.ChannelID, "9167175f"+r.OverwriteID)
	endpoint := EndpointEditChannelPermissions(r.ChannelID, r.OverwriteID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetChannelInvites request to Discord and returns a []*Invite.
func (r *GetChannelInvites) Send(bot *Client) ([]*Invite, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[55]("55", "e5416649"+r.ChannelID)
	endpoint := EndpointGetChannelInvites(r.ChannelID)

	result := make([]*Invite, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateChannelInvite request to Discord and returns a Invite.
func (r *CreateChannelInvite) Send(bot *Client) (*Invite, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[56]("56", "e5416649"+r.ChannelID)
	endpoint := EndpointCreateChannelInvite(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Invite)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteChannelPermission request to Discord and returns a error.
func (r *DeleteChannelPermission) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[57]("57", "e5416649"+r.ChannelID, "9167175f"+r.OverwriteID)
	endpoint := EndpointDeleteChannelPermission(r.ChannelID, r.OverwriteID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a FollowAnnouncementChannel request to Discord and returns a FollowedChannel.
func (r *FollowAnnouncementChannel) Send(bot *Client) (*FollowedChannel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[58]("58", "e5416649"+r.ChannelID)
	endpoint := EndpointFollowAnnouncementChannel(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(FollowedChannel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a TriggerTypingIndicator request to Discord and returns a error.
func (r *TriggerTypingIndicator) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[59]("59", "e5416649"+r.ChannelID)
	endpoint := EndpointTriggerTypingIndicator(r.ChannelID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetPinnedMessages request to Discord and returns a []*Message.
func (r *GetPinnedMessages) Send(bot *Client) ([]*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[60]("60", "e5416649"+r.ChannelID)
	endpoint := EndpointGetPinnedMessages(r.ChannelID)

	result := make([]*Message, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a PinMessage request to Discord and returns a error.
func (r *PinMessage) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[61]("61", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointPinMessage(r.ChannelID, r.MessageID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a UnpinMessage request to Discord and returns a error.
func (r *UnpinMessage) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[62]("62", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointUnpinMessage(r.ChannelID, r.MessageID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GroupDMAddRecipient request to Discord and returns a error.
func (r *GroupDMAddRecipient) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[63]("63", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	endpoint := EndpointGroupDMAddRecipient(r.ChannelID, r.UserID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GroupDMRemoveRecipient request to Discord and returns a error.
func (r *GroupDMRemoveRecipient) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[64]("64", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	endpoint := EndpointGroupDMRemoveRecipient(r.ChannelID, r.UserID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a StartThreadfromMessage request to Discord and returns a Channel.
func (r *StartThreadfromMessage) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[65]("65", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	endpoint := EndpointStartThreadfromMessage(r.ChannelID, r.MessageID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a StartThreadwithoutMessage request to Discord and returns a Channel.
func (r *StartThreadwithoutMessage) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[66]("66", "e5416649"+r.ChannelID)
	endpoint := EndpointStartThreadwithoutMessage(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a StartThreadinForumChannel request to Discord and returns a Channel.
func (r *StartThreadinForumChannel) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[67]("67", "e5416649"+r.ChannelID)
	endpoint := EndpointStartThreadinForumChannel(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a JoinThread request to Discord and returns a error.
func (r *JoinThread) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[68]("68", "e5416649"+r.ChannelID)
	endpoint := EndpointJoinThread(r.ChannelID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a AddThreadMember request to Discord and returns a error.
func (r *AddThreadMember) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[69]("69", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	endpoint := EndpointAddThreadMember(r.ChannelID, r.UserID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a LeaveThread request to Discord and returns a error.
func (r *LeaveThread) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[70]("70", "e5416649"+r.ChannelID)
	endpoint := EndpointLeaveThread(r.ChannelID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a RemoveThreadMember request to Discord and returns a error.
func (r *RemoveThreadMember) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[71]("71", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	endpoint := EndpointRemoveThreadMember(r.ChannelID, r.UserID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetThreadMember request to Discord and returns a ThreadMember.
func (r *GetThreadMember) Send(bot *Client) (*ThreadMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[72]("72", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetThreadMember(r.ChannelID, r.UserID) + "?" + query

	result := new(ThreadMember)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListThreadMembers request to Discord and returns a []*ThreadMember.
func (r *ListThreadMembers) Send(bot *Client) ([]*ThreadMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[73]("73", "e5416649"+r.ChannelID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointListThreadMembers(r.ChannelID) + "?" + query

	result := make([]*ThreadMember, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListPublicArchivedThreads request to Discord and returns a ListPublicArchivedThreadsResponse.
func (r *ListPublicArchivedThreads) Send(bot *Client) (*ListPublicArchivedThreadsResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[74]("74", "e5416649"+r.ChannelID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointListPublicArchivedThreads(r.ChannelID) + "?" + query

	result := new(ListPublicArchivedThreadsResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListPrivateArchivedThreads request to Discord and returns a ListPrivateArchivedThreadsResponse.
func (r *ListPrivateArchivedThreads) Send(bot *Client) (*ListPrivateArchivedThreadsResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[75]("75", "e5416649"+r.ChannelID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointListPrivateArchivedThreads(r.ChannelID) + "?" + query

	result := new(ListPrivateArchivedThreadsResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListJoinedPrivateArchivedThreads request to Discord and returns a ListJoinedPrivateArchivedThreadsResponse.
func (r *ListJoinedPrivateArchivedThreads) Send(bot *Client) (*ListJoinedPrivateArchivedThreadsResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[76]("76", "e5416649"+r.ChannelID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointListJoinedPrivateArchivedThreads(r.ChannelID) + "?" + query

	result := new(ListJoinedPrivateArchivedThreadsResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListGuildEmojis request to Discord and returns a []*Emoji.
func (r *ListGuildEmojis) Send(bot *Client) ([]*Emoji, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[77]("77", "45892a5d"+r.GuildID)
	endpoint := EndpointListGuildEmojis(r.GuildID)

	result := make([]*Emoji, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildEmoji request to Discord and returns a Emoji.
func (r *GetGuildEmoji) Send(bot *Client) (*Emoji, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[78]("78", "45892a5d"+r.GuildID, "67c175a8"+r.EmojiID)
	endpoint := EndpointGetGuildEmoji(r.GuildID, r.EmojiID)

	result := new(Emoji)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildEmoji request to Discord and returns a Emoji.
func (r *CreateGuildEmoji) Send(bot *Client) (*Emoji, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[79]("79", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateGuildEmoji(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Emoji)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildEmoji request to Discord and returns a Emoji.
func (r *ModifyGuildEmoji) Send(bot *Client) (*Emoji, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[80]("80", "45892a5d"+r.GuildID, "67c175a8"+r.EmojiID)
	endpoint := EndpointModifyGuildEmoji(r.GuildID, r.EmojiID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Emoji)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuildEmoji request to Discord and returns a error.
func (r *DeleteGuildEmoji) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[81]("81", "45892a5d"+r.GuildID, "67c175a8"+r.EmojiID)
	endpoint := EndpointDeleteGuildEmoji(r.GuildID, r.EmojiID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a CreateGuild request to Discord and returns a Guild.
func (r *CreateGuild) Send(bot *Client) (*Guild, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[82]("82")
	endpoint := EndpointCreateGuild()

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Guild)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuild request to Discord and returns a Guild.
func (r *GetGuild) Send(bot *Client) (*Guild, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[83]("83", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuild(r.GuildID) + "?" + query

	result := new(Guild)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildPreview request to Discord and returns a GuildPreview.
func (r *GetGuildPreview) Send(bot *Client) (*GuildPreview, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[84]("84", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildPreview(r.GuildID)

	result := new(GuildPreview)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuild request to Discord and returns a Guild.
func (r *ModifyGuild) Send(bot *Client) (*Guild, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[85]("85", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyGuild(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Guild)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuild request to Discord and returns a error.
func (r *DeleteGuild) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[86]("86", "45892a5d"+r.GuildID)
	endpoint := EndpointDeleteGuild(r.GuildID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetGuildChannels request to Discord and returns a []*Channel.
func (r *GetGuildChannels) Send(bot *Client) ([]*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[87]("87", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildChannels(r.GuildID)

	result := make([]*Channel, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildChannel request to Discord and returns a Channel.
func (r *CreateGuildChannel) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[88]("88", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateGuildChannel(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildChannelPositions request to Discord and returns a error.
func (r *ModifyGuildChannelPositions) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[89]("89", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyGuildChannelPositions(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a ListActiveGuildThreads request to Discord and returns a ListActiveGuildThreadsResponse.
func (r *ListActiveGuildThreads) Send(bot *Client) (*ListActiveGuildThreadsResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[90]("90", "45892a5d"+r.GuildID)
	endpoint := EndpointListActiveGuildThreads(r.GuildID)

	result := new(ListActiveGuildThreadsResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildMember request to Discord and returns a GuildMember.
func (r *GetGuildMember) Send(bot *Client) (*GuildMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[91]("91", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointGetGuildMember(r.GuildID, r.UserID)

	result := new(GuildMember)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListGuildMembers request to Discord and returns a []*GuildMember.
func (r *ListGuildMembers) Send(bot *Client) ([]*GuildMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[92]("92", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointListGuildMembers(r.GuildID) + "?" + query

	result := make([]*GuildMember, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a SearchGuildMembers request to Discord and returns a []*GuildMember.
func (r *SearchGuildMembers) Send(bot *Client) ([]*GuildMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[93]("93", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointSearchGuildMembers(r.GuildID) + "?" + query

	result := make([]*GuildMember, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a AddGuildMember request to Discord and returns a GuildMember.
func (r *AddGuildMember) Send(bot *Client) (*GuildMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[94]("94", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointAddGuildMember(r.GuildID, r.UserID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildMember)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildMember request to Discord and returns a GuildMember.
func (r *ModifyGuildMember) Send(bot *Client) (*GuildMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[95]("95", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointModifyGuildMember(r.GuildID, r.UserID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildMember)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyCurrentMember request to Discord and returns a GuildMember.
func (r *ModifyCurrentMember) Send(bot *Client) (*GuildMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[96]("96", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyCurrentMember(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildMember)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a AddGuildMemberRole request to Discord and returns a error.
func (r *AddGuildMemberRole) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[97]("97", "45892a5d"+r.GuildID, "209c92df"+r.UserID, "3cf7dd7c"+r.RoleID)
	endpoint := EndpointAddGuildMemberRole(r.GuildID, r.UserID, r.RoleID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a RemoveGuildMemberRole request to Discord and returns a error.
func (r *RemoveGuildMemberRole) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[98]("98", "45892a5d"+r.GuildID, "209c92df"+r.UserID, "3cf7dd7c"+r.RoleID)
	endpoint := EndpointRemoveGuildMemberRole(r.GuildID, r.UserID, r.RoleID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a RemoveGuildMember request to Discord and returns a error.
func (r *RemoveGuildMember) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[99]("99", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointRemoveGuildMember(r.GuildID, r.UserID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetGuildBans request to Discord and returns a []*Ban.
func (r *GetGuildBans) Send(bot *Client) ([]*Ban, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[100]("100", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuildBans(r.GuildID) + "?" + query

	result := make([]*Ban, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildBan request to Discord and returns a Ban.
func (r *GetGuildBan) Send(bot *Client) (*Ban, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[101]("101", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointGetGuildBan(r.GuildID, r.UserID)

	result := new(Ban)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildBan request to Discord and returns a error.
func (r *CreateGuildBan) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[102]("102", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointCreateGuildBan(r.GuildID, r.UserID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a RemoveGuildBan request to Discord and returns a error.
func (r *RemoveGuildBan) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[103]("103", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointRemoveGuildBan(r.GuildID, r.UserID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetGuildRoles request to Discord and returns a []*Role.
func (r *GetGuildRoles) Send(bot *Client) ([]*Role, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[104]("104", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildRoles(r.GuildID)

	result := make([]*Role, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildRole request to Discord and returns a Role.
func (r *CreateGuildRole) Send(bot *Client) (*Role, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[105]("105", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateGuildRole(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Role)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildRolePositions request to Discord and returns a []*Role.
func (r *ModifyGuildRolePositions) Send(bot *Client) ([]*Role, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[106]("106", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyGuildRolePositions(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := make([]*Role, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildRole request to Discord and returns a Role.
func (r *ModifyGuildRole) Send(bot *Client) (*Role, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[107]("107", "45892a5d"+r.GuildID, "3cf7dd7c"+r.RoleID)
	endpoint := EndpointModifyGuildRole(r.GuildID, r.RoleID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Role)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuildRole request to Discord and returns a error.
func (r *DeleteGuildRole) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[108]("108", "45892a5d"+r.GuildID, "3cf7dd7c"+r.RoleID)
	endpoint := EndpointDeleteGuildRole(r.GuildID, r.RoleID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a ModifyGuildMFALevel request to Discord and returns a ModifyGuildMFALevelResponse.
func (r *ModifyGuildMFALevel) Send(bot *Client) (*ModifyGuildMFALevelResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[109]("109", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyGuildMFALevel(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(ModifyGuildMFALevelResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildPruneCount request to Discord and returns a GetGuildPruneCountResponse.
func (r *GetGuildPruneCount) Send(bot *Client) (*GetGuildPruneCountResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[110]("110", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuildPruneCount(r.GuildID) + "?" + query

	result := new(GetGuildPruneCountResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a BeginGuildPrune request to Discord and returns a error.
func (r *BeginGuildPrune) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[111]("111", "45892a5d"+r.GuildID)
	endpoint := EndpointBeginGuildPrune(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetGuildVoiceRegions request to Discord and returns a []*VoiceRegion.
func (r *GetGuildVoiceRegions) Send(bot *Client) ([]*VoiceRegion, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[112]("112", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildVoiceRegions(r.GuildID)

	result := make([]*VoiceRegion, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildInvites request to Discord and returns a []*Invite.
func (r *GetGuildInvites) Send(bot *Client) ([]*Invite, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[113]("113", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildInvites(r.GuildID)

	result := make([]*Invite, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildIntegrations request to Discord and returns a []*Integration.
func (r *GetGuildIntegrations) Send(bot *Client) ([]*Integration, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[114]("114", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildIntegrations(r.GuildID)

	result := make([]*Integration, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuildIntegration request to Discord and returns a error.
func (r *DeleteGuildIntegration) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[115]("115", "45892a5d"+r.GuildID, "cb4479f8"+r.IntegrationID)
	endpoint := EndpointDeleteGuildIntegration(r.GuildID, r.IntegrationID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetGuildWidgetSettings request to Discord and returns a GuildWidget.
func (r *GetGuildWidgetSettings) Send(bot *Client) (*GuildWidget, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[116]("116", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildWidgetSettings(r.GuildID)

	result := new(GuildWidget)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildWidget request to Discord and returns a GuildWidget.
func (r *ModifyGuildWidget) Send(bot *Client) (*GuildWidget, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[117]("117", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyGuildWidget(r.GuildID)

	result := new(GuildWidget)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildWidget request to Discord and returns a GuildWidget.
func (r *GetGuildWidget) Send(bot *Client) (*GuildWidget, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[118]("118", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildWidget(r.GuildID)

	result := new(GuildWidget)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildVanityURL request to Discord and returns a Invite.
func (r *GetGuildVanityURL) Send(bot *Client) (*Invite, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[119]("119", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildVanityURL(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Invite)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildWidgetImage request to Discord and returns a EmbedImage.
func (r *GetGuildWidgetImage) Send(bot *Client) (*EmbedImage, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[120]("120", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuildWidgetImage(r.GuildID) + "?" + query

	result := new(EmbedImage)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildWelcomeScreen request to Discord and returns a WelcomeScreen.
func (r *GetGuildWelcomeScreen) Send(bot *Client) (*WelcomeScreen, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[121]("121", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildWelcomeScreen(r.GuildID)

	result := new(WelcomeScreen)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildWelcomeScreen request to Discord and returns a WelcomeScreen.
func (r *ModifyGuildWelcomeScreen) Send(bot *Client) (*WelcomeScreen, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[122]("122", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyGuildWelcomeScreen(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(WelcomeScreen)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildOnboarding request to Discord and returns a GuildOnboarding.
func (r *GetGuildOnboarding) Send(bot *Client) (*GuildOnboarding, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[123]("123", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildOnboarding(r.GuildID)

	result := new(GuildOnboarding)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildOnboarding request to Discord and returns a GuildOnboarding.
func (r *ModifyGuildOnboarding) Send(bot *Client) (*GuildOnboarding, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[124]("124", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyGuildOnboarding(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildOnboarding)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyCurrentUserVoiceState request to Discord and returns a error.
func (r *ModifyCurrentUserVoiceState) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[125]("125", "45892a5d"+r.GuildID)
	endpoint := EndpointModifyCurrentUserVoiceState(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a ModifyUserVoiceState request to Discord and returns a error.
func (r *ModifyUserVoiceState) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[126]("126", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	endpoint := EndpointModifyUserVoiceState(r.GuildID, r.UserID)

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a ListScheduledEventsforGuild request to Discord and returns a []*GuildScheduledEvent.
func (r *ListScheduledEventsforGuild) Send(bot *Client) ([]*GuildScheduledEvent, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[127]("127", "45892a5d"+r.GuildID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointListScheduledEventsforGuild(r.GuildID) + "?" + query

	result := make([]*GuildScheduledEvent, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildScheduledEvent request to Discord and returns a GuildScheduledEvent.
func (r *CreateGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[128]("128", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateGuildScheduledEvent(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildScheduledEvent)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildScheduledEvent request to Discord and returns a GuildScheduledEvent.
func (r *GetGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[129]("129", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID) + "?" + query

	result := new(GuildScheduledEvent)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildScheduledEvent request to Discord and returns a GuildScheduledEvent.
func (r *ModifyGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[130]("130", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	endpoint := EndpointModifyGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildScheduledEvent)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuildScheduledEvent request to Discord and returns a error.
func (r *DeleteGuildScheduledEvent) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[131]("131", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	endpoint := EndpointDeleteGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetGuildScheduledEventUsers request to Discord and returns a []*GuildScheduledEventUser.
func (r *GetGuildScheduledEventUsers) Send(bot *Client) ([]*GuildScheduledEventUser, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[132]("132", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetGuildScheduledEventUsers(r.GuildID, r.GuildScheduledEventID) + "?" + query

	result := make([]*GuildScheduledEventUser, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildTemplate request to Discord and returns a GuildTemplate.
func (r *GetGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[133]("133", "61437152"+r.TemplateCode)
	endpoint := EndpointGetGuildTemplate(r.TemplateCode)

	result := new(GuildTemplate)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildfromGuildTemplate request to Discord and returns a []*GuildTemplate.
func (r *CreateGuildfromGuildTemplate) Send(bot *Client) ([]*GuildTemplate, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[134]("134", "61437152"+r.TemplateCode)
	endpoint := EndpointCreateGuildfromGuildTemplate(r.TemplateCode)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := make([]*GuildTemplate, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildTemplates request to Discord and returns a []*GuildTemplate.
func (r *GetGuildTemplates) Send(bot *Client) ([]*GuildTemplate, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[135]("135", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildTemplates(r.GuildID)

	result := make([]*GuildTemplate, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildTemplate request to Discord and returns a GuildTemplate.
func (r *CreateGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[136]("136", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateGuildTemplate(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildTemplate)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a SyncGuildTemplate request to Discord and returns a GuildTemplate.
func (r *SyncGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[137]("137", "45892a5d"+r.GuildID, "61437152"+r.TemplateCode)
	endpoint := EndpointSyncGuildTemplate(r.GuildID, r.TemplateCode)

	result := new(GuildTemplate)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildTemplate request to Discord and returns a GuildTemplate.
func (r *ModifyGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[138]("138", "45892a5d"+r.GuildID, "61437152"+r.TemplateCode)
	endpoint := EndpointModifyGuildTemplate(r.GuildID, r.TemplateCode)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(GuildTemplate)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuildTemplate request to Discord and returns a GuildTemplate.
func (r *DeleteGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[139]("139", "45892a5d"+r.GuildID, "61437152"+r.TemplateCode)
	endpoint := EndpointDeleteGuildTemplate(r.GuildID, r.TemplateCode)

	result := new(GuildTemplate)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetInvite request to Discord and returns a Invite.
func (r *GetInvite) Send(bot *Client) (*Invite, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[140]("140", "781d4865"+r.InviteCode)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetInvite(r.InviteCode) + "?" + query

	result := new(Invite)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteInvite request to Discord and returns a Invite.
func (r *DeleteInvite) Send(bot *Client) (*Invite, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[141]("141", "781d4865"+r.InviteCode)
	endpoint := EndpointDeleteInvite(r.InviteCode)

	result := new(Invite)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateStageInstance request to Discord and returns a StageInstance.
func (r *CreateStageInstance) Send(bot *Client) (*StageInstance, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[142]("142")
	endpoint := EndpointCreateStageInstance()

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(StageInstance)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetStageInstance request to Discord and returns a StageInstance.
func (r *GetStageInstance) Send(bot *Client) (*StageInstance, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[143]("143", "e5416649"+r.ChannelID)
	endpoint := EndpointGetStageInstance(r.ChannelID)

	result := new(StageInstance)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyStageInstance request to Discord and returns a StageInstance.
func (r *ModifyStageInstance) Send(bot *Client) (*StageInstance, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[144]("144", "e5416649"+r.ChannelID)
	endpoint := EndpointModifyStageInstance(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(StageInstance)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteStageInstance request to Discord and returns a error.
func (r *DeleteStageInstance) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[145]("145", "e5416649"+r.ChannelID)
	endpoint := EndpointDeleteStageInstance(r.ChannelID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetSticker request to Discord and returns a Sticker.
func (r *GetSticker) Send(bot *Client) (*Sticker, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[146]("146", "6eeeabf1"+r.StickerID)
	endpoint := EndpointGetSticker(r.StickerID)

	result := new(Sticker)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListNitroStickerPacks request to Discord and returns a ListNitroStickerPacksResponse.
func (r *ListNitroStickerPacks) Send(bot *Client) (*ListNitroStickerPacksResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[147]("147")
	endpoint := EndpointListNitroStickerPacks()

	result := new(ListNitroStickerPacksResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListGuildStickers request to Discord and returns a []*Sticker.
func (r *ListGuildStickers) Send(bot *Client) ([]*Sticker, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[148]("148", "45892a5d"+r.GuildID)
	endpoint := EndpointListGuildStickers(r.GuildID)

	result := make([]*Sticker, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildSticker request to Discord and returns a Sticker.
func (r *GetGuildSticker) Send(bot *Client) (*Sticker, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[149]("149", "45892a5d"+r.GuildID, "6eeeabf1"+r.StickerID)
	endpoint := EndpointGetGuildSticker(r.GuildID, r.StickerID)

	result := new(Sticker)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGuildSticker request to Discord and returns a Sticker.
func (r *CreateGuildSticker) Send(bot *Client) (*Sticker, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[150]("150", "45892a5d"+r.GuildID)
	endpoint := EndpointCreateGuildSticker(r.GuildID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	var contentType []byte
	var multipartErr error
	if contentType, body, multipartErr = createMultipartForm(body, &r.File); multipartErr != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}

	result := new(Sticker)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, contentType, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyGuildSticker request to Discord and returns a Sticker.
func (r *ModifyGuildSticker) Send(bot *Client) (*Sticker, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[151]("151", "45892a5d"+r.GuildID, "6eeeabf1"+r.StickerID)
	endpoint := EndpointModifyGuildSticker(r.GuildID, r.StickerID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Sticker)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteGuildSticker request to Discord and returns a error.
func (r *DeleteGuildSticker) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[152]("152", "45892a5d"+r.GuildID, "6eeeabf1"+r.StickerID)
	endpoint := EndpointDeleteGuildSticker(r.GuildID, r.StickerID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetCurrentUser request to Discord and returns a User.
func (r *GetCurrentUser) Send(bot *Client) (*User, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[153]("153")
	endpoint := EndpointGetCurrentUser()

	result := new(User)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetUser request to Discord and returns a User.
func (r *GetUser) Send(bot *Client) (*User, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[154]("154", "209c92df"+r.UserID)
	endpoint := EndpointGetUser(r.UserID)

	result := new(User)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyCurrentUser request to Discord and returns a User.
func (r *ModifyCurrentUser) Send(bot *Client) (*User, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[155]("155")
	endpoint := EndpointModifyCurrentUser()

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(User)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetCurrentUserGuilds request to Discord and returns a []*Guild.
func (r *GetCurrentUserGuilds) Send(bot *Client) ([]*Guild, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[156]("156")
	endpoint := EndpointGetCurrentUserGuilds()

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := make([]*Guild, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeJSON, body, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetCurrentUserGuildMember request to Discord and returns a GuildMember.
func (r *GetCurrentUserGuildMember) Send(bot *Client) (*GuildMember, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[157]("157", "45892a5d"+r.GuildID)
	endpoint := EndpointGetCurrentUserGuildMember(r.GuildID)

	result := new(GuildMember)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a LeaveGuild request to Discord and returns a error.
func (r *LeaveGuild) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[158]("158", "45892a5d"+r.GuildID)
	endpoint := EndpointLeaveGuild(r.GuildID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a CreateDM request to Discord and returns a Channel.
func (r *CreateDM) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[159]("159")
	endpoint := EndpointCreateDM()

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateGroupDM request to Discord and returns a Channel.
func (r *CreateGroupDM) Send(bot *Client) (*Channel, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[160]("160")
	endpoint := EndpointCreateGroupDM()

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Channel)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetUserConnections request to Discord and returns a []*Connection.
func (r *GetUserConnections) Send(bot *Client) ([]*Connection, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[161]("161")
	endpoint := EndpointGetUserConnections()

	result := make([]*Connection, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetUserApplicationRoleConnection request to Discord and returns a ApplicationRoleConnection.
func (r *GetUserApplicationRoleConnection) Send(bot *Client) (*ApplicationRoleConnection, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[162]("162")
	endpoint := EndpointGetUserApplicationRoleConnection(bot.ApplicationID)

	result := new(ApplicationRoleConnection)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a UpdateUserApplicationRoleConnection request to Discord and returns a ApplicationRoleConnection.
func (r *UpdateUserApplicationRoleConnection) Send(bot *Client) (*ApplicationRoleConnection, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[163]("163")
	endpoint := EndpointUpdateUserApplicationRoleConnection(bot.ApplicationID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(ApplicationRoleConnection)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPut, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ListVoiceRegions request to Discord and returns a []*VoiceRegion.
func (r *ListVoiceRegions) Send(bot *Client) ([]*VoiceRegion, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[164]("164")
	endpoint := EndpointListVoiceRegions()

	result := make([]*VoiceRegion, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a CreateWebhook request to Discord and returns a Webhook.
func (r *CreateWebhook) Send(bot *Client) (*Webhook, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[165]("165", "e5416649"+r.ChannelID)
	endpoint := EndpointCreateWebhook(r.ChannelID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Webhook)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetChannelWebhooks request to Discord and returns a []*Webhook.
func (r *GetChannelWebhooks) Send(bot *Client) ([]*Webhook, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[166]("166", "e5416649"+r.ChannelID)
	endpoint := EndpointGetChannelWebhooks(r.ChannelID)

	result := make([]*Webhook, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGuildWebhooks request to Discord and returns a []*Webhook.
func (r *GetGuildWebhooks) Send(bot *Client) ([]*Webhook, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[167]("167", "45892a5d"+r.GuildID)
	endpoint := EndpointGetGuildWebhooks(r.GuildID)

	result := make([]*Webhook, 0)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, &result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetWebhook request to Discord and returns a Webhook.
func (r *GetWebhook) Send(bot *Client) (*Webhook, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[168]("168", "6d62b21b"+r.WebhookID)
	endpoint := EndpointGetWebhook(r.WebhookID)

	result := new(Webhook)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetWebhookwithToken request to Discord and returns a Webhook.
func (r *GetWebhookwithToken) Send(bot *Client) (*Webhook, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[169]("169", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	endpoint := EndpointGetWebhookwithToken(r.WebhookID, r.WebhookToken)

	result := new(Webhook)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyWebhook request to Discord and returns a Webhook.
func (r *ModifyWebhook) Send(bot *Client) (*Webhook, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[170]("170", "6d62b21b"+r.WebhookID)
	endpoint := EndpointModifyWebhook(r.WebhookID)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Webhook)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a ModifyWebhookwithToken request to Discord and returns a Webhook.
func (r *ModifyWebhookwithToken) Send(bot *Client) (*Webhook, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[171]("171", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	endpoint := EndpointModifyWebhookwithToken(r.WebhookID, r.WebhookToken)

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	result := new(Webhook)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, ContentTypeJSON, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteWebhook request to Discord and returns a error.
func (r *DeleteWebhook) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[172]("172", "6d62b21b"+r.WebhookID)
	endpoint := EndpointDeleteWebhook(r.WebhookID)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a DeleteWebhookwithToken request to Discord and returns a error.
func (r *DeleteWebhookwithToken) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[173]("173", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	endpoint := EndpointDeleteWebhookwithToken(r.WebhookID, r.WebhookToken)

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, nil, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a ExecuteWebhook request to Discord and returns a error.
func (r *ExecuteWebhook) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[174]("174", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	query, err := EndpointQueryString(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointExecuteWebhook(r.WebhookID, r.WebhookToken) + "?" + query

	body, err := json.Marshal(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	contentType := ContentTypeJSON
	if len(r.Files) != 0 {
		var multipartErr error
		if contentType, body, multipartErr = createMultipartForm(body, r.Files...); multipartErr != nil {
			return ErrorRequest{
				ClientID:      bot.ApplicationID,
				CorrelationID: xid,
				RouteID:       routeid,
				ResourceID:    resourceid,
				Endpoint:      "",
				Err:           err,
			}
		}
	}

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, contentType, body, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a ExecuteSlackCompatibleWebhook request to Discord and returns a error.
func (r *ExecuteSlackCompatibleWebhook) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[175]("175", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	query, err := EndpointQueryString(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointExecuteSlackCompatibleWebhook(r.WebhookID, r.WebhookToken) + "?" + query

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a ExecuteGitHubCompatibleWebhook request to Discord and returns a error.
func (r *ExecuteGitHubCompatibleWebhook) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[176]("176", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	query, err := EndpointQueryString(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointExecuteGitHubCompatibleWebhook(r.WebhookID, r.WebhookToken) + "?" + query

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPost, endpoint, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetWebhookMessage request to Discord and returns a Message.
func (r *GetWebhookMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[177]("177", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken, "d57d6589"+r.MessageID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointGetWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID) + "?" + query

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a EditWebhookMessage request to Discord and returns a Message.
func (r *EditWebhookMessage) Send(bot *Client) (*Message, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[178]("178", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken, "d57d6589"+r.MessageID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointEditWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID) + "?" + query

	body, err := json.Marshal(r)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           fmt.Errorf(errSendMarshal, err),
		}
	}

	contentType := ContentTypeJSON
	if len(r.Files) != 0 {
		var multipartErr error
		if contentType, body, multipartErr = createMultipartForm(body, r.Files...); multipartErr != nil {
			return nil, ErrorRequest{
				ClientID:      bot.ApplicationID,
				CorrelationID: xid,
				RouteID:       routeid,
				ResourceID:    resourceid,
				Endpoint:      "",
				Err:           err,
			}
		}
	}

	result := new(Message)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodPatch, endpoint, contentType, body, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a DeleteWebhookMessage request to Discord and returns a error.
func (r *DeleteWebhookMessage) Send(bot *Client) error {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[179]("179", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken, "d57d6589"+r.MessageID)
	query, err := EndpointQueryString(r)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      "",
			Err:           err,
		}
	}
	endpoint := EndpointDeleteWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID) + "?" + query

	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodDelete, endpoint, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return nil
}

// Send sends a GetGateway request to Discord and returns a GetGatewayBotResponse.
func (r *GetGateway) Send(bot *Client) (*GetGatewayBotResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[180]("180")
	endpoint := EndpointGetGateway()

	result := new(GetGatewayBotResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetGatewayBot request to Discord and returns a GetGatewayBotResponse.
func (r *GetGatewayBot) Send(bot *Client) (*GetGatewayBotResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[181]("181")
	endpoint := EndpointGetGatewayBot()

	result := new(GetGatewayBotResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetCurrentBotApplicationInformation request to Discord and returns a Application.
func (r *GetCurrentBotApplicationInformation) Send(bot *Client) (*Application, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[182]("182")
	endpoint := EndpointGetCurrentBotApplicationInformation()

	result := new(Application)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}

// Send sends a GetCurrentAuthorizationInformation request to Discord and returns a CurrentAuthorizationInformationResponse.
func (r *GetCurrentAuthorizationInformation) Send(bot *Client) (*CurrentAuthorizationInformationResponse, error) {
	var err error
	xid := xid.New().String()
	routeid, resourceid := RateLimitHashFuncs[183]("183")
	endpoint := EndpointGetCurrentAuthorizationInformation()

	result := new(CurrentAuthorizationInformationResponse)
	err = SendRequest(bot, xid, routeid, resourceid, fasthttp.MethodGet, endpoint, nil, nil, result)
	if err != nil {
		return nil, ErrorRequest{
			ClientID:      bot.ApplicationID,
			CorrelationID: xid,
			RouteID:       routeid,
			ResourceID:    resourceid,
			Endpoint:      endpoint,
			Err:           err,
		}
	}

	return result, nil
}
