// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package wrapper

import (
	"fmt"

	json "github.com/goccy/go-json"
	"github.com/valyala/fasthttp"
)

var (
	// RouteIDs represents a map of Routes to Route IDs (map[string]uint8).
	RouteIDs = map[string]uint8{
		"":                                       0,
		"OAuth":                                  1,
		"GetGlobalApplicationCommands":           2,
		"CreateGlobalApplicationCommand":         3,
		"GetGlobalApplicationCommand":            4,
		"EditGlobalApplicationCommand":           5,
		"DeleteGlobalApplicationCommand":         6,
		"BulkOverwriteGlobalApplicationCommands": 7,
		"GetGuildApplicationCommands":            8,
		"CreateGuildApplicationCommand":          9,
		"GetGuildApplicationCommand":             10,
		"EditGuildApplicationCommand":            11,
		"DeleteGuildApplicationCommand":          12,
		"BulkOverwriteGuildApplicationCommands":  13,
		"GetGuildApplicationCommandPermissions":  14,
		"GetApplicationCommandPermissions":       15,
		"EditApplicationCommandPermissions":      16,
		"BatchEditApplicationCommandPermissions": 17,
		"CreateInteractionResponse":              18,
		"GetOriginalInteractionResponse":         19,
		"EditOriginalInteractionResponse":        20,
		"DeleteOriginalInteractionResponse":      21,
		"CreateFollowupMessage":                  22,
		"GetFollowupMessage":                     23,
		"EditFollowupMessage":                    24,
		"DeleteFollowupMessage":                  25,
		"GetGuildAuditLog":                       26,
		"ListAutoModerationRulesForGuild":        27,
		"GetAutoModerationRule":                  28,
		"CreateAutoModerationRule":               29,
		"ModifyAutoModerationRule":               30,
		"DeleteAutoModerationRule":               31,
		"GetChannel":                             32,
		"ModifyChannel":                          33,
		"ModifyChannelGroupDM":                   34,
		"ModifyChannelGuild":                     35,
		"ModifyChannelThread":                    36,
		"DeleteCloseChannel":                     37,
		"GetChannelMessages":                     38,
		"GetChannelMessage":                      39,
		"CreateMessage":                          40,
		"CrosspostMessage":                       41,
		"CreateReaction":                         42,
		"DeleteOwnReaction":                      43,
		"DeleteUserReaction":                     44,
		"GetReactions":                           45,
		"DeleteAllReactions":                     46,
		"DeleteAllReactionsforEmoji":             47,
		"EditMessage":                            48,
		"DeleteMessage":                          49,
		"BulkDeleteMessages":                     50,
		"EditChannelPermissions":                 51,
		"GetChannelInvites":                      52,
		"CreateChannelInvite":                    53,
		"DeleteChannelPermission":                54,
		"FollowAnnouncementChannel":              55,
		"TriggerTypingIndicator":                 56,
		"GetPinnedMessages":                      57,
		"PinMessage":                             58,
		"UnpinMessage":                           59,
		"GroupDMAddRecipient":                    60,
		"GroupDMRemoveRecipient":                 61,
		"StartThreadfromMessage":                 62,
		"StartThreadwithoutMessage":              63,
		"StartThreadinForumChannel":              64,
		"JoinThread":                             65,
		"AddThreadMember":                        66,
		"LeaveThread":                            67,
		"RemoveThreadMember":                     68,
		"GetThreadMember":                        69,
		"ListThreadMembers":                      70,
		"ListPublicArchivedThreads":              71,
		"ListPrivateArchivedThreads":             72,
		"ListJoinedPrivateArchivedThreads":       73,
		"ListGuildEmojis":                        74,
		"GetGuildEmoji":                          75,
		"CreateGuildEmoji":                       76,
		"ModifyGuildEmoji":                       77,
		"DeleteGuildEmoji":                       78,
		"CreateGuild":                            79,
		"GetGuild":                               80,
		"GetGuildPreview":                        81,
		"ModifyGuild":                            82,
		"DeleteGuild":                            83,
		"GetGuildChannels":                       84,
		"CreateGuildChannel":                     85,
		"ModifyGuildChannelPositions":            86,
		"ListActiveGuildThreads":                 87,
		"GetGuildMember":                         88,
		"ListGuildMembers":                       89,
		"SearchGuildMembers":                     90,
		"AddGuildMember":                         91,
		"ModifyGuildMember":                      92,
		"ModifyCurrentMember":                    93,
		"AddGuildMemberRole":                     94,
		"RemoveGuildMemberRole":                  95,
		"RemoveGuildMember":                      96,
		"GetGuildBans":                           97,
		"GetGuildBan":                            98,
		"CreateGuildBan":                         99,
		"RemoveGuildBan":                         100,
		"GetGuildRoles":                          101,
		"CreateGuildRole":                        102,
		"ModifyGuildRolePositions":               103,
		"ModifyGuildRole":                        104,
		"DeleteGuildRole":                        105,
		"GetGuildPruneCount":                     106,
		"BeginGuildPrune":                        107,
		"GetGuildVoiceRegions":                   108,
		"GetGuildInvites":                        109,
		"GetGuildIntegrations":                   110,
		"DeleteGuildIntegration":                 111,
		"GetGuildWidgetSettings":                 112,
		"ModifyGuildWidget":                      113,
		"GetGuildWidget":                         114,
		"GetGuildVanityURL":                      115,
		"GetGuildWidgetImage":                    116,
		"GetGuildWelcomeScreen":                  117,
		"ModifyGuildWelcomeScreen":               118,
		"ModifyCurrentUserVoiceState":            119,
		"ModifyUserVoiceState":                   120,
		"ListScheduledEventsforGuild":            121,
		"CreateGuildScheduledEvent":              122,
		"GetGuildScheduledEvent":                 123,
		"ModifyGuildScheduledEvent":              124,
		"DeleteGuildScheduledEvent":              125,
		"GetGuildScheduledEventUsers":            126,
		"GetGuildTemplate":                       127,
		"CreateGuildfromGuildTemplate":           128,
		"GetGuildTemplates":                      129,
		"CreateGuildTemplate":                    130,
		"SyncGuildTemplate":                      131,
		"ModifyGuildTemplate":                    132,
		"DeleteGuildTemplate":                    133,
		"GetInvite":                              134,
		"DeleteInvite":                           135,
		"CreateStageInstance":                    136,
		"GetStageInstance":                       137,
		"ModifyStageInstance":                    138,
		"DeleteStageInstance":                    139,
		"GetSticker":                             140,
		"ListNitroStickerPacks":                  141,
		"ListGuildStickers":                      142,
		"GetGuildSticker":                        143,
		"CreateGuildSticker":                     144,
		"ModifyGuildSticker":                     145,
		"DeleteGuildSticker":                     146,
		"GetCurrentUser":                         147,
		"GetUser":                                148,
		"ModifyCurrentUser":                      149,
		"GetCurrentUserGuilds":                   150,
		"GetCurrentUserGuildMember":              151,
		"LeaveGuild":                             152,
		"CreateGroupDM":                          153,
		"GetUserConnections":                     154,
		"ListVoiceRegions":                       155,
		"CreateWebhook":                          156,
		"GetChannelWebhooks":                     157,
		"GetGuildWebhooks":                       158,
		"GetWebhook":                             159,
		"GetWebhookwithToken":                    160,
		"ModifyWebhook":                          161,
		"ModifyWebhookwithToken":                 162,
		"DeleteWebhook":                          163,
		"DeleteWebhookwithToken":                 164,
		"ExecuteWebhook":                         165,
		"ExecuteSlackCompatibleWebhook":          166,
		"ExecuteGitHubCompatibleWebhook":         167,
		"GetWebhookMessage":                      168,
		"EditWebhookMessage":                     169,
		"DeleteWebhookMessage":                   170,
		"GetGateway":                             171,
		"GetGatewayBot":                          172,
		"GetCurrentBotApplicationInformation":    173,
		"GetCurrentAuthorizationInformation":     174,
	}
)

// Send sends a GetGlobalApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *GetGlobalApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGlobalApplicationCommands", err)
	}

	result := make([]*ApplicationCommand, 0)
	routeid, resourceid := RateLimitHashFuncs[2]("2")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGlobalApplicationCommands(bot.ApplicationID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGlobalApplicationCommands", err)
	}

	return result, nil
}

// Send sends a CreateGlobalApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *CreateGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGlobalApplicationCommand", err)
	}

	result := new(ApplicationCommand)
	routeid, resourceid := RateLimitHashFuncs[3]("3")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGlobalApplicationCommand(bot.ApplicationID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGlobalApplicationCommand", err)
	}

	return result, nil
}

// Send sends a GetGlobalApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *GetGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	result := new(ApplicationCommand)
	routeid, resourceid := RateLimitHashFuncs[4]("4", "297ffb1f"+r.CommandID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGlobalApplicationCommand(bot.ApplicationID, r.CommandID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGlobalApplicationCommand", err)
	}

	return result, nil
}

// Send sends a EditGlobalApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *EditGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditGlobalApplicationCommand", err)
	}

	result := new(ApplicationCommand)
	routeid, resourceid := RateLimitHashFuncs[5]("5", "297ffb1f"+r.CommandID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointEditGlobalApplicationCommand(bot.ApplicationID, r.CommandID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditGlobalApplicationCommand", err)
	}

	return result, nil
}

// Send sends a DeleteGlobalApplicationCommand request to Discord and returns a error.
func (r *DeleteGlobalApplicationCommand) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[6]("6", "297ffb1f"+r.CommandID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGlobalApplicationCommand(bot.ApplicationID, r.CommandID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGlobalApplicationCommand", err)
	}

	return nil
}

// Send sends a BulkOverwriteGlobalApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *BulkOverwriteGlobalApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "BulkOverwriteGlobalApplicationCommands", err)
	}

	result := make([]*ApplicationCommand, 0)
	routeid, resourceid := RateLimitHashFuncs[7]("7")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointBulkOverwriteGlobalApplicationCommands(bot.ApplicationID), ContentTypeJSON, body, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "BulkOverwriteGlobalApplicationCommands", err)
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *GetGuildApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGuildApplicationCommands", err)
	}

	result := make([]*ApplicationCommand, 0)
	routeid, resourceid := RateLimitHashFuncs[8]("8", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildApplicationCommands(bot.ApplicationID, r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildApplicationCommands", err)
	}

	return result, nil
}

// Send sends a CreateGuildApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *CreateGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildApplicationCommand", err)
	}

	result := new(ApplicationCommand)
	routeid, resourceid := RateLimitHashFuncs[9]("9", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildApplicationCommand(bot.ApplicationID, r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildApplicationCommand", err)
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *GetGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	result := new(ApplicationCommand)
	routeid, resourceid := RateLimitHashFuncs[10]("10", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildApplicationCommand", err)
	}

	return result, nil
}

// Send sends a EditGuildApplicationCommand request to Discord and returns a ApplicationCommand.
func (r *EditGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditGuildApplicationCommand", err)
	}

	result := new(ApplicationCommand)
	routeid, resourceid := RateLimitHashFuncs[11]("11", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointEditGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditGuildApplicationCommand", err)
	}

	return result, nil
}

// Send sends a DeleteGuildApplicationCommand request to Discord and returns a error.
func (r *DeleteGuildApplicationCommand) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[12]("12", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildApplicationCommand", err)
	}

	return nil
}

// Send sends a BulkOverwriteGuildApplicationCommands request to Discord and returns a []*ApplicationCommand.
func (r *BulkOverwriteGuildApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "BulkOverwriteGuildApplicationCommands", err)
	}

	result := make([]*ApplicationCommand, 0)
	routeid, resourceid := RateLimitHashFuncs[13]("13", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointBulkOverwriteGuildApplicationCommands(bot.ApplicationID, r.GuildID), ContentTypeJSON, body, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "BulkOverwriteGuildApplicationCommands", err)
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *GetGuildApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	result := new(GuildApplicationCommandPermissions)
	routeid, resourceid := RateLimitHashFuncs[14]("14", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildApplicationCommandPermissions(bot.ApplicationID, r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a GetApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *GetApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	result := new(GuildApplicationCommandPermissions)
	routeid, resourceid := RateLimitHashFuncs[15]("15", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetApplicationCommandPermissions(bot.ApplicationID, r.GuildID, r.CommandID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a EditApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *EditApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditApplicationCommandPermissions", err)
	}

	result := new(GuildApplicationCommandPermissions)
	routeid, resourceid := RateLimitHashFuncs[16]("16", "45892a5d"+r.GuildID, "297ffb1f"+r.CommandID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointEditApplicationCommandPermissions(bot.ApplicationID, r.GuildID, r.CommandID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a BatchEditApplicationCommandPermissions request to Discord and returns a GuildApplicationCommandPermissions.
func (r *BatchEditApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	result := new(GuildApplicationCommandPermissions)
	routeid, resourceid := RateLimitHashFuncs[17]("17", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointBatchEditApplicationCommandPermissions(bot.ApplicationID, r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "BatchEditApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a CreateInteractionResponse request to Discord and returns a error.
func (r *CreateInteractionResponse) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[18]("18", "beb3d0e6"+r.InteractionID, "cb69bb28"+r.InteractionToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateInteractionResponse(r.InteractionID, r.InteractionToken), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "CreateInteractionResponse", err)
	}

	return nil
}

// Send sends a GetOriginalInteractionResponse request to Discord and returns a error.
func (r *GetOriginalInteractionResponse) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[19]("19", "cb69bb28"+r.InteractionToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointGetOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GetOriginalInteractionResponse", err)
	}

	return nil
}

// Send sends a EditOriginalInteractionResponse request to Discord and returns a Message.
func (r *EditOriginalInteractionResponse) Send(bot *Client) (*Message, error) {
	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[20]("20", "cb69bb28"+r.InteractionToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointEditOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditOriginalInteractionResponse", err)
	}

	return result, nil
}

// Send sends a DeleteOriginalInteractionResponse request to Discord and returns a error.
func (r *DeleteOriginalInteractionResponse) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[21]("21", "cb69bb28"+r.InteractionToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteOriginalInteractionResponse", err)
	}

	return nil
}

// Send sends a CreateFollowupMessage request to Discord and returns a Message.
func (r *CreateFollowupMessage) Send(bot *Client) (*Message, error) {
	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[22]("22", "cb69bb28"+r.InteractionToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateFollowupMessage(bot.ApplicationID, r.InteractionToken), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateFollowupMessage", err)
	}

	return result, nil
}

// Send sends a GetFollowupMessage request to Discord and returns a Message.
func (r *GetFollowupMessage) Send(bot *Client) (*Message, error) {
	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[23]("23", "cb69bb28"+r.InteractionToken, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetFollowupMessage", err)
	}

	return result, nil
}

// Send sends a EditFollowupMessage request to Discord and returns a Message.
func (r *EditFollowupMessage) Send(bot *Client) (*Message, error) {
	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[24]("24", "cb69bb28"+r.InteractionToken, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointEditFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditFollowupMessage", err)
	}

	return result, nil
}

// Send sends a DeleteFollowupMessage request to Discord and returns a error.
func (r *DeleteFollowupMessage) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[25]("25", "cb69bb28"+r.InteractionToken, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteFollowupMessage", err)
	}

	return nil
}

// Send sends a GetGuildAuditLog request to Discord and returns a AuditLog.
func (r *GetGuildAuditLog) Send(bot *Client) (*AuditLog, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGuildAuditLog", err)
	}

	result := new(AuditLog)
	routeid, resourceid := RateLimitHashFuncs[26]("26", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildAuditLog(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildAuditLog", err)
	}

	return result, nil
}

// Send sends a ListAutoModerationRulesForGuild request to Discord and returns a []*AutoModerationAction.
func (r *ListAutoModerationRulesForGuild) Send(bot *Client) ([]*AutoModerationAction, error) {
	result := make([]*AutoModerationAction, 0)
	routeid, resourceid := RateLimitHashFuncs[27]("27", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListAutoModerationRulesForGuild(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListAutoModerationRulesForGuild", err)
	}

	return result, nil
}

// Send sends a GetAutoModerationRule request to Discord and returns a AutoModerationRule.
func (r *GetAutoModerationRule) Send(bot *Client) (*AutoModerationRule, error) {
	result := new(AutoModerationRule)
	routeid, resourceid := RateLimitHashFuncs[28]("28", "45892a5d"+r.GuildID, "1b7efe5d"+r.AutoModerationRuleID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetAutoModerationRule(r.GuildID, r.AutoModerationRuleID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetAutoModerationRule", err)
	}

	return result, nil
}

// Send sends a CreateAutoModerationRule request to Discord and returns a AutoModerationRule.
func (r *CreateAutoModerationRule) Send(bot *Client) (*AutoModerationRule, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateAutoModerationRule", err)
	}

	result := new(AutoModerationRule)
	routeid, resourceid := RateLimitHashFuncs[29]("29", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateAutoModerationRule(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateAutoModerationRule", err)
	}

	return result, nil
}

// Send sends a ModifyAutoModerationRule request to Discord and returns a AutoModerationRule.
func (r *ModifyAutoModerationRule) Send(bot *Client) (*AutoModerationRule, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyAutoModerationRule", err)
	}

	result := new(AutoModerationRule)
	routeid, resourceid := RateLimitHashFuncs[30]("30", "45892a5d"+r.GuildID, "1b7efe5d"+r.AutoModerationRuleID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyAutoModerationRule(r.GuildID, r.AutoModerationRuleID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyAutoModerationRule", err)
	}

	return result, nil
}

// Send sends a DeleteAutoModerationRule request to Discord and returns a error.
func (r *DeleteAutoModerationRule) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[31]("31", "45892a5d"+r.GuildID, "1b7efe5d"+r.AutoModerationRuleID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteAutoModerationRule(r.GuildID, r.AutoModerationRuleID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteAutoModerationRule", err)
	}

	return nil
}

// Send sends a GetChannel request to Discord and returns a Channel.
func (r *GetChannel) Send(bot *Client) (*Channel, error) {
	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[32]("32", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetChannel(r.ChannelID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannel", err)
	}

	return result, nil
}

// Send sends a ModifyChannel request to Discord and returns a Channel.
func (r *ModifyChannel) Send(bot *Client) (*Channel, error) {
	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[33]("33", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyChannel(r.ChannelID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannel", err)
	}

	return result, nil
}

// Send sends a ModifyChannelGroupDM request to Discord and returns a Channel.
func (r *ModifyChannelGroupDM) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyChannelGroupDM", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[34]("34", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyChannelGroupDM(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannelGroupDM", err)
	}

	return result, nil
}

// Send sends a ModifyChannelGuild request to Discord and returns a Channel.
func (r *ModifyChannelGuild) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyChannelGuild", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[35]("35", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyChannelGuild(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannelGuild", err)
	}

	return result, nil
}

// Send sends a ModifyChannelThread request to Discord and returns a Channel.
func (r *ModifyChannelThread) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyChannelThread", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[36]("36", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyChannelThread(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannelThread", err)
	}

	return result, nil
}

// Send sends a DeleteCloseChannel request to Discord and returns a Channel.
func (r *DeleteCloseChannel) Send(bot *Client) (*Channel, error) {
	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[37]("37", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteCloseChannel(r.ChannelID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "DeleteCloseChannel", err)
	}

	return result, nil
}

// Send sends a GetChannelMessages request to Discord and returns a []*Message.
func (r *GetChannelMessages) Send(bot *Client) ([]*Message, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetChannelMessages", err)
	}

	result := make([]*Message, 0)
	routeid, resourceid := RateLimitHashFuncs[38]("38", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetChannelMessages(r.ChannelID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelMessages", err)
	}

	return result, nil
}

// Send sends a GetChannelMessage request to Discord and returns a Message.
func (r *GetChannelMessage) Send(bot *Client) (*Message, error) {
	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[39]("39", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetChannelMessage(r.ChannelID, r.MessageID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelMessage", err)
	}

	return result, nil
}

// Send sends a CreateMessage request to Discord and returns a Message.
func (r *CreateMessage) Send(bot *Client) (*Message, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateMessage", err)
	}

	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[40]("40", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateMessage(r.ChannelID), ContentTypeMultipartForm, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateMessage", err)
	}

	return result, nil
}

// Send sends a CrosspostMessage request to Discord and returns a Message.
func (r *CrosspostMessage) Send(bot *Client) (*Message, error) {
	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[41]("41", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCrosspostMessage(r.ChannelID, r.MessageID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CrosspostMessage", err)
	}

	return result, nil
}

// Send sends a CreateReaction request to Discord and returns a error.
func (r *CreateReaction) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[42]("42", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointCreateReaction(r.ChannelID, r.MessageID, r.Emoji), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "CreateReaction", err)
	}

	return nil
}

// Send sends a DeleteOwnReaction request to Discord and returns a error.
func (r *DeleteOwnReaction) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[43]("43", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteOwnReaction(r.ChannelID, r.MessageID, r.Emoji), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteOwnReaction", err)
	}

	return nil
}

// Send sends a DeleteUserReaction request to Discord and returns a error.
func (r *DeleteUserReaction) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[44]("44", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteUserReaction(r.ChannelID, r.MessageID, r.Emoji, r.UserID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteUserReaction", err)
	}

	return nil
}

// Send sends a GetReactions request to Discord and returns a []*User.
func (r *GetReactions) Send(bot *Client) ([]*User, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetReactions", err)
	}

	result := make([]*User, 0)
	routeid, resourceid := RateLimitHashFuncs[45]("45", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetReactions(r.ChannelID, r.MessageID, r.Emoji)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetReactions", err)
	}

	return result, nil
}

// Send sends a DeleteAllReactions request to Discord and returns a error.
func (r *DeleteAllReactions) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[46]("46", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteAllReactions(r.ChannelID, r.MessageID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteAllReactions", err)
	}

	return nil
}

// Send sends a DeleteAllReactionsforEmoji request to Discord and returns a error.
func (r *DeleteAllReactionsforEmoji) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[47]("47", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID, "033ebcdd"+r.Emoji)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteAllReactionsforEmoji(r.ChannelID, r.MessageID, r.Emoji), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteAllReactionsforEmoji", err)
	}

	return nil
}

// Send sends a EditMessage request to Discord and returns a Message.
func (r *EditMessage) Send(bot *Client) (*Message, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditMessage", err)
	}

	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[48]("48", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointEditMessage(r.ChannelID, r.MessageID), ContentTypeMultipartForm, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditMessage", err)
	}

	return result, nil
}

// Send sends a DeleteMessage request to Discord and returns a error.
func (r *DeleteMessage) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[49]("49", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteMessage(r.ChannelID, r.MessageID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteMessage", err)
	}

	return nil
}

// Send sends a BulkDeleteMessages request to Discord and returns a error.
func (r *BulkDeleteMessages) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "BulkDeleteMessages", err)
	}

	routeid, resourceid := RateLimitHashFuncs[50]("50", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointBulkDeleteMessages(r.ChannelID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "BulkDeleteMessages", err)
	}

	return nil
}

// Send sends a EditChannelPermissions request to Discord and returns a error.
func (r *EditChannelPermissions) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "EditChannelPermissions", err)
	}

	routeid, resourceid := RateLimitHashFuncs[51]("51", "e5416649"+r.ChannelID, "9167175f"+r.OverwriteID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointEditChannelPermissions(r.ChannelID, r.OverwriteID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "EditChannelPermissions", err)
	}

	return nil
}

// Send sends a GetChannelInvites request to Discord and returns a []*Invite.
func (r *GetChannelInvites) Send(bot *Client) ([]*Invite, error) {
	result := make([]*Invite, 0)
	routeid, resourceid := RateLimitHashFuncs[52]("52", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetChannelInvites(r.ChannelID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelInvites", err)
	}

	return result, nil
}

// Send sends a CreateChannelInvite request to Discord and returns a Invite.
func (r *CreateChannelInvite) Send(bot *Client) (*Invite, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateChannelInvite", err)
	}

	result := new(Invite)
	routeid, resourceid := RateLimitHashFuncs[53]("53", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateChannelInvite(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateChannelInvite", err)
	}

	return result, nil
}

// Send sends a DeleteChannelPermission request to Discord and returns a error.
func (r *DeleteChannelPermission) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[54]("54", "e5416649"+r.ChannelID, "9167175f"+r.OverwriteID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteChannelPermission(r.ChannelID, r.OverwriteID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteChannelPermission", err)
	}

	return nil
}

// Send sends a FollowAnnouncementChannel request to Discord and returns a FollowedChannel.
func (r *FollowAnnouncementChannel) Send(bot *Client) (*FollowedChannel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "FollowAnnouncementChannel", err)
	}

	result := new(FollowedChannel)
	routeid, resourceid := RateLimitHashFuncs[55]("55", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointFollowAnnouncementChannel(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "FollowAnnouncementChannel", err)
	}

	return result, nil
}

// Send sends a TriggerTypingIndicator request to Discord and returns a error.
func (r *TriggerTypingIndicator) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[56]("56", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointTriggerTypingIndicator(r.ChannelID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "TriggerTypingIndicator", err)
	}

	return nil
}

// Send sends a GetPinnedMessages request to Discord and returns a []*Message.
func (r *GetPinnedMessages) Send(bot *Client) ([]*Message, error) {
	result := make([]*Message, 0)
	routeid, resourceid := RateLimitHashFuncs[57]("57", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetPinnedMessages(r.ChannelID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetPinnedMessages", err)
	}

	return result, nil
}

// Send sends a PinMessage request to Discord and returns a error.
func (r *PinMessage) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[58]("58", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointPinMessage(r.ChannelID, r.MessageID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "PinMessage", err)
	}

	return nil
}

// Send sends a UnpinMessage request to Discord and returns a error.
func (r *UnpinMessage) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[59]("59", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointUnpinMessage(r.ChannelID, r.MessageID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "UnpinMessage", err)
	}

	return nil
}

// Send sends a GroupDMAddRecipient request to Discord and returns a error.
func (r *GroupDMAddRecipient) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "GroupDMAddRecipient", err)
	}

	routeid, resourceid := RateLimitHashFuncs[60]("60", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointGroupDMAddRecipient(r.ChannelID, r.UserID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GroupDMAddRecipient", err)
	}

	return nil
}

// Send sends a GroupDMRemoveRecipient request to Discord and returns a error.
func (r *GroupDMRemoveRecipient) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[61]("61", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointGroupDMRemoveRecipient(r.ChannelID, r.UserID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GroupDMRemoveRecipient", err)
	}

	return nil
}

// Send sends a StartThreadfromMessage request to Discord and returns a Channel.
func (r *StartThreadfromMessage) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "StartThreadfromMessage", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[62]("62", "e5416649"+r.ChannelID, "d57d6589"+r.MessageID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointStartThreadfromMessage(r.ChannelID, r.MessageID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "StartThreadfromMessage", err)
	}

	return result, nil
}

// Send sends a StartThreadwithoutMessage request to Discord and returns a Channel.
func (r *StartThreadwithoutMessage) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "StartThreadwithoutMessage", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[63]("63", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointStartThreadwithoutMessage(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "StartThreadwithoutMessage", err)
	}

	return result, nil
}

// Send sends a StartThreadinForumChannel request to Discord and returns a Channel.
func (r *StartThreadinForumChannel) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "StartThreadinForumChannel", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[64]("64", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointStartThreadinForumChannel(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "StartThreadinForumChannel", err)
	}

	return result, nil
}

// Send sends a JoinThread request to Discord and returns a error.
func (r *JoinThread) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[65]("65", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointJoinThread(r.ChannelID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "JoinThread", err)
	}

	return nil
}

// Send sends a AddThreadMember request to Discord and returns a error.
func (r *AddThreadMember) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[66]("66", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointAddThreadMember(r.ChannelID, r.UserID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "AddThreadMember", err)
	}

	return nil
}

// Send sends a LeaveThread request to Discord and returns a error.
func (r *LeaveThread) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[67]("67", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointLeaveThread(r.ChannelID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "LeaveThread", err)
	}

	return nil
}

// Send sends a RemoveThreadMember request to Discord and returns a error.
func (r *RemoveThreadMember) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[68]("68", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointRemoveThreadMember(r.ChannelID, r.UserID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveThreadMember", err)
	}

	return nil
}

// Send sends a GetThreadMember request to Discord and returns a ThreadMember.
func (r *GetThreadMember) Send(bot *Client) (*ThreadMember, error) {
	result := new(ThreadMember)
	routeid, resourceid := RateLimitHashFuncs[69]("69", "e5416649"+r.ChannelID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetThreadMember(r.ChannelID, r.UserID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetThreadMember", err)
	}

	return result, nil
}

// Send sends a ListThreadMembers request to Discord and returns a []*ThreadMember.
func (r *ListThreadMembers) Send(bot *Client) ([]*ThreadMember, error) {
	result := make([]*ThreadMember, 0)
	routeid, resourceid := RateLimitHashFuncs[70]("70", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListThreadMembers(r.ChannelID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListThreadMembers", err)
	}

	return result, nil
}

// Send sends a ListPublicArchivedThreads request to Discord and returns a ListPublicArchivedThreadsResponse.
func (r *ListPublicArchivedThreads) Send(bot *Client) (*ListPublicArchivedThreadsResponse, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "ListPublicArchivedThreads", err)
	}

	result := new(ListPublicArchivedThreadsResponse)
	routeid, resourceid := RateLimitHashFuncs[71]("71", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListPublicArchivedThreads(r.ChannelID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListPublicArchivedThreads", err)
	}

	return result, nil
}

// Send sends a ListPrivateArchivedThreads request to Discord and returns a ListPrivateArchivedThreadsResponse.
func (r *ListPrivateArchivedThreads) Send(bot *Client) (*ListPrivateArchivedThreadsResponse, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "ListPrivateArchivedThreads", err)
	}

	result := new(ListPrivateArchivedThreadsResponse)
	routeid, resourceid := RateLimitHashFuncs[72]("72", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListPrivateArchivedThreads(r.ChannelID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListPrivateArchivedThreads", err)
	}

	return result, nil
}

// Send sends a ListJoinedPrivateArchivedThreads request to Discord and returns a ListJoinedPrivateArchivedThreadsResponse.
func (r *ListJoinedPrivateArchivedThreads) Send(bot *Client) (*ListJoinedPrivateArchivedThreadsResponse, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "ListJoinedPrivateArchivedThreads", err)
	}

	result := new(ListJoinedPrivateArchivedThreadsResponse)
	routeid, resourceid := RateLimitHashFuncs[73]("73", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListJoinedPrivateArchivedThreads(r.ChannelID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListJoinedPrivateArchivedThreads", err)
	}

	return result, nil
}

// Send sends a ListGuildEmojis request to Discord and returns a []*Emoji.
func (r *ListGuildEmojis) Send(bot *Client) ([]*Emoji, error) {
	result := make([]*Emoji, 0)
	routeid, resourceid := RateLimitHashFuncs[74]("74", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListGuildEmojis(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListGuildEmojis", err)
	}

	return result, nil
}

// Send sends a GetGuildEmoji request to Discord and returns a Emoji.
func (r *GetGuildEmoji) Send(bot *Client) (*Emoji, error) {
	result := new(Emoji)
	routeid, resourceid := RateLimitHashFuncs[75]("75", "45892a5d"+r.GuildID, "67c175a8"+r.EmojiID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildEmoji(r.GuildID, r.EmojiID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildEmoji", err)
	}

	return result, nil
}

// Send sends a CreateGuildEmoji request to Discord and returns a Emoji.
func (r *CreateGuildEmoji) Send(bot *Client) (*Emoji, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildEmoji", err)
	}

	result := new(Emoji)
	routeid, resourceid := RateLimitHashFuncs[76]("76", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildEmoji(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildEmoji", err)
	}

	return result, nil
}

// Send sends a ModifyGuildEmoji request to Discord and returns a Emoji.
func (r *ModifyGuildEmoji) Send(bot *Client) (*Emoji, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildEmoji", err)
	}

	result := new(Emoji)
	routeid, resourceid := RateLimitHashFuncs[77]("77", "45892a5d"+r.GuildID, "67c175a8"+r.EmojiID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildEmoji(r.GuildID, r.EmojiID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildEmoji", err)
	}

	return result, nil
}

// Send sends a DeleteGuildEmoji request to Discord and returns a error.
func (r *DeleteGuildEmoji) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[78]("78", "45892a5d"+r.GuildID, "67c175a8"+r.EmojiID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuildEmoji(r.GuildID, r.EmojiID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildEmoji", err)
	}

	return nil
}

// Send sends a CreateGuild request to Discord and returns a Guild.
func (r *CreateGuild) Send(bot *Client) (*Guild, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuild", err)
	}

	result := new(Guild)
	routeid, resourceid := RateLimitHashFuncs[79]("79")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuild(), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuild", err)
	}

	return result, nil
}

// Send sends a GetGuild request to Discord and returns a Guild.
func (r *GetGuild) Send(bot *Client) (*Guild, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGuild", err)
	}

	result := new(Guild)
	routeid, resourceid := RateLimitHashFuncs[80]("80", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuild(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuild", err)
	}

	return result, nil
}

// Send sends a GetGuildPreview request to Discord and returns a GuildPreview.
func (r *GetGuildPreview) Send(bot *Client) (*GuildPreview, error) {
	result := new(GuildPreview)
	routeid, resourceid := RateLimitHashFuncs[81]("81", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildPreview(r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildPreview", err)
	}

	return result, nil
}

// Send sends a ModifyGuild request to Discord and returns a Guild.
func (r *ModifyGuild) Send(bot *Client) (*Guild, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuild", err)
	}

	result := new(Guild)
	routeid, resourceid := RateLimitHashFuncs[82]("82", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuild(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuild", err)
	}

	return result, nil
}

// Send sends a DeleteGuild request to Discord and returns a error.
func (r *DeleteGuild) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[83]("83", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuild(r.GuildID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuild", err)
	}

	return nil
}

// Send sends a GetGuildChannels request to Discord and returns a []*Channel.
func (r *GetGuildChannels) Send(bot *Client) ([]*Channel, error) {
	result := make([]*Channel, 0)
	routeid, resourceid := RateLimitHashFuncs[84]("84", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildChannels(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildChannels", err)
	}

	return result, nil
}

// Send sends a CreateGuildChannel request to Discord and returns a Channel.
func (r *CreateGuildChannel) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildChannel", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[85]("85", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildChannel(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildChannel", err)
	}

	return result, nil
}

// Send sends a ModifyGuildChannelPositions request to Discord and returns a error.
func (r *ModifyGuildChannelPositions) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ModifyGuildChannelPositions", err)
	}

	routeid, resourceid := RateLimitHashFuncs[86]("86", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildChannelPositions(r.GuildID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ModifyGuildChannelPositions", err)
	}

	return nil
}

// Send sends a ListActiveGuildThreads request to Discord and returns a ListActiveGuildThreadsResponse.
func (r *ListActiveGuildThreads) Send(bot *Client) (*ListActiveGuildThreadsResponse, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListActiveGuildThreads", err)
	}

	result := new(ListActiveGuildThreadsResponse)
	routeid, resourceid := RateLimitHashFuncs[87]("87", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListActiveGuildThreads(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListActiveGuildThreads", err)
	}

	return result, nil
}

// Send sends a GetGuildMember request to Discord and returns a GuildMember.
func (r *GetGuildMember) Send(bot *Client) (*GuildMember, error) {
	result := new(GuildMember)
	routeid, resourceid := RateLimitHashFuncs[88]("88", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildMember(r.GuildID, r.UserID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildMember", err)
	}

	return result, nil
}

// Send sends a ListGuildMembers request to Discord and returns a []*GuildMember.
func (r *ListGuildMembers) Send(bot *Client) ([]*GuildMember, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "ListGuildMembers", err)
	}

	result := make([]*GuildMember, 0)
	routeid, resourceid := RateLimitHashFuncs[89]("89", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListGuildMembers(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListGuildMembers", err)
	}

	return result, nil
}

// Send sends a SearchGuildMembers request to Discord and returns a []*GuildMember.
func (r *SearchGuildMembers) Send(bot *Client) ([]*GuildMember, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "SearchGuildMembers", err)
	}

	result := make([]*GuildMember, 0)
	routeid, resourceid := RateLimitHashFuncs[90]("90", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointSearchGuildMembers(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "SearchGuildMembers", err)
	}

	return result, nil
}

// Send sends a AddGuildMember request to Discord and returns a GuildMember.
func (r *AddGuildMember) Send(bot *Client) (*GuildMember, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "AddGuildMember", err)
	}

	result := new(GuildMember)
	routeid, resourceid := RateLimitHashFuncs[91]("91", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointAddGuildMember(r.GuildID, r.UserID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "AddGuildMember", err)
	}

	return result, nil
}

// Send sends a ModifyGuildMember request to Discord and returns a GuildMember.
func (r *ModifyGuildMember) Send(bot *Client) (*GuildMember, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildMember", err)
	}

	result := new(GuildMember)
	routeid, resourceid := RateLimitHashFuncs[92]("92", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildMember(r.GuildID, r.UserID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildMember", err)
	}

	return result, nil
}

// Send sends a ModifyCurrentMember request to Discord and returns a GuildMember.
func (r *ModifyCurrentMember) Send(bot *Client) (*GuildMember, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyCurrentMember", err)
	}

	result := new(GuildMember)
	routeid, resourceid := RateLimitHashFuncs[93]("93", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyCurrentMember(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyCurrentMember", err)
	}

	return result, nil
}

// Send sends a AddGuildMemberRole request to Discord and returns a error.
func (r *AddGuildMemberRole) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[94]("94", "45892a5d"+r.GuildID, "209c92df"+r.UserID, "3cf7dd7c"+r.RoleID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointAddGuildMemberRole(r.GuildID, r.UserID, r.RoleID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "AddGuildMemberRole", err)
	}

	return nil
}

// Send sends a RemoveGuildMemberRole request to Discord and returns a error.
func (r *RemoveGuildMemberRole) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[95]("95", "45892a5d"+r.GuildID, "209c92df"+r.UserID, "3cf7dd7c"+r.RoleID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointRemoveGuildMemberRole(r.GuildID, r.UserID, r.RoleID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveGuildMemberRole", err)
	}

	return nil
}

// Send sends a RemoveGuildMember request to Discord and returns a error.
func (r *RemoveGuildMember) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[96]("96", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointRemoveGuildMember(r.GuildID, r.UserID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveGuildMember", err)
	}

	return nil
}

// Send sends a GetGuildBans request to Discord and returns a []*Ban.
func (r *GetGuildBans) Send(bot *Client) ([]*Ban, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGuildBans", err)
	}

	result := make([]*Ban, 0)
	routeid, resourceid := RateLimitHashFuncs[97]("97", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildBans(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildBans", err)
	}

	return result, nil
}

// Send sends a GetGuildBan request to Discord and returns a Ban.
func (r *GetGuildBan) Send(bot *Client) (*Ban, error) {
	result := new(Ban)
	routeid, resourceid := RateLimitHashFuncs[98]("98", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildBan(r.GuildID, r.UserID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildBan", err)
	}

	return result, nil
}

// Send sends a CreateGuildBan request to Discord and returns a error.
func (r *CreateGuildBan) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "CreateGuildBan", err)
	}

	routeid, resourceid := RateLimitHashFuncs[99]("99", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointCreateGuildBan(r.GuildID, r.UserID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "CreateGuildBan", err)
	}

	return nil
}

// Send sends a RemoveGuildBan request to Discord and returns a error.
func (r *RemoveGuildBan) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[100]("100", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointRemoveGuildBan(r.GuildID, r.UserID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveGuildBan", err)
	}

	return nil
}

// Send sends a GetGuildRoles request to Discord and returns a []*Role.
func (r *GetGuildRoles) Send(bot *Client) ([]*Role, error) {
	result := make([]*Role, 0)
	routeid, resourceid := RateLimitHashFuncs[101]("101", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildRoles(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildRoles", err)
	}

	return result, nil
}

// Send sends a CreateGuildRole request to Discord and returns a Role.
func (r *CreateGuildRole) Send(bot *Client) (*Role, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildRole", err)
	}

	result := new(Role)
	routeid, resourceid := RateLimitHashFuncs[102]("102", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildRole(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildRole", err)
	}

	return result, nil
}

// Send sends a ModifyGuildRolePositions request to Discord and returns a []*Role.
func (r *ModifyGuildRolePositions) Send(bot *Client) ([]*Role, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildRolePositions", err)
	}

	result := make([]*Role, 0)
	routeid, resourceid := RateLimitHashFuncs[103]("103", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildRolePositions(r.GuildID), ContentTypeJSON, body, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildRolePositions", err)
	}

	return result, nil
}

// Send sends a ModifyGuildRole request to Discord and returns a Role.
func (r *ModifyGuildRole) Send(bot *Client) (*Role, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildRole", err)
	}

	result := new(Role)
	routeid, resourceid := RateLimitHashFuncs[104]("104", "45892a5d"+r.GuildID, "3cf7dd7c"+r.RoleID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildRole(r.GuildID, r.RoleID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildRole", err)
	}

	return result, nil
}

// Send sends a DeleteGuildRole request to Discord and returns a error.
func (r *DeleteGuildRole) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[105]("105", "45892a5d"+r.GuildID, "3cf7dd7c"+r.RoleID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuildRole(r.GuildID, r.RoleID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildRole", err)
	}

	return nil
}

// Send sends a GetGuildPruneCount request to Discord and returns a error.
func (r *GetGuildPruneCount) Send(bot *Client) error {
	query, err := EndpointQueryString(r)
	if err != nil {
		return fmt.Errorf(ErrQueryString, "GetGuildPruneCount", err)
	}

	routeid, resourceid := RateLimitHashFuncs[106]("106", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildPruneCount(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GetGuildPruneCount", err)
	}

	return nil
}

// Send sends a BeginGuildPrune request to Discord and returns a error.
func (r *BeginGuildPrune) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "BeginGuildPrune", err)
	}

	routeid, resourceid := RateLimitHashFuncs[107]("107", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointBeginGuildPrune(r.GuildID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "BeginGuildPrune", err)
	}

	return nil
}

// Send sends a GetGuildVoiceRegions request to Discord and returns a VoiceRegion.
func (r *GetGuildVoiceRegions) Send(bot *Client) (*VoiceRegion, error) {
	result := new(VoiceRegion)
	routeid, resourceid := RateLimitHashFuncs[108]("108", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildVoiceRegions(r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildVoiceRegions", err)
	}

	return result, nil
}

// Send sends a GetGuildInvites request to Discord and returns a []*Invite.
func (r *GetGuildInvites) Send(bot *Client) ([]*Invite, error) {
	result := make([]*Invite, 0)
	routeid, resourceid := RateLimitHashFuncs[109]("109", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildInvites(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildInvites", err)
	}

	return result, nil
}

// Send sends a GetGuildIntegrations request to Discord and returns a []*Integration.
func (r *GetGuildIntegrations) Send(bot *Client) ([]*Integration, error) {
	result := make([]*Integration, 0)
	routeid, resourceid := RateLimitHashFuncs[110]("110", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildIntegrations(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildIntegrations", err)
	}

	return result, nil
}

// Send sends a DeleteGuildIntegration request to Discord and returns a error.
func (r *DeleteGuildIntegration) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[111]("111", "45892a5d"+r.GuildID, "cb4479f8"+r.IntegrationID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuildIntegration(r.GuildID, r.IntegrationID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildIntegration", err)
	}

	return nil
}

// Send sends a GetGuildWidgetSettings request to Discord and returns a GuildWidget.
func (r *GetGuildWidgetSettings) Send(bot *Client) (*GuildWidget, error) {
	result := new(GuildWidget)
	routeid, resourceid := RateLimitHashFuncs[112]("112", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildWidgetSettings(r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWidgetSettings", err)
	}

	return result, nil
}

// Send sends a ModifyGuildWidget request to Discord and returns a GuildWidget.
func (r *ModifyGuildWidget) Send(bot *Client) (*GuildWidget, error) {
	result := new(GuildWidget)
	routeid, resourceid := RateLimitHashFuncs[113]("113", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildWidget(r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildWidget", err)
	}

	return result, nil
}

// Send sends a GetGuildWidget request to Discord and returns a GuildWidget.
func (r *GetGuildWidget) Send(bot *Client) (*GuildWidget, error) {
	result := new(GuildWidget)
	routeid, resourceid := RateLimitHashFuncs[114]("114", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildWidget(r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWidget", err)
	}

	return result, nil
}

// Send sends a GetGuildVanityURL request to Discord and returns a Invite.
func (r *GetGuildVanityURL) Send(bot *Client) (*Invite, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildVanityURL", err)
	}

	result := new(Invite)
	routeid, resourceid := RateLimitHashFuncs[115]("115", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildVanityURL(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildVanityURL", err)
	}

	return result, nil
}

// Send sends a GetGuildWidgetImage request to Discord and returns a EmbedImage.
func (r *GetGuildWidgetImage) Send(bot *Client) (*EmbedImage, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGuildWidgetImage", err)
	}

	result := new(EmbedImage)
	routeid, resourceid := RateLimitHashFuncs[116]("116", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildWidgetImage(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWidgetImage", err)
	}

	return result, nil
}

// Send sends a GetGuildWelcomeScreen request to Discord and returns a WelcomeScreen.
func (r *GetGuildWelcomeScreen) Send(bot *Client) (*WelcomeScreen, error) {
	result := new(WelcomeScreen)
	routeid, resourceid := RateLimitHashFuncs[117]("117", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildWelcomeScreen(r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWelcomeScreen", err)
	}

	return result, nil
}

// Send sends a ModifyGuildWelcomeScreen request to Discord and returns a WelcomeScreen.
func (r *ModifyGuildWelcomeScreen) Send(bot *Client) (*WelcomeScreen, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildWelcomeScreen", err)
	}

	result := new(WelcomeScreen)
	routeid, resourceid := RateLimitHashFuncs[118]("118", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildWelcomeScreen(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildWelcomeScreen", err)
	}

	return result, nil
}

// Send sends a ModifyCurrentUserVoiceState request to Discord and returns a error.
func (r *ModifyCurrentUserVoiceState) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ModifyCurrentUserVoiceState", err)
	}

	routeid, resourceid := RateLimitHashFuncs[119]("119", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyCurrentUserVoiceState(r.GuildID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ModifyCurrentUserVoiceState", err)
	}

	return nil
}

// Send sends a ModifyUserVoiceState request to Discord and returns a error.
func (r *ModifyUserVoiceState) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ModifyUserVoiceState", err)
	}

	routeid, resourceid := RateLimitHashFuncs[120]("120", "45892a5d"+r.GuildID, "209c92df"+r.UserID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyUserVoiceState(r.GuildID, r.UserID), ContentTypeJSON, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ModifyUserVoiceState", err)
	}

	return nil
}

// Send sends a ListScheduledEventsforGuild request to Discord and returns a []*GuildScheduledEvent.
func (r *ListScheduledEventsforGuild) Send(bot *Client) ([]*GuildScheduledEvent, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "ListScheduledEventsforGuild", err)
	}

	result := make([]*GuildScheduledEvent, 0)
	routeid, resourceid := RateLimitHashFuncs[121]("121", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListScheduledEventsforGuild(r.GuildID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListScheduledEventsforGuild", err)
	}

	return result, nil
}

// Send sends a CreateGuildScheduledEvent request to Discord and returns a GuildScheduledEvent.
func (r *CreateGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildScheduledEvent", err)
	}

	result := new(GuildScheduledEvent)
	routeid, resourceid := RateLimitHashFuncs[122]("122", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildScheduledEvent(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildScheduledEvent", err)
	}

	return result, nil
}

// Send sends a GetGuildScheduledEvent request to Discord and returns a GuildScheduledEvent.
func (r *GetGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGuildScheduledEvent", err)
	}

	result := new(GuildScheduledEvent)
	routeid, resourceid := RateLimitHashFuncs[123]("123", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildScheduledEvent", err)
	}

	return result, nil
}

// Send sends a ModifyGuildScheduledEvent request to Discord and returns a GuildScheduledEvent.
func (r *ModifyGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildScheduledEvent", err)
	}

	result := new(GuildScheduledEvent)
	routeid, resourceid := RateLimitHashFuncs[124]("124", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildScheduledEvent", err)
	}

	return result, nil
}

// Send sends a DeleteGuildScheduledEvent request to Discord and returns a error.
func (r *DeleteGuildScheduledEvent) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[125]("125", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildScheduledEvent", err)
	}

	return nil
}

// Send sends a GetGuildScheduledEventUsers request to Discord and returns a []*GuildScheduledEventUser.
func (r *GetGuildScheduledEventUsers) Send(bot *Client) ([]*GuildScheduledEventUser, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetGuildScheduledEventUsers", err)
	}

	result := make([]*GuildScheduledEventUser, 0)
	routeid, resourceid := RateLimitHashFuncs[126]("126", "45892a5d"+r.GuildID, "522412fc"+r.GuildScheduledEventID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildScheduledEventUsers(r.GuildID, r.GuildScheduledEventID)+"?"+query, ContentTypeURLQueryString, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildScheduledEventUsers", err)
	}

	return result, nil
}

// Send sends a GetGuildTemplate request to Discord and returns a GuildTemplate.
func (r *GetGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	result := new(GuildTemplate)
	routeid, resourceid := RateLimitHashFuncs[127]("127", "61437152"+r.TemplateCode)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildTemplate(r.TemplateCode), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildTemplate", err)
	}

	return result, nil
}

// Send sends a CreateGuildfromGuildTemplate request to Discord and returns a []*GuildTemplate.
func (r *CreateGuildfromGuildTemplate) Send(bot *Client) ([]*GuildTemplate, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildfromGuildTemplate", err)
	}

	result := make([]*GuildTemplate, 0)
	routeid, resourceid := RateLimitHashFuncs[128]("128", "61437152"+r.TemplateCode)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildfromGuildTemplate(r.TemplateCode), ContentTypeJSON, body, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildfromGuildTemplate", err)
	}

	return result, nil
}

// Send sends a GetGuildTemplates request to Discord and returns a []*GuildTemplate.
func (r *GetGuildTemplates) Send(bot *Client) ([]*GuildTemplate, error) {
	result := make([]*GuildTemplate, 0)
	routeid, resourceid := RateLimitHashFuncs[129]("129", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildTemplates(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildTemplates", err)
	}

	return result, nil
}

// Send sends a CreateGuildTemplate request to Discord and returns a GuildTemplate.
func (r *CreateGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildTemplate", err)
	}

	result := new(GuildTemplate)
	routeid, resourceid := RateLimitHashFuncs[130]("130", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildTemplate(r.GuildID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildTemplate", err)
	}

	return result, nil
}

// Send sends a SyncGuildTemplate request to Discord and returns a GuildTemplate.
func (r *SyncGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	result := new(GuildTemplate)
	routeid, resourceid := RateLimitHashFuncs[131]("131", "45892a5d"+r.GuildID, "61437152"+r.TemplateCode)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPut, EndpointSyncGuildTemplate(r.GuildID, r.TemplateCode), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "SyncGuildTemplate", err)
	}

	return result, nil
}

// Send sends a ModifyGuildTemplate request to Discord and returns a GuildTemplate.
func (r *ModifyGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildTemplate", err)
	}

	result := new(GuildTemplate)
	routeid, resourceid := RateLimitHashFuncs[132]("132", "45892a5d"+r.GuildID, "61437152"+r.TemplateCode)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildTemplate(r.GuildID, r.TemplateCode), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildTemplate", err)
	}

	return result, nil
}

// Send sends a DeleteGuildTemplate request to Discord and returns a GuildTemplate.
func (r *DeleteGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	result := new(GuildTemplate)
	routeid, resourceid := RateLimitHashFuncs[133]("133", "45892a5d"+r.GuildID, "61437152"+r.TemplateCode)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuildTemplate(r.GuildID, r.TemplateCode), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "DeleteGuildTemplate", err)
	}

	return result, nil
}

// Send sends a GetInvite request to Discord and returns a Invite.
func (r *GetInvite) Send(bot *Client) (*Invite, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetInvite", err)
	}

	result := new(Invite)
	routeid, resourceid := RateLimitHashFuncs[134]("134", "781d4865"+r.InviteCode)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetInvite(r.InviteCode)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetInvite", err)
	}

	return result, nil
}

// Send sends a DeleteInvite request to Discord and returns a Invite.
func (r *DeleteInvite) Send(bot *Client) (*Invite, error) {
	result := new(Invite)
	routeid, resourceid := RateLimitHashFuncs[135]("135", "781d4865"+r.InviteCode)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteInvite(r.InviteCode), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "DeleteInvite", err)
	}

	return result, nil
}

// Send sends a CreateStageInstance request to Discord and returns a StageInstance.
func (r *CreateStageInstance) Send(bot *Client) (*StageInstance, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateStageInstance", err)
	}

	result := new(StageInstance)
	routeid, resourceid := RateLimitHashFuncs[136]("136")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateStageInstance(), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateStageInstance", err)
	}

	return result, nil
}

// Send sends a GetStageInstance request to Discord and returns a error.
func (r *GetStageInstance) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[137]("137", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetStageInstance(r.ChannelID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GetStageInstance", err)
	}

	return nil
}

// Send sends a ModifyStageInstance request to Discord and returns a StageInstance.
func (r *ModifyStageInstance) Send(bot *Client) (*StageInstance, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyStageInstance", err)
	}

	result := new(StageInstance)
	routeid, resourceid := RateLimitHashFuncs[138]("138", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyStageInstance(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyStageInstance", err)
	}

	return result, nil
}

// Send sends a DeleteStageInstance request to Discord and returns a error.
func (r *DeleteStageInstance) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[139]("139", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteStageInstance(r.ChannelID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteStageInstance", err)
	}

	return nil
}

// Send sends a GetSticker request to Discord and returns a Sticker.
func (r *GetSticker) Send(bot *Client) (*Sticker, error) {
	result := new(Sticker)
	routeid, resourceid := RateLimitHashFuncs[140]("140", "6eeeabf1"+r.StickerID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetSticker(r.StickerID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetSticker", err)
	}

	return result, nil
}

// Send sends a ListNitroStickerPacks request to Discord and returns a []*StickerPack.
func (r *ListNitroStickerPacks) Send(bot *Client) ([]*StickerPack, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListNitroStickerPacks", err)
	}

	result := make([]*StickerPack, 0)
	routeid, resourceid := RateLimitHashFuncs[141]("141")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListNitroStickerPacks(), ContentTypeJSON, body, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListNitroStickerPacks", err)
	}

	return result, nil
}

// Send sends a ListGuildStickers request to Discord and returns a []*Sticker.
func (r *ListGuildStickers) Send(bot *Client) ([]*Sticker, error) {
	result := make([]*Sticker, 0)
	routeid, resourceid := RateLimitHashFuncs[142]("142", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListGuildStickers(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListGuildStickers", err)
	}

	return result, nil
}

// Send sends a GetGuildSticker request to Discord and returns a Sticker.
func (r *GetGuildSticker) Send(bot *Client) (*Sticker, error) {
	result := new(Sticker)
	routeid, resourceid := RateLimitHashFuncs[143]("143", "45892a5d"+r.GuildID, "6eeeabf1"+r.StickerID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildSticker(r.GuildID, r.StickerID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildSticker", err)
	}

	return result, nil
}

// Send sends a CreateGuildSticker request to Discord and returns a Sticker.
func (r *CreateGuildSticker) Send(bot *Client) (*Sticker, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildSticker", err)
	}

	result := new(Sticker)
	routeid, resourceid := RateLimitHashFuncs[144]("144", "45892a5d"+r.GuildID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGuildSticker(r.GuildID), ContentTypeMultipartForm, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildSticker", err)
	}

	return result, nil
}

// Send sends a ModifyGuildSticker request to Discord and returns a Sticker.
func (r *ModifyGuildSticker) Send(bot *Client) (*Sticker, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildSticker", err)
	}

	result := new(Sticker)
	routeid, resourceid := RateLimitHashFuncs[145]("145", "45892a5d"+r.GuildID, "6eeeabf1"+r.StickerID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyGuildSticker(r.GuildID, r.StickerID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildSticker", err)
	}

	return result, nil
}

// Send sends a DeleteGuildSticker request to Discord and returns a error.
func (r *DeleteGuildSticker) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[146]("146", "45892a5d"+r.GuildID, "6eeeabf1"+r.StickerID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteGuildSticker(r.GuildID, r.StickerID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildSticker", err)
	}

	return nil
}

// Send sends a GetCurrentUser request to Discord and returns a User.
func (r *GetCurrentUser) Send(bot *Client) (*User, error) {
	result := new(User)
	routeid, resourceid := RateLimitHashFuncs[147]("147")
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetCurrentUser(), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentUser", err)
	}

	return result, nil
}

// Send sends a GetUser request to Discord and returns a User.
func (r *GetUser) Send(bot *Client) (*User, error) {
	result := new(User)
	routeid, resourceid := RateLimitHashFuncs[148]("148", "209c92df"+r.UserID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetUser(r.UserID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetUser", err)
	}

	return result, nil
}

// Send sends a ModifyCurrentUser request to Discord and returns a User.
func (r *ModifyCurrentUser) Send(bot *Client) (*User, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyCurrentUser", err)
	}

	result := new(User)
	routeid, resourceid := RateLimitHashFuncs[149]("149")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyCurrentUser(), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyCurrentUser", err)
	}

	return result, nil
}

// Send sends a GetCurrentUserGuilds request to Discord and returns a []*Guild.
func (r *GetCurrentUserGuilds) Send(bot *Client) ([]*Guild, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetCurrentUserGuilds", err)
	}

	result := make([]*Guild, 0)
	routeid, resourceid := RateLimitHashFuncs[150]("150")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetCurrentUserGuilds(), ContentTypeJSON, body, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentUserGuilds", err)
	}

	return result, nil
}

// Send sends a GetCurrentUserGuildMember request to Discord and returns a GuildMember.
func (r *GetCurrentUserGuildMember) Send(bot *Client) (*GuildMember, error) {
	result := new(GuildMember)
	routeid, resourceid := RateLimitHashFuncs[151]("151", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetCurrentUserGuildMember(r.GuildID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentUserGuildMember", err)
	}

	return result, nil
}

// Send sends a LeaveGuild request to Discord and returns a error.
func (r *LeaveGuild) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[152]("152", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointLeaveGuild(r.GuildID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "LeaveGuild", err)
	}

	return nil
}

// Send sends a CreateGroupDM request to Discord and returns a Channel.
func (r *CreateGroupDM) Send(bot *Client) (*Channel, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGroupDM", err)
	}

	result := new(Channel)
	routeid, resourceid := RateLimitHashFuncs[153]("153")
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateGroupDM(), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGroupDM", err)
	}

	return result, nil
}

// Send sends a GetUserConnections request to Discord and returns a []*Connection.
func (r *GetUserConnections) Send(bot *Client) ([]*Connection, error) {
	result := make([]*Connection, 0)
	routeid, resourceid := RateLimitHashFuncs[154]("154")
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetUserConnections(), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetUserConnections", err)
	}

	return result, nil
}

// Send sends a ListVoiceRegions request to Discord and returns a []*VoiceRegion.
func (r *ListVoiceRegions) Send(bot *Client) ([]*VoiceRegion, error) {
	result := make([]*VoiceRegion, 0)
	routeid, resourceid := RateLimitHashFuncs[155]("155")
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointListVoiceRegions(), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListVoiceRegions", err)
	}

	return result, nil
}

// Send sends a CreateWebhook request to Discord and returns a Webhook.
func (r *CreateWebhook) Send(bot *Client) (*Webhook, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateWebhook", err)
	}

	result := new(Webhook)
	routeid, resourceid := RateLimitHashFuncs[156]("156", "e5416649"+r.ChannelID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointCreateWebhook(r.ChannelID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateWebhook", err)
	}

	return result, nil
}

// Send sends a GetChannelWebhooks request to Discord and returns a []*Webhook.
func (r *GetChannelWebhooks) Send(bot *Client) ([]*Webhook, error) {
	result := make([]*Webhook, 0)
	routeid, resourceid := RateLimitHashFuncs[157]("157", "e5416649"+r.ChannelID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetChannelWebhooks(r.ChannelID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelWebhooks", err)
	}

	return result, nil
}

// Send sends a GetGuildWebhooks request to Discord and returns a []*Webhook.
func (r *GetGuildWebhooks) Send(bot *Client) ([]*Webhook, error) {
	result := make([]*Webhook, 0)
	routeid, resourceid := RateLimitHashFuncs[158]("158", "45892a5d"+r.GuildID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGuildWebhooks(r.GuildID), nil, nil, &result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWebhooks", err)
	}

	return result, nil
}

// Send sends a GetWebhook request to Discord and returns a Webhook.
func (r *GetWebhook) Send(bot *Client) (*Webhook, error) {
	result := new(Webhook)
	routeid, resourceid := RateLimitHashFuncs[159]("159", "6d62b21b"+r.WebhookID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetWebhook(r.WebhookID), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetWebhook", err)
	}

	return result, nil
}

// Send sends a GetWebhookwithToken request to Discord and returns a Webhook.
func (r *GetWebhookwithToken) Send(bot *Client) (*Webhook, error) {
	result := new(Webhook)
	routeid, resourceid := RateLimitHashFuncs[160]("160", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetWebhookwithToken(r.WebhookID, r.WebhookToken), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetWebhookwithToken", err)
	}

	return result, nil
}

// Send sends a ModifyWebhook request to Discord and returns a Webhook.
func (r *ModifyWebhook) Send(bot *Client) (*Webhook, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyWebhook", err)
	}

	result := new(Webhook)
	routeid, resourceid := RateLimitHashFuncs[161]("161", "6d62b21b"+r.WebhookID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyWebhook(r.WebhookID), ContentTypeJSON, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyWebhook", err)
	}

	return result, nil
}

// Send sends a ModifyWebhookwithToken request to Discord and returns a Webhook.
func (r *ModifyWebhookwithToken) Send(bot *Client) (*Webhook, error) {
	result := new(Webhook)
	routeid, resourceid := RateLimitHashFuncs[162]("162", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointModifyWebhookwithToken(r.WebhookID, r.WebhookToken), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyWebhookwithToken", err)
	}

	return result, nil
}

// Send sends a DeleteWebhook request to Discord and returns a error.
func (r *DeleteWebhook) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[163]("163", "6d62b21b"+r.WebhookID)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteWebhook(r.WebhookID), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteWebhook", err)
	}

	return nil
}

// Send sends a DeleteWebhookwithToken request to Discord and returns a error.
func (r *DeleteWebhookwithToken) Send(bot *Client) error {
	routeid, resourceid := RateLimitHashFuncs[164]("164", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteWebhookwithToken(r.WebhookID, r.WebhookToken), nil, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteWebhookwithToken", err)
	}

	return nil
}

// Send sends a ExecuteWebhook request to Discord and returns a error.
func (r *ExecuteWebhook) Send(bot *Client) error {
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ExecuteWebhook", err)
	}

	query, err := EndpointQueryString(r)
	if err != nil {
		return fmt.Errorf(ErrQueryString, "ExecuteWebhook", err)
	}

	routeid, resourceid := RateLimitHashFuncs[165]("165", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointExecuteWebhook(r.WebhookID, r.WebhookToken)+"?"+query, ContentTypeMultipartForm, body, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ExecuteWebhook", err)
	}

	return nil
}

// Send sends a ExecuteSlackCompatibleWebhook request to Discord and returns a error.
func (r *ExecuteSlackCompatibleWebhook) Send(bot *Client) error {
	query, err := EndpointQueryString(r)
	if err != nil {
		return fmt.Errorf(ErrQueryString, "ExecuteSlackCompatibleWebhook", err)
	}

	routeid, resourceid := RateLimitHashFuncs[166]("166", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointExecuteSlackCompatibleWebhook(r.WebhookID, r.WebhookToken)+"?"+query, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ExecuteSlackCompatibleWebhook", err)
	}

	return nil
}

// Send sends a ExecuteGitHubCompatibleWebhook request to Discord and returns a error.
func (r *ExecuteGitHubCompatibleWebhook) Send(bot *Client) error {
	query, err := EndpointQueryString(r)
	if err != nil {
		return fmt.Errorf(ErrQueryString, "ExecuteGitHubCompatibleWebhook", err)
	}

	routeid, resourceid := RateLimitHashFuncs[167]("167", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPost, EndpointExecuteGitHubCompatibleWebhook(r.WebhookID, r.WebhookToken)+"?"+query, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ExecuteGitHubCompatibleWebhook", err)
	}

	return nil
}

// Send sends a GetWebhookMessage request to Discord and returns a Message.
func (r *GetWebhookMessage) Send(bot *Client) (*Message, error) {
	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "GetWebhookMessage", err)
	}

	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[168]("168", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken, "d57d6589"+r.MessageID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID)+"?"+query, ContentTypeURLQueryString, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetWebhookMessage", err)
	}

	return result, nil
}

// Send sends a EditWebhookMessage request to Discord and returns a Message.
func (r *EditWebhookMessage) Send(bot *Client) (*Message, error) {
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditWebhookMessage", err)
	}

	query, err := EndpointQueryString(r)
	if err != nil {
		return nil, fmt.Errorf(ErrQueryString, "EditWebhookMessage", err)
	}

	result := new(Message)
	routeid, resourceid := RateLimitHashFuncs[169]("169", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken, "d57d6589"+r.MessageID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodPatch, EndpointEditWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID)+"?"+query, ContentTypeMultipartForm, body, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditWebhookMessage", err)
	}

	return result, nil
}

// Send sends a DeleteWebhookMessage request to Discord and returns a error.
func (r *DeleteWebhookMessage) Send(bot *Client) error {
	query, err := EndpointQueryString(r)
	if err != nil {
		return fmt.Errorf(ErrQueryString, "DeleteWebhookMessage", err)
	}

	routeid, resourceid := RateLimitHashFuncs[170]("170", "6d62b21b"+r.WebhookID, "8954ac33"+r.WebhookToken, "d57d6589"+r.MessageID)
	err = SendRequest(bot, routeid, resourceid, fasthttp.MethodDelete, EndpointDeleteWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID)+"?"+query, ContentTypeURLQueryString, nil, nil)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteWebhookMessage", err)
	}

	return nil
}

// Send sends a GetGateway request to Discord and returns a GetGatewayBotResponse.
func (r *GetGateway) Send(bot *Client) (*GetGatewayBotResponse, error) {
	result := new(GetGatewayBotResponse)
	routeid, resourceid := RateLimitHashFuncs[171]("171")
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGateway(), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGateway", err)
	}

	return result, nil
}

// Send sends a GetGatewayBot request to Discord and returns a GetGatewayBotResponse.
func (r *GetGatewayBot) Send(bot *Client) (*GetGatewayBotResponse, error) {
	result := new(GetGatewayBotResponse)
	routeid, resourceid := RateLimitHashFuncs[172]("172")
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetGatewayBot(), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGatewayBot", err)
	}

	return result, nil
}

// Send sends a GetCurrentBotApplicationInformation request to Discord and returns a Application.
func (r *GetCurrentBotApplicationInformation) Send(bot *Client) (*Application, error) {
	result := new(Application)
	routeid, resourceid := RateLimitHashFuncs[173]("173")
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetCurrentBotApplicationInformation(), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentBotApplicationInformation", err)
	}

	return result, nil
}

// Send sends a GetCurrentAuthorizationInformation request to Discord and returns a CurrentAuthorizationInformationResponse.
func (r *GetCurrentAuthorizationInformation) Send(bot *Client) (*CurrentAuthorizationInformationResponse, error) {
	result := new(CurrentAuthorizationInformationResponse)
	routeid, resourceid := RateLimitHashFuncs[174]("174")
	err := SendRequest(bot, routeid, resourceid, fasthttp.MethodGet, EndpointGetCurrentAuthorizationInformation(), nil, nil, result)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentAuthorizationInformation", err)
	}

	return result, nil
}
