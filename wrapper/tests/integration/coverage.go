// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package integration_test

import (
	"context"
	"os"
	"testing"
	"golang.org/x/sync/errgroup"

	. "github.com/switchupcb/disgo/wrapper"
)

// TestCoverage performs a test that covers nearly 100% of the Discord API.
func TestCoverage(t *testing.T) {
	bot := &Client{
		Authentication: BotToken(os.Getenv("TOKEN")),
		Config:         DefaultConfig(),
	}
	eg, ctx := errgroup.WithContext(context.Background())


	// CreateGuild sends a  CreateGuild  reqeust to the Discord Gateway.
	request := CreateGuild{}
	if _, err := request.Send(bot); err != nil {
		return
	}

	eg.Go(func() error {
		// CreateMessage sends a  CreateMessage  reqeust to the Discord Gateway.
		request := CreateMessage{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannelMessages sends a  GetChannelMessages  reqeust to the Discord Gateway.
		request := GetChannelMessages{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetPinnedMessages sends a  GetPinnedMessages  reqeust to the Discord Gateway.
		request := GetPinnedMessages{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildEmoji sends a  GetGuildEmoji  reqeust to the Discord Gateway.
		request := GetGuildEmoji{GuildID: os.Getenv("GUILDID"), EmojiID: os.Getenv("EMOJIID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannelWebhooks sends a  GetChannelWebhooks  reqeust to the Discord Gateway.
		request := GetChannelWebhooks{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentAuthorizationInformation sends a  GetCurrentAuthorizationInformation  reqeust to the Discord Gateway.
		request := GetCurrentAuthorizationInformation{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildTemplate sends a  CreateGuildTemplate  reqeust to the Discord Gateway.
		request := CreateGuildTemplate{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyUserVoiceState sends a  ModifyUserVoiceState  reqeust to the Discord Gateway.
		request := ModifyUserVoiceState{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// StartThreadwithoutMessage sends a  StartThreadwithoutMessage  reqeust to the Discord Gateway.
		request := StartThreadwithoutMessage{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateInteractionResponse sends a  CreateInteractionResponse  reqeust to the Discord Gateway.
		request := CreateInteractionResponse{InteractionID: os.Getenv("INTERACTIONID"), InteractionToken: os.Getenv("INTERACTIONTOKEN")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildEmoji sends a  DeleteGuildEmoji  reqeust to the Discord Gateway.
		request := DeleteGuildEmoji{GuildID: os.Getenv("GUILDID"), EmojiID: os.Getenv("EMOJIID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentBotApplicationInformation sends a  GetCurrentBotApplicationInformation  reqeust to the Discord Gateway.
		request := GetCurrentBotApplicationInformation{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentUserGuilds sends a  GetCurrentUserGuilds  reqeust to the Discord Gateway.
		request := GetCurrentUserGuilds{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateChannelInvite sends a  CreateChannelInvite  reqeust to the Discord Gateway.
		request := CreateChannelInvite{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateWebhook sends a  CreateWebhook  reqeust to the Discord Gateway.
		request := CreateWebhook{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CrosspostMessage sends a  CrosspostMessage  reqeust to the Discord Gateway.
		request := CrosspostMessage{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// FollowNewsChannel sends a  FollowNewsChannel  reqeust to the Discord Gateway.
		request := FollowNewsChannel{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyCurrentUser sends a  ModifyCurrentUser  reqeust to the Discord Gateway.
		request := ModifyCurrentUser{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyChannelThread sends a  ModifyChannelThread  reqeust to the Discord Gateway.
		request := ModifyChannelThread{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetUser sends a  GetUser  reqeust to the Discord Gateway.
		request := GetUser{UserID: os.Getenv("USERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGatewayBot sends a  GetGatewayBot  reqeust to the Discord Gateway.
		request := GetGatewayBot{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteChannelPermission sends a  DeleteChannelPermission  reqeust to the Discord Gateway.
		request := DeleteChannelPermission{ChannelID: os.Getenv("CHANNELID"), OverwriteID: os.Getenv("OVERWRITEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildSticker sends a  CreateGuildSticker  reqeust to the Discord Gateway.
		request := CreateGuildSticker{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildChannelPositions sends a  ModifyGuildChannelPositions  reqeust to the Discord Gateway.
		request := ModifyGuildChannelPositions{GuildID: os.Getenv("GUILDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildTemplates sends a  GetGuildTemplates  reqeust to the Discord Gateway.
		request := GetGuildTemplates{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListGuildStickers sends a  ListGuildStickers  reqeust to the Discord Gateway.
		request := ListGuildStickers{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateStageInstance sends a  CreateStageInstance  reqeust to the Discord Gateway.
		request := CreateStageInstance{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteCloseChannel sends a  DeleteCloseChannel  reqeust to the Discord Gateway.
		request := DeleteCloseChannel{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGlobalApplicationCommand sends a  CreateGlobalApplicationCommand  reqeust to the Discord Gateway.
		request := CreateGlobalApplicationCommand{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteAllReactionsforEmoji sends a  DeleteAllReactionsforEmoji  reqeust to the Discord Gateway.
		request := DeleteAllReactionsforEmoji{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID"), Emoji: os.Getenv("EMOJI")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildApplicationCommand sends a  CreateGuildApplicationCommand  reqeust to the Discord Gateway.
		request := CreateGuildApplicationCommand{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannelMessage sends a  GetChannelMessage  reqeust to the Discord Gateway.
		request := GetChannelMessage{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildEmoji sends a  CreateGuildEmoji  reqeust to the Discord Gateway.
		request := CreateGuildEmoji{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildEmoji sends a  ModifyGuildEmoji  reqeust to the Discord Gateway.
		request := ModifyGuildEmoji{GuildID: os.Getenv("GUILDID"), EmojiID: os.Getenv("EMOJIID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGateway sends a  GetGateway  reqeust to the Discord Gateway.
		request := GetGateway{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListVoiceRegions sends a  ListVoiceRegions  reqeust to the Discord Gateway.
		request := ListVoiceRegions{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyCurrentUserVoiceState sends a  ModifyCurrentUserVoiceState  reqeust to the Discord Gateway.
		request := ModifyCurrentUserVoiceState{GuildID: os.Getenv("GUILDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildfromGuildTemplate sends a  CreateGuildfromGuildTemplate  reqeust to the Discord Gateway.
		request := CreateGuildfromGuildTemplate{TemplateCode: os.Getenv("TEMPLATECODE")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListNitroStickerPacks sends a  ListNitroStickerPacks  reqeust to the Discord Gateway.
		request := ListNitroStickerPacks{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// TriggerTypingIndicator sends a  TriggerTypingIndicator  reqeust to the Discord Gateway.
		request := TriggerTypingIndicator{ChannelID: os.Getenv("CHANNELID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteInvite sends a  DeleteInvite  reqeust to the Discord Gateway.
		request := DeleteInvite{InviteCode: os.Getenv("INVITECODE")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateFollowupMessage sends a  CreateFollowupMessage  reqeust to the Discord Gateway.
		request := CreateFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentUserGuildMember sends a  GetCurrentUserGuildMember  reqeust to the Discord Gateway.
		request := GetCurrentUserGuildMember{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetSticker sends a  GetSticker  reqeust to the Discord Gateway.
		request := GetSticker{StickerID: os.Getenv("STICKERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannelInvites sends a  GetChannelInvites  reqeust to the Discord Gateway.
		request := GetChannelInvites{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BatchEditApplicationCommandPermissions sends a  BatchEditApplicationCommandPermissions  reqeust to the Discord Gateway.
		request := BatchEditApplicationCommandPermissions{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// StartThreadinForumChannel sends a  StartThreadinForumChannel  reqeust to the Discord Gateway.
		request := StartThreadinForumChannel{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListGuildEmojis sends a  ListGuildEmojis  reqeust to the Discord Gateway.
		request := ListGuildEmojis{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetInvite sends a  GetInvite  reqeust to the Discord Gateway.
		request := GetInvite{InviteCode: os.Getenv("INVITECODE")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentUser sends a  GetCurrentUser  reqeust to the Discord Gateway.
		request := GetCurrentUser{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditApplicationCommandPermissions sends a  EditApplicationCommandPermissions  reqeust to the Discord Gateway.
		request := EditApplicationCommandPermissions{GuildID: os.Getenv("GUILDID"), CommandID: os.Getenv("COMMANDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateReaction sends a  CreateReaction  reqeust to the Discord Gateway.
		request := CreateReaction{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID"), Emoji: os.Getenv("EMOJI")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditChannelPermissions sends a  EditChannelPermissions  reqeust to the Discord Gateway.
		request := EditChannelPermissions{ChannelID: os.Getenv("CHANNELID"), OverwriteID: os.Getenv("OVERWRITEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BulkDeleteMessages sends a  BulkDeleteMessages  reqeust to the Discord Gateway.
		request := BulkDeleteMessages{ChannelID: os.Getenv("CHANNELID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// StartThreadfromMessage sends a  StartThreadfromMessage  reqeust to the Discord Gateway.
		request := StartThreadfromMessage{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// PinMessage sends a  PinMessage  reqeust to the Discord Gateway.
		request := PinMessage{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditMessage sends a  EditMessage  reqeust to the Discord Gateway.
		request := EditMessage{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteMessage sends a  DeleteMessage  reqeust to the Discord Gateway.
		request := DeleteMessage{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// UnpinMessage sends a  UnpinMessage  reqeust to the Discord Gateway.
		request := UnpinMessage{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildTemplate sends a  ModifyGuildTemplate  reqeust to the Discord Gateway.
		request := ModifyGuildTemplate{GuildID: os.Getenv("GUILDID"), TemplateCode: os.Getenv("TEMPLATECODE")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildTemplate sends a  DeleteGuildTemplate  reqeust to the Discord Gateway.
		request := DeleteGuildTemplate{GuildID: os.Getenv("GUILDID"), TemplateCode: os.Getenv("TEMPLATECODE")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// SyncGuildTemplate sends a  SyncGuildTemplate  reqeust to the Discord Gateway.
		request := SyncGuildTemplate{GuildID: os.Getenv("GUILDID"), TemplateCode: os.Getenv("TEMPLATECODE")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildTemplate sends a  GetGuildTemplate  reqeust to the Discord Gateway.
		request := GetGuildTemplate{TemplateCode: os.Getenv("TEMPLATECODE")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteOriginalInteractionResponse sends a  DeleteOriginalInteractionResponse  reqeust to the Discord Gateway.
		request := DeleteOriginalInteractionResponse{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetOriginalInteractionResponse sends a  GetOriginalInteractionResponse  reqeust to the Discord Gateway.
		request := GetOriginalInteractionResponse{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditOriginalInteractionResponse sends a  EditOriginalInteractionResponse  reqeust to the Discord Gateway.
		request := EditOriginalInteractionResponse{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyWebhook sends a  ModifyWebhook  reqeust to the Discord Gateway.
		request := ModifyWebhook{WebhookID: os.Getenv("WEBHOOKID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetWebhookwithToken sends a  GetWebhookwithToken  reqeust to the Discord Gateway.
		request := GetWebhookwithToken{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyWebhookwithToken sends a  ModifyWebhookwithToken  reqeust to the Discord Gateway.
		request := ModifyWebhookwithToken{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetWebhook sends a  GetWebhook  reqeust to the Discord Gateway.
		request := GetWebhook{WebhookID: os.Getenv("WEBHOOKID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteWebhook sends a  DeleteWebhook  reqeust to the Discord Gateway.
		request := DeleteWebhook{WebhookID: os.Getenv("WEBHOOKID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ExecuteSlackCompatibleWebhook sends a  ExecuteSlackCompatibleWebhook  reqeust to the Discord Gateway.
		request := ExecuteSlackCompatibleWebhook{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetWebhookMessage sends a  GetWebhookMessage  reqeust to the Discord Gateway.
		request := GetWebhookMessage{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteWebhookMessage sends a  DeleteWebhookMessage  reqeust to the Discord Gateway.
		request := DeleteWebhookMessage{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN"), MessageID: os.Getenv("MESSAGEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ExecuteGitHubCompatibleWebhook sends a  ExecuteGitHubCompatibleWebhook  reqeust to the Discord Gateway.
		request := ExecuteGitHubCompatibleWebhook{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteWebhookwithToken sends a  DeleteWebhookwithToken  reqeust to the Discord Gateway.
		request := DeleteWebhookwithToken{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ExecuteWebhook sends a  ExecuteWebhook  reqeust to the Discord Gateway.
		request := ExecuteWebhook{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditWebhookMessage sends a  EditWebhookMessage  reqeust to the Discord Gateway.
		request := EditWebhookMessage{WebhookID: os.Getenv("WEBHOOKID"), WebhookToken: os.Getenv("WEBHOOKTOKEN"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetUserConnections sends a  GetUserConnections  reqeust to the Discord Gateway.
		request := GetUserConnections{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildSticker sends a  GetGuildSticker  reqeust to the Discord Gateway.
		request := GetGuildSticker{GuildID: os.Getenv("GUILDID"), StickerID: os.Getenv("STICKERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildSticker sends a  ModifyGuildSticker  reqeust to the Discord Gateway.
		request := ModifyGuildSticker{GuildID: os.Getenv("GUILDID"), StickerID: os.Getenv("STICKERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildSticker sends a  DeleteGuildSticker  reqeust to the Discord Gateway.
		request := DeleteGuildSticker{GuildID: os.Getenv("GUILDID"), StickerID: os.Getenv("STICKERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetStageInstance sends a  GetStageInstance  reqeust to the Discord Gateway.
		request := GetStageInstance{ChannelID: os.Getenv("CHANNELID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyStageInstance sends a  ModifyStageInstance  reqeust to the Discord Gateway.
		request := ModifyStageInstance{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteStageInstance sends a  DeleteStageInstance  reqeust to the Discord Gateway.
		request := DeleteStageInstance{ChannelID: os.Getenv("CHANNELID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BulkOverwriteGlobalApplicationCommands sends a  BulkOverwriteGlobalApplicationCommands  reqeust to the Discord Gateway.
		request := BulkOverwriteGlobalApplicationCommands{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGlobalApplicationCommand sends a  DeleteGlobalApplicationCommand  reqeust to the Discord Gateway.
		request := DeleteGlobalApplicationCommand{CommandID: os.Getenv("COMMANDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGlobalApplicationCommands sends a  GetGlobalApplicationCommands  reqeust to the Discord Gateway.
		request := GetGlobalApplicationCommands{}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGlobalApplicationCommand sends a  GetGlobalApplicationCommand  reqeust to the Discord Gateway.
		request := GetGlobalApplicationCommand{CommandID: os.Getenv("COMMANDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildApplicationCommands sends a  GetGuildApplicationCommands  reqeust to the Discord Gateway.
		request := GetGuildApplicationCommands{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditGlobalApplicationCommand sends a  EditGlobalApplicationCommand  reqeust to the Discord Gateway.
		request := EditGlobalApplicationCommand{CommandID: os.Getenv("COMMANDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildApplicationCommand sends a  DeleteGuildApplicationCommand  reqeust to the Discord Gateway.
		request := DeleteGuildApplicationCommand{GuildID: os.Getenv("GUILDID"), CommandID: os.Getenv("COMMANDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildApplicationCommandPermissions sends a  GetGuildApplicationCommandPermissions  reqeust to the Discord Gateway.
		request := GetGuildApplicationCommandPermissions{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditGuildApplicationCommand sends a  EditGuildApplicationCommand  reqeust to the Discord Gateway.
		request := EditGuildApplicationCommand{GuildID: os.Getenv("GUILDID"), CommandID: os.Getenv("COMMANDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetApplicationCommandPermissions sends a  GetApplicationCommandPermissions  reqeust to the Discord Gateway.
		request := GetApplicationCommandPermissions{GuildID: os.Getenv("GUILDID"), CommandID: os.Getenv("COMMANDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BulkOverwriteGuildApplicationCommands sends a  BulkOverwriteGuildApplicationCommands  reqeust to the Discord Gateway.
		request := BulkOverwriteGuildApplicationCommands{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildApplicationCommand sends a  GetGuildApplicationCommand  reqeust to the Discord Gateway.
		request := GetGuildApplicationCommand{GuildID: os.Getenv("GUILDID"), CommandID: os.Getenv("COMMANDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWidgetSettings sends a  GetGuildWidgetSettings  reqeust to the Discord Gateway.
		request := GetGuildWidgetSettings{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildVanityURL sends a  GetGuildVanityURL  reqeust to the Discord Gateway.
		request := GetGuildVanityURL{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWidgetImage sends a  GetGuildWidgetImage  reqeust to the Discord Gateway.
		request := GetGuildWidgetImage{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildAuditLog sends a  GetGuildAuditLog  reqeust to the Discord Gateway.
		request := GetGuildAuditLog{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BeginGuildPrune sends a  BeginGuildPrune  reqeust to the Discord Gateway.
		request := BeginGuildPrune{GuildID: os.Getenv("GUILDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuild sends a  ModifyGuild  reqeust to the Discord Gateway.
		request := ModifyGuild{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildMember sends a  ModifyGuildMember  reqeust to the Discord Gateway.
		request := ModifyGuildMember{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannel sends a  GetChannel  reqeust to the Discord Gateway.
		request := GetChannel{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildChannel sends a  CreateGuildChannel  reqeust to the Discord Gateway.
		request := CreateGuildChannel{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildRoles sends a  GetGuildRoles  reqeust to the Discord Gateway.
		request := GetGuildRoles{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildRolePositions sends a  ModifyGuildRolePositions  reqeust to the Discord Gateway.
		request := ModifyGuildRolePositions{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildPruneCount sends a  GetGuildPruneCount  reqeust to the Discord Gateway.
		request := GetGuildPruneCount{GuildID: os.Getenv("GUILDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildIntegrations sends a  GetGuildIntegrations  reqeust to the Discord Gateway.
		request := GetGuildIntegrations{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyChannel sends a  ModifyChannel  reqeust to the Discord Gateway.
		request := ModifyChannel{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListActiveGuildThreads sends a  ListActiveGuildThreads  reqeust to the Discord Gateway.
		request := ListActiveGuildThreads{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildMember sends a  GetGuildMember  reqeust to the Discord Gateway.
		request := GetGuildMember{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// AddGuildMember sends a  AddGuildMember  reqeust to the Discord Gateway.
		request := AddGuildMember{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildWelcomeScreen sends a  ModifyGuildWelcomeScreen  reqeust to the Discord Gateway.
		request := ModifyGuildWelcomeScreen{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListGuildMembers sends a  ListGuildMembers  reqeust to the Discord Gateway.
		request := ListGuildMembers{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildInvites sends a  GetGuildInvites  reqeust to the Discord Gateway.
		request := GetGuildInvites{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWelcomeScreen sends a  GetGuildWelcomeScreen  reqeust to the Discord Gateway.
		request := GetGuildWelcomeScreen{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// LeaveGuild sends a  LeaveGuild  reqeust to the Discord Gateway.
		request := LeaveGuild{GuildID: os.Getenv("GUILDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// SearchGuildMembers sends a  SearchGuildMembers  reqeust to the Discord Gateway.
		request := SearchGuildMembers{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildVoiceRegions sends a  GetGuildVoiceRegions  reqeust to the Discord Gateway.
		request := GetGuildVoiceRegions{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildIntegration sends a  DeleteGuildIntegration  reqeust to the Discord Gateway.
		request := DeleteGuildIntegration{GuildID: os.Getenv("GUILDID"), IntegrationID: os.Getenv("INTEGRATIONID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildScheduledEvent sends a  CreateGuildScheduledEvent  reqeust to the Discord Gateway.
		request := CreateGuildScheduledEvent{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWebhooks sends a  GetGuildWebhooks  reqeust to the Discord Gateway.
		request := GetGuildWebhooks{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyChannelGuild sends a  ModifyChannelGuild  reqeust to the Discord Gateway.
		request := ModifyChannelGuild{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateAutoModerationRule sends a  CreateAutoModerationRule  reqeust to the Discord Gateway.
		request := CreateAutoModerationRule{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildWidget sends a  ModifyGuildWidget  reqeust to the Discord Gateway.
		request := ModifyGuildWidget{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildBan sends a  CreateGuildBan  reqeust to the Discord Gateway.
		request := CreateGuildBan{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildChannels sends a  GetGuildChannels  reqeust to the Discord Gateway.
		request := GetGuildChannels{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CreateGuildRole sends a  CreateGuildRole  reqeust to the Discord Gateway.
		request := CreateGuildRole{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildPreview sends a  GetGuildPreview  reqeust to the Discord Gateway.
		request := GetGuildPreview{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuild sends a  DeleteGuild  reqeust to the Discord Gateway.
		request := DeleteGuild{GuildID: os.Getenv("GUILDID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWidget sends a  GetGuildWidget  reqeust to the Discord Gateway.
		request := GetGuildWidget{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuild sends a  GetGuild  reqeust to the Discord Gateway.
		request := GetGuild{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteFollowupMessage sends a  DeleteFollowupMessage  reqeust to the Discord Gateway.
		request := DeleteFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN"), MessageID: os.Getenv("MESSAGEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditFollowupMessage sends a  EditFollowupMessage  reqeust to the Discord Gateway.
		request := EditFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetFollowupMessage sends a  GetFollowupMessage  reqeust to the Discord Gateway.
		request := GetFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN"), MessageID: os.Getenv("MESSAGEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteAllReactions sends a  DeleteAllReactions  reqeust to the Discord Gateway.
		request := DeleteAllReactions{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteOwnReaction sends a  DeleteOwnReaction  reqeust to the Discord Gateway.
		request := DeleteOwnReaction{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID"), Emoji: os.Getenv("EMOJI")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteUserReaction sends a  DeleteUserReaction  reqeust to the Discord Gateway.
		request := DeleteUserReaction{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID"), Emoji: os.Getenv("EMOJI"), UserID: os.Getenv("USERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetReactions sends a  GetReactions  reqeust to the Discord Gateway.
		request := GetReactions{ChannelID: os.Getenv("CHANNELID"), MessageID: os.Getenv("MESSAGEID"), Emoji: os.Getenv("EMOJI")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListPublicArchivedThreads sends a  ListPublicArchivedThreads  reqeust to the Discord Gateway.
		request := ListPublicArchivedThreads{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveThreadMember sends a  RemoveThreadMember  reqeust to the Discord Gateway.
		request := RemoveThreadMember{ChannelID: os.Getenv("CHANNELID"), UserID: os.Getenv("USERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListThreadMembers sends a  ListThreadMembers  reqeust to the Discord Gateway.
		request := ListThreadMembers{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// AddThreadMember sends a  AddThreadMember  reqeust to the Discord Gateway.
		request := AddThreadMember{ChannelID: os.Getenv("CHANNELID"), UserID: os.Getenv("USERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// LeaveThread sends a  LeaveThread  reqeust to the Discord Gateway.
		request := LeaveThread{ChannelID: os.Getenv("CHANNELID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetThreadMember sends a  GetThreadMember  reqeust to the Discord Gateway.
		request := GetThreadMember{ChannelID: os.Getenv("CHANNELID"), UserID: os.Getenv("USERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListJoinedPrivateArchivedThreads sends a  ListJoinedPrivateArchivedThreads  reqeust to the Discord Gateway.
		request := ListJoinedPrivateArchivedThreads{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListPrivateArchivedThreads sends a  ListPrivateArchivedThreads  reqeust to the Discord Gateway.
		request := ListPrivateArchivedThreads{ChannelID: os.Getenv("CHANNELID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// JoinThread sends a  JoinThread  reqeust to the Discord Gateway.
		request := JoinThread{ChannelID: os.Getenv("CHANNELID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveGuildMember sends a  RemoveGuildMember  reqeust to the Discord Gateway.
		request := RemoveGuildMember{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// AddGuildMemberRole sends a  AddGuildMemberRole  reqeust to the Discord Gateway.
		request := AddGuildMemberRole{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID"), RoleID: os.Getenv("ROLEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveGuildMemberRole sends a  RemoveGuildMemberRole  reqeust to the Discord Gateway.
		request := RemoveGuildMemberRole{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID"), RoleID: os.Getenv("ROLEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyCurrentMember sends a  ModifyCurrentMember  reqeust to the Discord Gateway.
		request := ModifyCurrentMember{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildScheduledEvent sends a  DeleteGuildScheduledEvent  reqeust to the Discord Gateway.
		request := DeleteGuildScheduledEvent{GuildID: os.Getenv("GUILDID"), GuildScheduledEventID: os.Getenv("GUILDSCHEDULEDEVENTID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildScheduledEvent sends a  ModifyGuildScheduledEvent  reqeust to the Discord Gateway.
		request := ModifyGuildScheduledEvent{GuildID: os.Getenv("GUILDID"), GuildScheduledEventID: os.Getenv("GUILDSCHEDULEDEVENTID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildScheduledEvent sends a  GetGuildScheduledEvent  reqeust to the Discord Gateway.
		request := GetGuildScheduledEvent{GuildID: os.Getenv("GUILDID"), GuildScheduledEventID: os.Getenv("GUILDSCHEDULEDEVENTID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildScheduledEventUsers sends a  GetGuildScheduledEventUsers  reqeust to the Discord Gateway.
		request := GetGuildScheduledEventUsers{GuildID: os.Getenv("GUILDID"), GuildScheduledEventID: os.Getenv("GUILDSCHEDULEDEVENTID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListScheduledEventsforGuild sends a  ListScheduledEventsforGuild  reqeust to the Discord Gateway.
		request := ListScheduledEventsforGuild{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyAutoModerationRule sends a  ModifyAutoModerationRule  reqeust to the Discord Gateway.
		request := ModifyAutoModerationRule{GuildID: os.Getenv("GUILDID"), AutoModerationRuleID: os.Getenv("AUTOMODERATIONRULEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteAutoModerationRule sends a  DeleteAutoModerationRule  reqeust to the Discord Gateway.
		request := DeleteAutoModerationRule{GuildID: os.Getenv("GUILDID"), AutoModerationRuleID: os.Getenv("AUTOMODERATIONRULEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetAutoModerationRule sends a  GetAutoModerationRule  reqeust to the Discord Gateway.
		request := GetAutoModerationRule{GuildID: os.Getenv("GUILDID"), AutoModerationRuleID: os.Getenv("AUTOMODERATIONRULEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListAutoModerationRulesForGuild sends a  ListAutoModerationRulesForGuild  reqeust to the Discord Gateway.
		request := ListAutoModerationRulesForGuild{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildBan sends a  GetGuildBan  reqeust to the Discord Gateway.
		request := GetGuildBan{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildBans sends a  GetGuildBans  reqeust to the Discord Gateway.
		request := GetGuildBans{GuildID: os.Getenv("GUILDID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveGuildBan sends a  RemoveGuildBan  reqeust to the Discord Gateway.
		request := RemoveGuildBan{GuildID: os.Getenv("GUILDID"), UserID: os.Getenv("USERID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildRole sends a  DeleteGuildRole  reqeust to the Discord Gateway.
		request := DeleteGuildRole{GuildID: os.Getenv("GUILDID"), RoleID: os.Getenv("ROLEID")}
		if err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildRole sends a  ModifyGuildRole  reqeust to the Discord Gateway.
		request := ModifyGuildRole{GuildID: os.Getenv("GUILDID"), RoleID: os.Getenv("ROLEID")}
		if _, err := request.Send(bot); err != nil {
			return err
		}
		return nil

	})

	select {
	case <-ctx.Done():
		t.Fatalf("%v", eg.Wait())
	default:
	}

	if err := eg.Wait(); err != nil {
		t.Fatalf("%v", err)
	}

}

