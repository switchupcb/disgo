// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package integration_test

import (
	"context"
	"fmt"
	"log"
	"os"
	"testing"

	"golang.org/x/sync/errgroup"

	. "github.com/switchupcb/disgo/wrapper"
)

// TestCoverage tests 150+ endpoints (requests) and respective events from the Discord API.
func TestCoverage(t *testing.T) {
	bot := &Client{
		Authentication: BotToken(os.Getenv("TEST_TOKEN_ADMIN")),
		Config: DefaultConfig(),
		Handlers: new(Handlers),
		Sessions: []*Session{NewSession()},
	}

	user := &Client{
		Authentication: BotToken(os.Getenv("TEST_TOKEN_USER")),
		Config: DefaultConfig(),
		Handlers: new(Handlers),
		Sessions: []*Session{NewSession()},
	}

	var guild *Guild

	initializeEventHandlers(bot)

	// Connect the session to the Discord Gateway (WebSocket Connection).
	if err := bot.Sessions[0].Connect(bot); err != nil {
		log.Printf("can't open websocket session to Discord: %v", err)
	}

	eg, ctx := errgroup.WithContext(context.Background())

	// Call endpoints with no dependencies.
	//
	// set the Admin Bot's application ID.
	eg.Go(func() error {
		request := &GetCurrentBotApplicationInformation{}
		app, err := request.Send(bot)
		if app.ID == "" {
			return fmt.Errorf("GetCurrentBotApplicationInformation: expected non-null Application ID")
		}

		bot.ApplicationID = app.ID

		if err != nil {
			return fmt.Errorf("GetCurrentBotApplicationInformation: %w", err)
		}

		return nil
	})

	// set the User Bot's application ID.
	eg.Go(func() error {
		request := &GetCurrentUser{}
		app, err := request.Send(user)

		if app.ID == "" {
			return fmt.Errorf("GetCurrentUser: expected non-null Application ID")
		}

		user.ApplicationID = app.ID

		if err != nil {
			return fmt.Errorf("GetCurrentUser: %w", err)
		}

		return nil
	})

	// create a global application command.
	eg.Go(func() error {
		// Create a Create Global Application Command request.
		request := CreateGlobalApplicationCommand{
			Name: "main",
			Description: "A basic command",
		} 

		// Register the new command by sending the request to Discord using the bot.
		// returns a disgo.ApplicationCommand
		newCommand, err := request.Send(bot)
		if err != nil {
			log.Printf("failure sending command to Discord: %v", err)
		}

		if newCommand.ID == "" {
			return fmt.Errorf("CreateGlobalApplicationCommand: expected non-null Global Application Command")
		}

		if err != nil {
			return fmt.Errorf("CreateGlobalApplicationCommand: %w", err)
		}

		return nil
	})

	eg.Go(func() error {
		request := &ListVoiceRegions{}
		regions, err := request.Send(bot)
		if len(regions) == 0 {
			return fmt.Errorf("ListVoiceRegions: expected non-empty Voice Regions Array")
		}

		if err != nil {
			return fmt.Errorf("ListVoiceRegions: %w", err)
		}

		return nil
	})

	// Create a guild.
	eg.Go(func() error {
		requestCreateGuild := &CreateGuild{
			Name: "Coverage",
		}

		var err error
		guild, err = requestCreateGuild.Send(bot)
		if guild.Name != "Coverage" {
			return fmt.Errorf("CreateGuild: expected non-null Global Application Command")
		}

		if err != nil {
			return fmt.Errorf("CreateGuild: %w", err)
		}

		return nil
	})

	// wait until all required requests have been processed.
	select {
	case <-ctx.Done():
		t.Fatalf("%v", eg.Wait())
	default:
	}

	if err := eg.Wait(); err != nil {
		t.Fatalf("%v", err)
	}

	// Call endpoints with one or more dependencies.
	//
	//

}

// initializeEventHandlers initializes the event handles necessary for this test.
func initializeEventHandlers(bot *Client) {
	// Handle Interactions from commands sent to admin from user.
	bot.Handle(FlagGatewayEventNameInteractionCreate, func(i InteractionCreate) {
		log.Printf("main called by %s", i.User.Username)

		// CreateInteractionResponse sends a CreateInteractionResponse request to the Discord Gateway.
		requestCreateInteractionResponse := CreateInteractionResponse{InteractionID: i.ID, InteractionToken: i.Token}
		if err := requestCreateInteractionResponse.Send(bot); err != nil {
			return
		}
	})
}

