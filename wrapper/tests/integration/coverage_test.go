// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package integration_test

import (
	"context"
	"os"
	"testing"
	"golang.org/x/sync/errgroup"
	"log"

	. "github.com/switchupcb/disgo/wrapper"
)

func TestIntegrationFlow(t *testing.T) {

	bot := &Client{
		ApplicationID: "972272656223191121",
		Authentication: BotToken(os.Getenv("TOKEN")),
		Authorization: &Authorization{
			ClientID: "972272656223191121",
			ClientSecret: "MPTDUnohN_jGDRmRkdyr0F-nEAb3yfAN",
		},
		Config:         DefaultConfig(),
		Handlers: new(Handlers),
	}
	eg, ctx := errgroup.WithContext(context.Background())

	bot.Handle(FlagGatewayEventNameInteractionCreate, func(i InteractionCreate) {
		log.Printf("main called by %s", i.User.Username)
		// CreateInteractionResponse sends a  CreateInteractionResponse  reqeust to the Discord Gateway.
		requestCreateInteractionResponse := CreateInteractionResponse{InteractionID: i.ID, InteractionToken: i.Token}
		if err := requestCreateInteractionResponse.Send(bot); err != nil {
			return
		}
	})

	// CreateGuild sends a  CreateGuild  reqeust to the Discord Gateway.
	requestCreateGuild := CreateGuild{
		Name: "test",
	}
	guild, err := requestCreateGuild.Send(bot)
	if err != nil {
		t.Fatalf("Returned error while creating Guild: %v", err)
	}

	// CreateGuildChannel sends a  CreateGuildChannel  reqeust to the Discord Gateway.
	requestCreateGuildChannel := CreateGuildChannel{GuildID: guild.ID}
	channel, err := requestCreateGuildChannel.Send(bot)
	if err != nil {
		return
	}

	// CreateMessage sends a  CreateMessage  reqeust to the Discord Gateway.
	requestCreateMessage := CreateMessage{ChannelID: channel.ID}
	message, err := requestCreateMessage.Send(bot)
	if err != nil {
		return
	}

	// CreateGuildTemplate sends a  CreateGuildTemplate  reqeust to the Discord Gateway.
	requestCreateGuildTemplate := CreateGuildTemplate{GuildID: guild.ID}
	guildTemplate, err := requestCreateGuildTemplate.Send(bot)
	if err != nil {
		return
	}
	
	// CreateGlobalApplicationCommand sends a  CreateGlobalApplicationCommand  reqeust to the Discord Gateway.
	requestCreateGlobalApplicationCommand := CreateGlobalApplicationCommand{}
	_, err = requestCreateGlobalApplicationCommand.Send(bot)
	if err != nil {
		return
	}

	// second bot sends message with a slash command with the bot's slash command
	
	// CreateGuildApplicationCommand sends a  CreateGuildApplicationCommand  reqeust to the Discord Gateway.
	requestCreateGuildApplicationCommand := CreateGuildApplicationCommand{GuildID: guild.ID}
	guildApplicationCommand, err := requestCreateGuildApplicationCommand.Send(bot)
	if err != nil {
		return
	}

	// // CreateFollowupMessage sends a  CreateFollowupMessage  reqeust to the Discord Gateway.
	// requestCreateFollowupMessage := CreateFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
	// if _, err := requestCreateFollowupMessage.Send(bot); err != nil {
	// 	return
	// }

	// CreateAutoModerationRule sends a  CreateAutoModerationRule  reqeust to the Discord Gateway.
	requestCreateAutoModerationRule := CreateAutoModerationRule{GuildID: guild.ID}
	autoModerationRule, err := requestCreateAutoModerationRule.Send(bot)
	if err != nil {
		return
	}

	// CreateGuildEmoji sends a  CreateGuildEmoji  reqeust to the Discord Gateway.
	requestCreateGuildEmoji := CreateGuildEmoji{GuildID: guild.ID}
	emoji, err := requestCreateGuildEmoji.Send(bot)
	if err != nil {
		return
	}

	// // CreateReaction sends a  CreateReaction  reqeust to the Discord Gateway.
	// requestCreateReaction := CreateReaction{ChannelID: channel.ID, MessageID: message.ID, Emoji: emoji.ID}
	// if err := requestCreateReaction.Send(bot); err != nil {
	// 	return
	// }

	// CreateChannelInvite sends a  CreateChannelInvite  reqeust to the Discord Gateway.
	requestCreateChannelInvite := CreateChannelInvite{ChannelID: channel.ID}
	channelInvite, err := requestCreateChannelInvite.Send(bot)
	if err != nil {
		return
	}

	// CreateGuildBan sends a  CreateGuildBan  reqeust to the Discord Gateway.
	requestCreateGuildBan := CreateGuildBan{GuildID: guild.ID, UserID: bot.ApplicationID}
	err = requestCreateGuildBan.Send(bot)
	if err != nil {
		return
	}

	// CreateGuildRole sends a  CreateGuildRole  reqeust to the Discord Gateway.
	requestCreateGuildRole := CreateGuildRole{GuildID: guild.ID}
	guildRole, err := requestCreateGuildRole.Send(bot)
	if err != nil {
		return
	}

	// CreateGuildScheduledEvent sends a  CreateGuildScheduledEvent  reqeust to the Discord Gateway.
	requestCreateGuildScheduledEvent := CreateGuildScheduledEvent{GuildID: guild.ID}
	guildScheduledEvent, err := requestCreateGuildScheduledEvent.Send(bot)
	if err != nil {
		return
	}

	// CreateGuildfromGuildTemplate sends a  CreateGuildfromGuildTemplate  reqeust to the Discord Gateway.
	requestCreateGuildfromGuildTemplate := CreateGuildfromGuildTemplate{TemplateCode: guildTemplate.Code}
	_, err = requestCreateGuildfromGuildTemplate.Send(bot)
	if err != nil {
		return
	}

	
	// CreateStageInstance sends a  CreateStageInstance  reqeust to the Discord Gateway.
	requestCreateStageInstance := CreateStageInstance{}
	_, err = requestCreateStageInstance.Send(bot)
	if err != nil {
		return
	}

	// CreateGuildSticker sends a  CreateGuildSticker  reqeust to the Discord Gateway.
	requestCreateGuildSticker := CreateGuildSticker{GuildID: guild.ID}
	guildSticker, err := requestCreateGuildSticker.Send(bot)
	if err != nil {
		return
	}

	// CreateGroupDM sends a  CreateGroupDM  reqeust to the Discord Gateway.
	requestCreateGroupDM := CreateGroupDM{}
	_, err = requestCreateGroupDM.Send(bot)
	if err != nil {
		return
	}

	// CreateWebhook sends a  CreateWebhook  reqeust to the Discord Gateway.
	requestCreateWebhook := CreateWebhook{ChannelID: channel.ID}
	webhook, err := requestCreateWebhook.Send(bot)
	if err != nil {
		return
	}

	eg.Go(func() error {
		// GetGlobalApplicationCommands sends a  GetGlobalApplicationCommands  reqeust to the Discord Gateway.
		requestGetGlobalApplicationCommands := GetGlobalApplicationCommands{}
		if _, err := requestGetGlobalApplicationCommands.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGlobalApplicationCommand sends a  GetGlobalApplicationCommand  reqeust to the Discord Gateway.
		requestGetGlobalApplicationCommand := GetGlobalApplicationCommand{CommandID: guildApplicationCommand.ID}
		if _, err := requestGetGlobalApplicationCommand.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildApplicationCommands sends a  GetGuildApplicationCommands  reqeust to the Discord Gateway.
		requestGetGuildApplicationCommands := GetGuildApplicationCommands{GuildID: guild.ID}
		if _, err := requestGetGuildApplicationCommands.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildApplicationCommand sends a  GetGuildApplicationCommand  reqeust to the Discord Gateway.
		requestGetGuildApplicationCommand := GetGuildApplicationCommand{GuildID: guild.ID, CommandID: guildApplicationCommand.ID}
		if _, err := requestGetGuildApplicationCommand.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildApplicationCommandPermissions sends a  GetGuildApplicationCommandPermissions  reqeust to the Discord Gateway.
		requestGetGuildApplicationCommandPermissions := GetGuildApplicationCommandPermissions{GuildID: guild.ID}
		if _, err := requestGetGuildApplicationCommandPermissions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetApplicationCommandPermissions sends a  GetApplicationCommandPermissions  reqeust to the Discord Gateway.
		requestGetApplicationCommandPermissions := GetApplicationCommandPermissions{GuildID: guild.ID, CommandID: guildApplicationCommand.ID}
		if _, err := requestGetApplicationCommandPermissions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// GetOriginalInteractionResponse sends a  GetOriginalInteractionResponse  reqeust to the Discord Gateway.
	// 	requestGetOriginalInteractionResponse := GetOriginalInteractionResponse{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
	// 	if err := requestGetOriginalInteractionResponse.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	// eg.Go(func() error {
	// 	// GetFollowupMessage sends a  GetFollowupMessage  reqeust to the Discord Gateway.
	// 	requestGetFollowupMessage := GetFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN"), MessageID: message.ID}
	// 	if _, err := requestGetFollowupMessage.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// GetGuildAuditLog sends a  GetGuildAuditLog  reqeust to the Discord Gateway.
		requestGetGuildAuditLog := GetGuildAuditLog{GuildID: guild.ID}
		if _, err := requestGetGuildAuditLog.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetAutoModerationRule sends a  GetAutoModerationRule  reqeust to the Discord Gateway.
		requestGetAutoModerationRule := GetAutoModerationRule{GuildID: guild.ID, AutoModerationRuleID: autoModerationRule.ID}
		if _, err := requestGetAutoModerationRule.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannel sends a  GetChannel  reqeust to the Discord Gateway.
		requestGetChannel := GetChannel{ChannelID: channel.ID}
		if _, err := requestGetChannel.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannelMessages sends a  GetChannelMessages  reqeust to the Discord Gateway.
		requestGetChannelMessages := GetChannelMessages{ChannelID: channel.ID}
		if _, err := requestGetChannelMessages.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannelMessage sends a  GetChannelMessage  reqeust to the Discord Gateway.
		requestGetChannelMessage := GetChannelMessage{ChannelID: channel.ID, MessageID: message.ID}
		if _, err := requestGetChannelMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// GetReactions sends a  GetReactions  reqeust to the Discord Gateway.
	// 	requestGetReactions := GetReactions{ChannelID: channel.ID, MessageID: message.ID, Emoji: os.Getenv("EMOJI")}
	// 	if _, err := requestGetReactions.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// GetChannelInvites sends a  GetChannelInvites  reqeust to the Discord Gateway.
		requestGetChannelInvites := GetChannelInvites{ChannelID: channel.ID}
		if _, err := requestGetChannelInvites.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetPinnedMessages sends a  GetPinnedMessages  reqeust to the Discord Gateway.
		requestGetPinnedMessages := GetPinnedMessages{ChannelID: channel.ID}
		if _, err := requestGetPinnedMessages.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetThreadMember sends a  GetThreadMember  reqeust to the Discord Gateway.
		requestGetThreadMember := GetThreadMember{ChannelID: channel.ID, UserID: bot.ApplicationID}
		if _, err := requestGetThreadMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildEmoji sends a  GetGuildEmoji  reqeust to the Discord Gateway.
		requestGetGuildEmoji := GetGuildEmoji{GuildID: guild.ID, EmojiID: emoji.ID}
		if _, err := requestGetGuildEmoji.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuild sends a  GetGuild  reqeust to the Discord Gateway.
		requestGetGuild := GetGuild{GuildID: guild.ID}
		if _, err := requestGetGuild.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildPreview sends a  GetGuildPreview  reqeust to the Discord Gateway.
		requestGetGuildPreview := GetGuildPreview{GuildID: guild.ID}
		if _, err := requestGetGuildPreview.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildChannels sends a  GetGuildChannels  reqeust to the Discord Gateway.
		requestGetGuildChannels := GetGuildChannels{GuildID: guild.ID}
		if _, err := requestGetGuildChannels.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildMember sends a  GetGuildMember  reqeust to the Discord Gateway.
		requestGetGuildMember := GetGuildMember{GuildID: guild.ID, UserID: bot.ApplicationID}
		if _, err := requestGetGuildMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildBans sends a  GetGuildBans  reqeust to the Discord Gateway.
		requestGetGuildBans := GetGuildBans{GuildID: guild.ID}
		if _, err := requestGetGuildBans.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildBan sends a  GetGuildBan  reqeust to the Discord Gateway.
		requestGetGuildBan := GetGuildBan{GuildID: guild.ID, UserID: bot.ApplicationID}
		if _, err := requestGetGuildBan.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildRoles sends a  GetGuildRoles  reqeust to the Discord Gateway.
		requestGetGuildRoles := GetGuildRoles{GuildID: guild.ID}
		if _, err := requestGetGuildRoles.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildPruneCount sends a  GetGuildPruneCount  reqeust to the Discord Gateway.
		requestGetGuildPruneCount := GetGuildPruneCount{GuildID: guild.ID}
		if err := requestGetGuildPruneCount.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildVoiceRegions sends a  GetGuildVoiceRegions  reqeust to the Discord Gateway.
		requestGetGuildVoiceRegions := GetGuildVoiceRegions{GuildID: guild.ID}
		if _, err := requestGetGuildVoiceRegions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildInvites sends a  GetGuildInvites  reqeust to the Discord Gateway.
		requestGetGuildInvites := GetGuildInvites{GuildID: guild.ID}
		if _, err := requestGetGuildInvites.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildIntegrations sends a  GetGuildIntegrations  reqeust to the Discord Gateway.
		requestGetGuildIntegrations := GetGuildIntegrations{GuildID: guild.ID}
		if _, err := requestGetGuildIntegrations.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWidgetSettings sends a  GetGuildWidgetSettings  reqeust to the Discord Gateway.
		requestGetGuildWidgetSettings := GetGuildWidgetSettings{GuildID: guild.ID}
		if _, err := requestGetGuildWidgetSettings.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWidget sends a  GetGuildWidget  reqeust to the Discord Gateway.
		requestGetGuildWidget := GetGuildWidget{GuildID: guild.ID}
		if _, err := requestGetGuildWidget.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildVanityURL sends a  GetGuildVanityURL  reqeust to the Discord Gateway.
		requestGetGuildVanityURL := GetGuildVanityURL{GuildID: guild.ID}
		if _, err := requestGetGuildVanityURL.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWidgetImage sends a  GetGuildWidgetImage  reqeust to the Discord Gateway.
		requestGetGuildWidgetImage := GetGuildWidgetImage{GuildID: guild.ID}
		if _, err := requestGetGuildWidgetImage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWelcomeScreen sends a  GetGuildWelcomeScreen  reqeust to the Discord Gateway.
		requestGetGuildWelcomeScreen := GetGuildWelcomeScreen{GuildID: guild.ID}
		if _, err := requestGetGuildWelcomeScreen.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildScheduledEvent sends a  GetGuildScheduledEvent  reqeust to the Discord Gateway.
		requestGetGuildScheduledEvent := GetGuildScheduledEvent{GuildID: guild.ID, GuildScheduledEventID: guildScheduledEvent.ID}
		if _, err := requestGetGuildScheduledEvent.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildScheduledEventUsers sends a  GetGuildScheduledEventUsers  reqeust to the Discord Gateway.
		requestGetGuildScheduledEventUsers := GetGuildScheduledEventUsers{GuildID: guild.ID, GuildScheduledEventID: guildScheduledEvent.ID}
		if _, err := requestGetGuildScheduledEventUsers.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildTemplate sends a  GetGuildTemplate  reqeust to the Discord Gateway.
		requestGetGuildTemplate := GetGuildTemplate{TemplateCode: guildTemplate.Code}
		if _, err := requestGetGuildTemplate.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildTemplates sends a  GetGuildTemplates  reqeust to the Discord Gateway.
		requestGetGuildTemplates := GetGuildTemplates{GuildID: guild.ID}
		if _, err := requestGetGuildTemplates.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetInvite sends a  GetInvite  reqeust to the Discord Gateway.
		requestGetInvite := GetInvite{InviteCode: channelInvite.Code}
		if _, err := requestGetInvite.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetStageInstance sends a  GetStageInstance  reqeust to the Discord Gateway.
		requestGetStageInstance := GetStageInstance{ChannelID: channel.ID}
		if err := requestGetStageInstance.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetSticker sends a  GetSticker  reqeust to the Discord Gateway.
		requestGetSticker := GetSticker{StickerID: guildSticker.ID}
		if _, err := requestGetSticker.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildSticker sends a  GetGuildSticker  reqeust to the Discord Gateway.
		requestGetGuildSticker := GetGuildSticker{GuildID: guild.ID, StickerID: guildSticker.ID}
		if _, err := requestGetGuildSticker.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentUser sends a  GetCurrentUser  reqeust to the Discord Gateway.
		requestGetCurrentUser := GetCurrentUser{}
		if _, err := requestGetCurrentUser.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetUser sends a  GetUser  reqeust to the Discord Gateway.
		requestGetUser := GetUser{UserID: bot.ApplicationID}
		if _, err := requestGetUser.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentUserGuilds sends a  GetCurrentUserGuilds  reqeust to the Discord Gateway.
		requestGetCurrentUserGuilds := GetCurrentUserGuilds{}
		if _, err := requestGetCurrentUserGuilds.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentUserGuildMember sends a  GetCurrentUserGuildMember  reqeust to the Discord Gateway.
		requestGetCurrentUserGuildMember := GetCurrentUserGuildMember{GuildID: guild.ID}
		if _, err := requestGetCurrentUserGuildMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetUserConnections sends a  GetUserConnections  reqeust to the Discord Gateway.
		requestGetUserConnections := GetUserConnections{}
		if _, err := requestGetUserConnections.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetChannelWebhooks sends a  GetChannelWebhooks  reqeust to the Discord Gateway.
		requestGetChannelWebhooks := GetChannelWebhooks{ChannelID: channel.ID}
		if _, err := requestGetChannelWebhooks.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGuildWebhooks sends a  GetGuildWebhooks  reqeust to the Discord Gateway.
		requestGetGuildWebhooks := GetGuildWebhooks{GuildID: guild.ID}
		if _, err := requestGetGuildWebhooks.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetWebhook sends a  GetWebhook  reqeust to the Discord Gateway.
		requestGetWebhook := GetWebhook{WebhookID: webhook.ID}
		if _, err := requestGetWebhook.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetWebhookwithToken sends a  GetWebhookwithToken  reqeust to the Discord Gateway.
		requestGetWebhookwithToken := GetWebhookwithToken{WebhookID: webhook.ID, WebhookToken: webhook.Token}
		if _, err := requestGetWebhookwithToken.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetWebhookMessage sends a  GetWebhookMessage  reqeust to the Discord Gateway.
		requestGetWebhookMessage := GetWebhookMessage{WebhookID: webhook.ID, WebhookToken: webhook.Token, MessageID: message.ID}
		if _, err := requestGetWebhookMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGateway sends a  GetGateway  reqeust to the Discord Gateway.
		requestGetGateway := GetGateway{}
		if _, err := requestGetGateway.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetGatewayBot sends a  GetGatewayBot  reqeust to the Discord Gateway.
		requestGetGatewayBot := GetGatewayBot{}
		if _, err := requestGetGatewayBot.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentBotApplicationInformation sends a  GetCurrentBotApplicationInformation  reqeust to the Discord Gateway.
		requestGetCurrentBotApplicationInformation := GetCurrentBotApplicationInformation{}
		if _, err := requestGetCurrentBotApplicationInformation.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GetCurrentAuthorizationInformation sends a  GetCurrentAuthorizationInformation  reqeust to the Discord Gateway.
		requestGetCurrentAuthorizationInformation := GetCurrentAuthorizationInformation{}
		if _, err := requestGetCurrentAuthorizationInformation.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditGlobalApplicationCommand sends a  EditGlobalApplicationCommand  reqeust to the Discord Gateway.
		requestEditGlobalApplicationCommand := EditGlobalApplicationCommand{CommandID: guildApplicationCommand.ID}
		if _, err := requestEditGlobalApplicationCommand.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditGuildApplicationCommand sends a  EditGuildApplicationCommand  reqeust to the Discord Gateway.
		requestEditGuildApplicationCommand := EditGuildApplicationCommand{GuildID: guild.ID, CommandID: guildApplicationCommand.ID}
		if _, err := requestEditGuildApplicationCommand.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// EditApplicationCommandPermissions sends a  EditApplicationCommandPermissions  reqeust to the Discord Gateway.
		requestEditApplicationCommandPermissions := EditApplicationCommandPermissions{GuildID: guild.ID, CommandID: guildApplicationCommand.ID}
		if _, err := requestEditApplicationCommandPermissions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// EditOriginalInteractionResponse sends a  EditOriginalInteractionResponse  reqeust to the Discord Gateway.
	// 	requestEditOriginalInteractionResponse := EditOriginalInteractionResponse{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
	// 	if _, err := requestEditOriginalInteractionResponse.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	// eg.Go(func() error {
	// 	// EditFollowupMessage sends a  EditFollowupMessage  reqeust to the Discord Gateway.
	// 	requestEditFollowupMessage := EditFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN"), MessageID: message.ID}
	// 	if _, err := requestEditFollowupMessage.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// EditMessage sends a  EditMessage  reqeust to the Discord Gateway.
		requestEditMessage := EditMessage{ChannelID: channel.ID, MessageID: message.ID}
		if _, err := requestEditMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// EditChannelPermissions sends a  EditChannelPermissions  reqeust to the Discord Gateway.
	// 	requestEditChannelPermissions := EditChannelPermissions{ChannelID: channel.ID, OverwriteID: os.Getenv("OVERWRITEID")}
	// 	if err := requestEditChannelPermissions.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// EditWebhookMessage sends a  EditWebhookMessage  reqeust to the Discord Gateway.
		requestEditWebhookMessage := EditWebhookMessage{WebhookID: webhook.ID, WebhookToken: webhook.Token, MessageID: message.ID}
		if _, err := requestEditWebhookMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BatchEditApplicationCommandPermissions sends a  BatchEditApplicationCommandPermissions  reqeust to the Discord Gateway.
		requestBatchEditApplicationCommandPermissions := BatchEditApplicationCommandPermissions{GuildID: guild.ID}
		if _, err := requestBatchEditApplicationCommandPermissions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildWidget sends a  ModifyGuildWidget  reqeust to the Discord Gateway.
		requestModifyGuildWidget := ModifyGuildWidget{GuildID: guild.ID}
		if _, err := requestModifyGuildWidget.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyAutoModerationRule sends a  ModifyAutoModerationRule  reqeust to the Discord Gateway.
		requestModifyAutoModerationRule := ModifyAutoModerationRule{GuildID: guild.ID, AutoModerationRuleID: autoModerationRule.ID}
		if _, err := requestModifyAutoModerationRule.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyChannel sends a  ModifyChannel  reqeust to the Discord Gateway.
		requestModifyChannel := ModifyChannel{ChannelID: channel.ID}
		if _, err := requestModifyChannel.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyChannelGroupDM sends a  ModifyChannelGroupDM  reqeust to the Discord Gateway.
		requestModifyChannelGroupDM := ModifyChannelGroupDM{ChannelID: channel.ID}
		if _, err := requestModifyChannelGroupDM.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyChannelGuild sends a  ModifyChannelGuild  reqeust to the Discord Gateway.
		requestModifyChannelGuild := ModifyChannelGuild{ChannelID: channel.ID}
		if _, err := requestModifyChannelGuild.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyChannelThread sends a  ModifyChannelThread  reqeust to the Discord Gateway.
		requestModifyChannelThread := ModifyChannelThread{ChannelID: channel.ID}
		if _, err := requestModifyChannelThread.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildEmoji sends a  ModifyGuildEmoji  reqeust to the Discord Gateway.
		requestModifyGuildEmoji := ModifyGuildEmoji{GuildID: guild.ID, EmojiID: emoji.ID}
		if _, err := requestModifyGuildEmoji.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuild sends a  ModifyGuild  reqeust to the Discord Gateway.
		requestModifyGuild := ModifyGuild{GuildID: guild.ID}
		if _, err := requestModifyGuild.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildChannelPositions sends a  ModifyGuildChannelPositions  reqeust to the Discord Gateway.
		requestModifyGuildChannelPositions := ModifyGuildChannelPositions{GuildID: guild.ID}
		if err := requestModifyGuildChannelPositions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildMember sends a  ModifyGuildMember  reqeust to the Discord Gateway.
		requestModifyGuildMember := ModifyGuildMember{GuildID: guild.ID, UserID: bot.ApplicationID}
		if _, err := requestModifyGuildMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyCurrentMember sends a  ModifyCurrentMember  reqeust to the Discord Gateway.
		requestModifyCurrentMember := ModifyCurrentMember{GuildID: guild.ID}
		if _, err := requestModifyCurrentMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildRolePositions sends a  ModifyGuildRolePositions  reqeust to the Discord Gateway.
		requestModifyGuildRolePositions := ModifyGuildRolePositions{GuildID: guild.ID}
		if _, err := requestModifyGuildRolePositions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildRole sends a  ModifyGuildRole  reqeust to the Discord Gateway.
		requestModifyGuildRole := ModifyGuildRole{GuildID: guild.ID, RoleID: guildRole.ID}
		if _, err := requestModifyGuildRole.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildWelcomeScreen sends a  ModifyGuildWelcomeScreen  reqeust to the Discord Gateway.
		requestModifyGuildWelcomeScreen := ModifyGuildWelcomeScreen{GuildID: guild.ID}
		if _, err := requestModifyGuildWelcomeScreen.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyCurrentUserVoiceState sends a  ModifyCurrentUserVoiceState  reqeust to the Discord Gateway.
		requestModifyCurrentUserVoiceState := ModifyCurrentUserVoiceState{GuildID: guild.ID}
		if err := requestModifyCurrentUserVoiceState.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyUserVoiceState sends a  ModifyUserVoiceState  reqeust to the Discord Gateway.
		requestModifyUserVoiceState := ModifyUserVoiceState{GuildID: guild.ID, UserID: bot.ApplicationID}
		if err := requestModifyUserVoiceState.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildScheduledEvent sends a  ModifyGuildScheduledEvent  reqeust to the Discord Gateway.
		requestModifyGuildScheduledEvent := ModifyGuildScheduledEvent{GuildID: guild.ID, GuildScheduledEventID: guildScheduledEvent.ID}
		if _, err := requestModifyGuildScheduledEvent.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildTemplate sends a  ModifyGuildTemplate  reqeust to the Discord Gateway.
		requestModifyGuildTemplate := ModifyGuildTemplate{GuildID: guild.ID, TemplateCode: guildTemplate.Code}
		if _, err := requestModifyGuildTemplate.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyStageInstance sends a  ModifyStageInstance  reqeust to the Discord Gateway.
		requestModifyStageInstance := ModifyStageInstance{ChannelID: channel.ID}
		if _, err := requestModifyStageInstance.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyGuildSticker sends a  ModifyGuildSticker  reqeust to the Discord Gateway.
		requestModifyGuildSticker := ModifyGuildSticker{GuildID: guild.ID, StickerID: guildSticker.ID}
		if _, err := requestModifyGuildSticker.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyCurrentUser sends a  ModifyCurrentUser  reqeust to the Discord Gateway.
		requestModifyCurrentUser := ModifyCurrentUser{}
		if _, err := requestModifyCurrentUser.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyWebhook sends a  ModifyWebhook  reqeust to the Discord Gateway.
		requestModifyWebhook := ModifyWebhook{WebhookID: webhook.ID}
		if _, err := requestModifyWebhook.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ModifyWebhookwithToken sends a  ModifyWebhookwithToken  reqeust to the Discord Gateway.
		requestModifyWebhookwithToken := ModifyWebhookwithToken{WebhookID: webhook.ID, WebhookToken: webhook.Token}
		if _, err := requestModifyWebhookwithToken.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListAutoModerationRulesForGuild sends a  ListAutoModerationRulesForGuild  reqeust to the Discord Gateway.
		requestListAutoModerationRulesForGuild := ListAutoModerationRulesForGuild{GuildID: guild.ID}
		if _, err := requestListAutoModerationRulesForGuild.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListThreadMembers sends a  ListThreadMembers  reqeust to the Discord Gateway.
		requestListThreadMembers := ListThreadMembers{ChannelID: channel.ID}
		if _, err := requestListThreadMembers.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListPublicArchivedThreads sends a  ListPublicArchivedThreads  reqeust to the Discord Gateway.
		requestListPublicArchivedThreads := ListPublicArchivedThreads{ChannelID: channel.ID}
		if _, err := requestListPublicArchivedThreads.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListPrivateArchivedThreads sends a  ListPrivateArchivedThreads  reqeust to the Discord Gateway.
		requestListPrivateArchivedThreads := ListPrivateArchivedThreads{ChannelID: channel.ID}
		if _, err := requestListPrivateArchivedThreads.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListJoinedPrivateArchivedThreads sends a  ListJoinedPrivateArchivedThreads  reqeust to the Discord Gateway.
		requestListJoinedPrivateArchivedThreads := ListJoinedPrivateArchivedThreads{ChannelID: channel.ID}
		if _, err := requestListJoinedPrivateArchivedThreads.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListGuildEmojis sends a  ListGuildEmojis  reqeust to the Discord Gateway.
		requestListGuildEmojis := ListGuildEmojis{GuildID: guild.ID}
		if _, err := requestListGuildEmojis.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListActiveGuildThreads sends a  ListActiveGuildThreads  reqeust to the Discord Gateway.
		requestListActiveGuildThreads := ListActiveGuildThreads{GuildID: guild.ID}
		if _, err := requestListActiveGuildThreads.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListGuildMembers sends a  ListGuildMembers  reqeust to the Discord Gateway.
		requestListGuildMembers := ListGuildMembers{GuildID: guild.ID}
		if _, err := requestListGuildMembers.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListScheduledEventsforGuild sends a  ListScheduledEventsforGuild  reqeust to the Discord Gateway.
		requestListScheduledEventsforGuild := ListScheduledEventsforGuild{GuildID: guild.ID}
		if _, err := requestListScheduledEventsforGuild.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListNitroStickerPacks sends a  ListNitroStickerPacks  reqeust to the Discord Gateway.
		requestListNitroStickerPacks := ListNitroStickerPacks{}
		if _, err := requestListNitroStickerPacks.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListGuildStickers sends a  ListGuildStickers  reqeust to the Discord Gateway.
		requestListGuildStickers := ListGuildStickers{GuildID: guild.ID}
		if _, err := requestListGuildStickers.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ListVoiceRegions sends a  ListVoiceRegions  reqeust to the Discord Gateway.
		requestListVoiceRegions := ListVoiceRegions{}
		if _, err := requestListVoiceRegions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GroupDMAddRecipient sends a  GroupDMAddRecipient  reqeust to the Discord Gateway.
		requestGroupDMAddRecipient := GroupDMAddRecipient{ChannelID: channel.ID, UserID: bot.ApplicationID}
		if err := requestGroupDMAddRecipient.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// AddThreadMember sends a  AddThreadMember  reqeust to the Discord Gateway.
		requestAddThreadMember := AddThreadMember{ChannelID: channel.ID, UserID: bot.ApplicationID}
		if err := requestAddThreadMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// AddGuildMember sends a  AddGuildMember  reqeust to the Discord Gateway.
		requestAddGuildMember := AddGuildMember{GuildID: guild.ID, UserID: bot.ApplicationID}
		if _, err := requestAddGuildMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// AddGuildMemberRole sends a  AddGuildMemberRole  reqeust to the Discord Gateway.
		requestAddGuildMemberRole := AddGuildMemberRole{GuildID: guild.ID, UserID: bot.ApplicationID, RoleID: guildRole.ID}
		if err := requestAddGuildMemberRole.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// StartThreadfromMessage sends a  StartThreadfromMessage  reqeust to the Discord Gateway.
		requestStartThreadfromMessage := StartThreadfromMessage{ChannelID: channel.ID, MessageID: message.ID}
		if _, err := requestStartThreadfromMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// StartThreadwithoutMessage sends a  StartThreadwithoutMessage  reqeust to the Discord Gateway.
		requestStartThreadwithoutMessage := StartThreadwithoutMessage{ChannelID: channel.ID}
		if _, err := requestStartThreadwithoutMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// StartThreadinForumChannel sends a  StartThreadinForumChannel  reqeust to the Discord Gateway.
		requestStartThreadinForumChannel := StartThreadinForumChannel{ChannelID: channel.ID}
		if _, err := requestStartThreadinForumChannel.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BulkOverwriteGlobalApplicationCommands sends a  BulkOverwriteGlobalApplicationCommands  reqeust to the Discord Gateway.
		requestBulkOverwriteGlobalApplicationCommands := BulkOverwriteGlobalApplicationCommands{}
		if _, err := requestBulkOverwriteGlobalApplicationCommands.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BulkOverwriteGuildApplicationCommands sends a  BulkOverwriteGuildApplicationCommands  reqeust to the Discord Gateway.
		requestBulkOverwriteGuildApplicationCommands := BulkOverwriteGuildApplicationCommands{GuildID: guild.ID}
		if _, err := requestBulkOverwriteGuildApplicationCommands.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// CrosspostMessage sends a  CrosspostMessage  reqeust to the Discord Gateway.
		requestCrosspostMessage := CrosspostMessage{ChannelID: channel.ID, MessageID: message.ID}
		if _, err := requestCrosspostMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// FollowNewsChannel sends a  FollowNewsChannel  reqeust to the Discord Gateway.
		requestFollowNewsChannel := FollowNewsChannel{ChannelID: channel.ID}
		if _, err := requestFollowNewsChannel.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// TriggerTypingIndicator sends a  TriggerTypingIndicator  reqeust to the Discord Gateway.
		requestTriggerTypingIndicator := TriggerTypingIndicator{ChannelID: channel.ID}
		if err := requestTriggerTypingIndicator.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// PinMessage sends a  PinMessage  reqeust to the Discord Gateway.
		requestPinMessage := PinMessage{ChannelID: channel.ID, MessageID: message.ID}
		if err := requestPinMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// UnpinMessage sends a  UnpinMessage  reqeust to the Discord Gateway.
		requestUnpinMessage := UnpinMessage{ChannelID: channel.ID, MessageID: message.ID}
		if err := requestUnpinMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// JoinThread sends a  JoinThread  reqeust to the Discord Gateway.
		requestJoinThread := JoinThread{ChannelID: channel.ID}
		if err := requestJoinThread.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// SearchGuildMembers sends a  SearchGuildMembers  reqeust to the Discord Gateway.
		requestSearchGuildMembers := SearchGuildMembers{GuildID: guild.ID}
		if _, err := requestSearchGuildMembers.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BeginGuildPrune sends a  BeginGuildPrune  reqeust to the Discord Gateway.
		requestBeginGuildPrune := BeginGuildPrune{GuildID: guild.ID}
		if err := requestBeginGuildPrune.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// SyncGuildTemplate sends a  SyncGuildTemplate  reqeust to the Discord Gateway.
		requestSyncGuildTemplate := SyncGuildTemplate{GuildID: guild.ID, TemplateCode: guildTemplate.Code}
		if _, err := requestSyncGuildTemplate.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ExecuteWebhook sends a  ExecuteWebhook  reqeust to the Discord Gateway.
		requestExecuteWebhook := ExecuteWebhook{WebhookID: webhook.ID, WebhookToken: webhook.Token}
		if err := requestExecuteWebhook.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ExecuteSlackCompatibleWebhook sends a  ExecuteSlackCompatibleWebhook  reqeust to the Discord Gateway.
		requestExecuteSlackCompatibleWebhook := ExecuteSlackCompatibleWebhook{WebhookID: webhook.ID, WebhookToken: webhook.Token}
		if err := requestExecuteSlackCompatibleWebhook.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// ExecuteGitHubCompatibleWebhook sends a  ExecuteGitHubCompatibleWebhook  reqeust to the Discord Gateway.
		requestExecuteGitHubCompatibleWebhook := ExecuteGitHubCompatibleWebhook{WebhookID: webhook.ID, WebhookToken: webhook.Token}
		if err := requestExecuteGitHubCompatibleWebhook.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// GroupDMRemoveRecipient sends a  GroupDMRemoveRecipient  reqeust to the Discord Gateway.
		requestGroupDMRemoveRecipient := GroupDMRemoveRecipient{ChannelID: channel.ID, UserID: bot.ApplicationID}
		if err := requestGroupDMRemoveRecipient.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveThreadMember sends a  RemoveThreadMember  reqeust to the Discord Gateway.
		requestRemoveThreadMember := RemoveThreadMember{ChannelID: channel.ID, UserID: bot.ApplicationID}
		if err := requestRemoveThreadMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveGuildMemberRole sends a  RemoveGuildMemberRole  reqeust to the Discord Gateway.
		requestRemoveGuildMemberRole := RemoveGuildMemberRole{GuildID: guild.ID, UserID: bot.ApplicationID, RoleID: guildRole.ID}
		if err := requestRemoveGuildMemberRole.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveGuildMember sends a  RemoveGuildMember  reqeust to the Discord Gateway.
		requestRemoveGuildMember := RemoveGuildMember{GuildID: guild.ID, UserID: bot.ApplicationID}
		if err := requestRemoveGuildMember.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// RemoveGuildBan sends a  RemoveGuildBan  reqeust to the Discord Gateway.
		requestRemoveGuildBan := RemoveGuildBan{GuildID: guild.ID, UserID: bot.ApplicationID}
		if err := requestRemoveGuildBan.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGlobalApplicationCommand sends a  DeleteGlobalApplicationCommand  reqeust to the Discord Gateway.
		requestDeleteGlobalApplicationCommand := DeleteGlobalApplicationCommand{CommandID: guildApplicationCommand.ID}
		if err := requestDeleteGlobalApplicationCommand.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildApplicationCommand sends a  DeleteGuildApplicationCommand  reqeust to the Discord Gateway.
		requestDeleteGuildApplicationCommand := DeleteGuildApplicationCommand{GuildID: guild.ID, CommandID: guildApplicationCommand.ID}
		if err := requestDeleteGuildApplicationCommand.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// DeleteOriginalInteractionResponse sends a  DeleteOriginalInteractionResponse  reqeust to the Discord Gateway.
	// 	requestDeleteOriginalInteractionResponse := DeleteOriginalInteractionResponse{InteractionToken: os.Getenv("INTERACTIONTOKEN")}
	// 	if err := requestDeleteOriginalInteractionResponse.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	// eg.Go(func() error {
	// 	// DeleteFollowupMessage sends a  DeleteFollowupMessage  reqeust to the Discord Gateway.
	// 	requestDeleteFollowupMessage := DeleteFollowupMessage{InteractionToken: os.Getenv("INTERACTIONTOKEN"), MessageID: message.ID}
	// 	if err := requestDeleteFollowupMessage.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// DeleteAutoModerationRule sends a  DeleteAutoModerationRule  reqeust to the Discord Gateway.
		requestDeleteAutoModerationRule := DeleteAutoModerationRule{GuildID: guild.ID, AutoModerationRuleID: autoModerationRule.ID}
		if err := requestDeleteAutoModerationRule.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteCloseChannel sends a  DeleteCloseChannel  reqeust to the Discord Gateway.
		requestDeleteCloseChannel := DeleteCloseChannel{ChannelID: channel.ID}
		if _, err := requestDeleteCloseChannel.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// DeleteOwnReaction sends a  DeleteOwnReaction  reqeust to the Discord Gateway.
	// 	requestDeleteOwnReaction := DeleteOwnReaction{ChannelID: channel.ID, MessageID: message.ID, Emoji: os.Getenv("EMOJI")}
	// 	if err := requestDeleteOwnReaction.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	// eg.Go(func() error {
	// 	// DeleteUserReaction sends a  DeleteUserReaction  reqeust to the Discord Gateway.
	// 	requestDeleteUserReaction := DeleteUserReaction{ChannelID: channel.ID, MessageID: message.ID, Emoji: os.Getenv("EMOJI"), UserID: bot.ApplicationID}
	// 	if err := requestDeleteUserReaction.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// DeleteAllReactions sends a  DeleteAllReactions  reqeust to the Discord Gateway.
		requestDeleteAllReactions := DeleteAllReactions{ChannelID: channel.ID, MessageID: message.ID}
		if err := requestDeleteAllReactions.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// DeleteAllReactionsforEmoji sends a  DeleteAllReactionsforEmoji  reqeust to the Discord Gateway.
	// 	requestDeleteAllReactionsforEmoji := DeleteAllReactionsforEmoji{ChannelID: channel.ID, MessageID: message.ID, Emoji: os.Getenv("EMOJI")}
	// 	if err := requestDeleteAllReactionsforEmoji.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// DeleteMessage sends a  DeleteMessage  reqeust to the Discord Gateway.
		requestDeleteMessage := DeleteMessage{ChannelID: channel.ID, MessageID: message.ID}
		if err := requestDeleteMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// BulkDeleteMessages sends a  BulkDeleteMessages  reqeust to the Discord Gateway.
		requestBulkDeleteMessages := BulkDeleteMessages{ChannelID: channel.ID}
		if err := requestBulkDeleteMessages.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// DeleteChannelPermission sends a  DeleteChannelPermission  reqeust to the Discord Gateway.
	// 	requestDeleteChannelPermission := DeleteChannelPermission{ChannelID: channel.ID, OverwriteID: os.Getenv("OVERWRITEID")}
	// 	if err := requestDeleteChannelPermission.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// DeleteGuildEmoji sends a  DeleteGuildEmoji  reqeust to the Discord Gateway.
		requestDeleteGuildEmoji := DeleteGuildEmoji{GuildID: guild.ID, EmojiID: emoji.ID}
		if err := requestDeleteGuildEmoji.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuild sends a  DeleteGuild  reqeust to the Discord Gateway.
		requestDeleteGuild := DeleteGuild{GuildID: guild.ID}
		if err := requestDeleteGuild.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildRole sends a  DeleteGuildRole  reqeust to the Discord Gateway.
		requestDeleteGuildRole := DeleteGuildRole{GuildID: guild.ID, RoleID: guildRole.ID}
		if err := requestDeleteGuildRole.Send(bot); err != nil {
			return err
		}
		return nil

	})

	// eg.Go(func() error {
	// 	// DeleteGuildIntegration sends a  DeleteGuildIntegration  reqeust to the Discord Gateway.
	// 	requestDeleteGuildIntegration := DeleteGuildIntegration{GuildID: guild.ID, IntegrationID: os.Getenv("INTEGRATIONID")}
	// 	if err := requestDeleteGuildIntegration.Send(bot); err != nil {
	// 		return err
	// 	}
	// 	return nil

	// })

	eg.Go(func() error {
		// DeleteGuildScheduledEvent sends a  DeleteGuildScheduledEvent  reqeust to the Discord Gateway.
		requestDeleteGuildScheduledEvent := DeleteGuildScheduledEvent{GuildID: guild.ID, GuildScheduledEventID: guildScheduledEvent.ID}
		if err := requestDeleteGuildScheduledEvent.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildTemplate sends a  DeleteGuildTemplate  reqeust to the Discord Gateway.
		requestDeleteGuildTemplate := DeleteGuildTemplate{GuildID: guild.ID, TemplateCode: guildTemplate.Code}
		if _, err := requestDeleteGuildTemplate.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteInvite sends a  DeleteInvite  reqeust to the Discord Gateway.
		requestDeleteInvite := DeleteInvite{InviteCode: channelInvite.Code}
		if _, err := requestDeleteInvite.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteStageInstance sends a  DeleteStageInstance  reqeust to the Discord Gateway.
		requestDeleteStageInstance := DeleteStageInstance{ChannelID: channel.ID}
		if err := requestDeleteStageInstance.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteGuildSticker sends a  DeleteGuildSticker  reqeust to the Discord Gateway.
		requestDeleteGuildSticker := DeleteGuildSticker{GuildID: guild.ID, StickerID: guildSticker.ID}
		if err := requestDeleteGuildSticker.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteWebhook sends a  DeleteWebhook  reqeust to the Discord Gateway.
		requestDeleteWebhook := DeleteWebhook{WebhookID: webhook.ID}
		if err := requestDeleteWebhook.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteWebhookwithToken sends a  DeleteWebhookwithToken  reqeust to the Discord Gateway.
		requestDeleteWebhookwithToken := DeleteWebhookwithToken{WebhookID: webhook.ID, WebhookToken: webhook.Token}
		if err := requestDeleteWebhookwithToken.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// DeleteWebhookMessage sends a  DeleteWebhookMessage  reqeust to the Discord Gateway.
		requestDeleteWebhookMessage := DeleteWebhookMessage{WebhookID: webhook.ID, WebhookToken: webhook.Token, MessageID: message.ID}
		if err := requestDeleteWebhookMessage.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// LeaveThread sends a  LeaveThread  reqeust to the Discord Gateway.
		requestLeaveThread := LeaveThread{ChannelID: channel.ID}
		if err := requestLeaveThread.Send(bot); err != nil {
			return err
		}
		return nil

	})

	eg.Go(func() error {
		// LeaveGuild sends a  LeaveGuild  reqeust to the Discord Gateway.
		requestLeaveGuild := LeaveGuild{GuildID: guild.ID}
		if err := requestLeaveGuild.Send(bot); err != nil {
			return err
		}
		return nil

	})

	select {
	case <-ctx.Done():
		t.Fatalf("%v", eg.Wait())
	default:
	}

	if err := eg.Wait(); err != nil {
		t.Fatalf("%v", err)
	}

}

