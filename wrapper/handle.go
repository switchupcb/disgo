// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package wrapper

import (
	"encoding/json"
	"log"
	"sync"
)

// Handlers represents a bot's event handlers.
type Handlers struct {
	ApplicationCommandPermissionsUpdate []func(*ApplicationCommandPermissionsUpdate)
	ChannelCreate                       []func(*ChannelCreate)
	ChannelDelete                       []func(*ChannelDelete)
	ChannelPinsUpdate                   []func(*ChannelPinsUpdate)
	ChannelUpdate                       []func(*ChannelUpdate)
	GuildBanAdd                         []func(*GuildBanAdd)
	GuildBanRemove                      []func(*GuildBanRemove)
	GuildCreate                         []func(*GuildCreate)
	GuildDelete                         []func(*GuildDelete)
	GuildEmojisUpdate                   []func(*GuildEmojisUpdate)
	GuildIntegrationsUpdate             []func(*GuildIntegrationsUpdate)
	GuildMemberAdd                      []func(*GuildMemberAdd)
	GuildMemberRemove                   []func(*GuildMemberRemove)
	GuildMemberUpdate                   []func(*GuildMemberUpdate)
	GuildMembersChunk                   []func(*GuildMembersChunk)
	GuildRoleCreate                     []func(*GuildRoleCreate)
	GuildRoleDelete                     []func(*GuildRoleDelete)
	GuildRoleUpdate                     []func(*GuildRoleUpdate)
	GuildScheduledEventCreate           []func(*GuildScheduledEventCreate)
	GuildScheduledEventDelete           []func(*GuildScheduledEventDelete)
	GuildScheduledEventUpdate           []func(*GuildScheduledEventUpdate)
	GuildScheduledEventUserAdd          []func(*GuildScheduledEventUserAdd)
	GuildScheduledEventUserRemove       []func(*GuildScheduledEventUserRemove)
	GuildStickersUpdate                 []func(*GuildStickersUpdate)
	GuildUpdate                         []func(*GuildUpdate)
	Hello                               []func(*Hello)
	IntegrationCreate                   []func(*IntegrationCreate)
	IntegrationDelete                   []func(*IntegrationDelete)
	IntegrationUpdate                   []func(*IntegrationUpdate)
	InteractionCreate                   []func(*InteractionCreate)
	InvalidSession                      []func(*InvalidSession)
	InviteCreate                        []func(*InviteCreate)
	InviteDelete                        []func(*InviteDelete)
	MessageCreate                       []func(*MessageCreate)
	MessageDelete                       []func(*MessageDelete)
	MessageDeleteBulk                   []func(*MessageDeleteBulk)
	MessageReactionAdd                  []func(*MessageReactionAdd)
	MessageReactionRemove               []func(*MessageReactionRemove)
	MessageReactionRemoveAll            []func(*MessageReactionRemoveAll)
	MessageReactionRemoveEmoji          []func(*MessageReactionRemoveEmoji)
	MessageUpdate                       []func(*MessageUpdate)
	PresenceUpdate                      []func(*PresenceUpdate)
	Ready                               []func(*Ready)
	Reconnect                           []func(*Reconnect)
	Resumed                             []func(*Resumed)
	StageInstanceCreate                 []func(*StageInstanceCreate)
	StageInstanceDelete                 []func(*StageInstanceDelete)
	StageInstanceUpdate                 []func(*StageInstanceUpdate)
	ThreadCreate                        []func(*ThreadCreate)
	ThreadDelete                        []func(*ThreadDelete)
	ThreadListSync                      []func(*ThreadListSync)
	ThreadMemberUpdate                  []func(*ThreadMemberUpdate)
	ThreadMembersUpdate                 []func(*ThreadMembersUpdate)
	ThreadUpdate                        []func(*ThreadUpdate)
	TypingStart                         []func(*TypingStart)
	UserUpdate                          []func(*UserUpdate)
	VoiceServerUpdate                   []func(*VoiceServerUpdate)
	VoiceStateUpdate                    []func(*VoiceStateUpdate)
	WebhooksUpdate                      []func(*WebhooksUpdate)
	mu                                  sync.RWMutex
}

// Handle adds an event handler for the given event to the bot.
func (bot *Client) Handle(eventname string, function interface{}) {
	bot.Handlers.mu.Lock()
	defer bot.Handlers.mu.Unlock()

	switch eventname {
	case FlagGatewayEventNameApplicationCommandPermissionsUpdate:
		if f, ok := function.(func(*ApplicationCommandPermissionsUpdate)); ok {
			bot.Handlers.ApplicationCommandPermissionsUpdate = append(bot.Handlers.ApplicationCommandPermissionsUpdate, f)
			return
		}

	case FlagGatewayEventNameChannelCreate:
		if f, ok := function.(func(*ChannelCreate)); ok {
			bot.Handlers.ChannelCreate = append(bot.Handlers.ChannelCreate, f)
			return
		}

	case FlagGatewayEventNameChannelDelete:
		if f, ok := function.(func(*ChannelDelete)); ok {
			bot.Handlers.ChannelDelete = append(bot.Handlers.ChannelDelete, f)
			return
		}

	case FlagGatewayEventNameChannelPinsUpdate:
		if f, ok := function.(func(*ChannelPinsUpdate)); ok {
			bot.Handlers.ChannelPinsUpdate = append(bot.Handlers.ChannelPinsUpdate, f)
			return
		}

	case FlagGatewayEventNameChannelUpdate:
		if f, ok := function.(func(*ChannelUpdate)); ok {
			bot.Handlers.ChannelUpdate = append(bot.Handlers.ChannelUpdate, f)
			return
		}

	case FlagGatewayEventNameGuildBanAdd:
		if f, ok := function.(func(*GuildBanAdd)); ok {
			bot.Handlers.GuildBanAdd = append(bot.Handlers.GuildBanAdd, f)
			return
		}

	case FlagGatewayEventNameGuildBanRemove:
		if f, ok := function.(func(*GuildBanRemove)); ok {
			bot.Handlers.GuildBanRemove = append(bot.Handlers.GuildBanRemove, f)
			return
		}

	case FlagGatewayEventNameGuildCreate:
		if f, ok := function.(func(*GuildCreate)); ok {
			bot.Handlers.GuildCreate = append(bot.Handlers.GuildCreate, f)
			return
		}

	case FlagGatewayEventNameGuildDelete:
		if f, ok := function.(func(*GuildDelete)); ok {
			bot.Handlers.GuildDelete = append(bot.Handlers.GuildDelete, f)
			return
		}

	case FlagGatewayEventNameGuildEmojisUpdate:
		if f, ok := function.(func(*GuildEmojisUpdate)); ok {
			bot.Handlers.GuildEmojisUpdate = append(bot.Handlers.GuildEmojisUpdate, f)
			return
		}

	case FlagGatewayEventNameGuildIntegrationsUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildIntegrationsUpdate)); ok {
			bot.Handlers.GuildIntegrationsUpdate = append(bot.Handlers.GuildIntegrationsUpdate, f)
			return
		}

	case FlagGatewayEventNameGuildMemberAdd:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildMemberAdd)); ok {
			bot.Handlers.GuildMemberAdd = append(bot.Handlers.GuildMemberAdd, f)
			return
		}

	case FlagGatewayEventNameGuildMemberRemove:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildMemberRemove)); ok {
			bot.Handlers.GuildMemberRemove = append(bot.Handlers.GuildMemberRemove, f)
			return
		}

	case FlagGatewayEventNameGuildMemberUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILDS|FlagIntentDIRECT_MESSAGES] {
			bot.Config.IntentSet[FlagIntentGUILDS|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Intents |= FlagIntentGUILDS | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*GuildMemberUpdate)); ok {
			bot.Handlers.GuildMemberUpdate = append(bot.Handlers.GuildMemberUpdate, f)
			return
		}

	case FlagGatewayEventNameGuildMembersChunk:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildMembersChunk)); ok {
			bot.Handlers.GuildMembersChunk = append(bot.Handlers.GuildMembersChunk, f)
			return
		}

	case FlagGatewayEventNameGuildRoleCreate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildRoleCreate)); ok {
			bot.Handlers.GuildRoleCreate = append(bot.Handlers.GuildRoleCreate, f)
			return
		}

	case FlagGatewayEventNameGuildRoleDelete:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildRoleDelete)); ok {
			bot.Handlers.GuildRoleDelete = append(bot.Handlers.GuildRoleDelete, f)
			return
		}

	case FlagGatewayEventNameGuildRoleUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildRoleUpdate)); ok {
			bot.Handlers.GuildRoleUpdate = append(bot.Handlers.GuildRoleUpdate, f)
			return
		}

	case FlagGatewayEventNameGuildScheduledEventCreate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildScheduledEventCreate)); ok {
			bot.Handlers.GuildScheduledEventCreate = append(bot.Handlers.GuildScheduledEventCreate, f)
			return
		}

	case FlagGatewayEventNameGuildScheduledEventDelete:
		if !bot.Config.IntentSet[FlagIntentGUILDS|FlagIntentGUILD_MEMBERS] {
			bot.Config.IntentSet[FlagIntentGUILDS|FlagIntentGUILD_MEMBERS] = true
			bot.Config.Intents |= FlagIntentGUILDS | FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*GuildScheduledEventDelete)); ok {
			bot.Handlers.GuildScheduledEventDelete = append(bot.Handlers.GuildScheduledEventDelete, f)
			return
		}

	case FlagGatewayEventNameGuildScheduledEventUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildScheduledEventUpdate)); ok {
			bot.Handlers.GuildScheduledEventUpdate = append(bot.Handlers.GuildScheduledEventUpdate, f)
			return
		}

	case FlagGatewayEventNameGuildScheduledEventUserAdd:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildScheduledEventUserAdd)); ok {
			bot.Handlers.GuildScheduledEventUserAdd = append(bot.Handlers.GuildScheduledEventUserAdd, f)
			return
		}

	case FlagGatewayEventNameGuildScheduledEventUserRemove:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildScheduledEventUserRemove)); ok {
			bot.Handlers.GuildScheduledEventUserRemove = append(bot.Handlers.GuildScheduledEventUserRemove, f)
			return
		}

	case FlagGatewayEventNameGuildStickersUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_BANS] {
			bot.Config.IntentSet[FlagIntentGUILD_BANS] = true
			bot.Config.Intents |= FlagIntentGUILD_BANS
		}

		if f, ok := function.(func(*GuildStickersUpdate)); ok {
			bot.Handlers.GuildStickersUpdate = append(bot.Handlers.GuildStickersUpdate, f)
			return
		}

	case FlagGatewayEventNameGuildUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_BANS] {
			bot.Config.IntentSet[FlagIntentGUILD_BANS] = true
			bot.Config.Intents |= FlagIntentGUILD_BANS
		}

		if f, ok := function.(func(*GuildUpdate)); ok {
			bot.Handlers.GuildUpdate = append(bot.Handlers.GuildUpdate, f)
			return
		}

	case FlagGatewayEventNameHello:
		if !bot.Config.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] {
			bot.Config.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] = true
			bot.Config.Intents |= FlagIntentGUILD_EMOJIS_AND_STICKERS
		}

		if f, ok := function.(func(*Hello)); ok {
			bot.Handlers.Hello = append(bot.Handlers.Hello, f)
			return
		}

	case FlagGatewayEventNameIntegrationCreate:
		if !bot.Config.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] {
			bot.Config.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] = true
			bot.Config.Intents |= FlagIntentGUILD_EMOJIS_AND_STICKERS
		}

		if f, ok := function.(func(*IntegrationCreate)); ok {
			bot.Handlers.IntegrationCreate = append(bot.Handlers.IntegrationCreate, f)
			return
		}

	case FlagGatewayEventNameIntegrationDelete:
		if !bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*IntegrationDelete)); ok {
			bot.Handlers.IntegrationDelete = append(bot.Handlers.IntegrationDelete, f)
			return
		}

	case FlagGatewayEventNameIntegrationUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_MEMBERS] {
			bot.Config.IntentSet[FlagIntentGUILD_MEMBERS] = true
			bot.Config.Intents |= FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*IntegrationUpdate)); ok {
			bot.Handlers.IntegrationUpdate = append(bot.Handlers.IntegrationUpdate, f)
			return
		}

	case FlagGatewayEventNameInteractionCreate:
		if !bot.Config.IntentSet[FlagIntentGUILD_MEMBERS] {
			bot.Config.IntentSet[FlagIntentGUILD_MEMBERS] = true
			bot.Config.Intents |= FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*InteractionCreate)); ok {
			bot.Handlers.InteractionCreate = append(bot.Handlers.InteractionCreate, f)
			return
		}

	case FlagGatewayEventNameInvalidSession:
		if !bot.Config.IntentSet[FlagIntentGUILD_MEMBERS] {
			bot.Config.IntentSet[FlagIntentGUILD_MEMBERS] = true
			bot.Config.Intents |= FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*InvalidSession)); ok {
			bot.Handlers.InvalidSession = append(bot.Handlers.InvalidSession, f)
			return
		}

	case FlagGatewayEventNameInviteCreate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*InviteCreate)); ok {
			bot.Handlers.InviteCreate = append(bot.Handlers.InviteCreate, f)
			return
		}

	case FlagGatewayEventNameInviteDelete:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*InviteDelete)); ok {
			bot.Handlers.InviteDelete = append(bot.Handlers.InviteDelete, f)
			return
		}

	case FlagGatewayEventNameMessageCreate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*MessageCreate)); ok {
			bot.Handlers.MessageCreate = append(bot.Handlers.MessageCreate, f)
			return
		}

	case FlagGatewayEventNameMessageDelete:
		if !bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*MessageDelete)); ok {
			bot.Handlers.MessageDelete = append(bot.Handlers.MessageDelete, f)
			return
		}

	case FlagGatewayEventNameMessageDeleteBulk:
		if !bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*MessageDeleteBulk)); ok {
			bot.Handlers.MessageDeleteBulk = append(bot.Handlers.MessageDeleteBulk, f)
			return
		}

	case FlagGatewayEventNameMessageReactionAdd:
		if !bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*MessageReactionAdd)); ok {
			bot.Handlers.MessageReactionAdd = append(bot.Handlers.MessageReactionAdd, f)
			return
		}

	case FlagGatewayEventNameMessageReactionRemove:
		if !bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*MessageReactionRemove)); ok {
			bot.Handlers.MessageReactionRemove = append(bot.Handlers.MessageReactionRemove, f)
			return
		}

	case FlagGatewayEventNameMessageReactionRemoveAll:
		if !bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*MessageReactionRemoveAll)); ok {
			bot.Handlers.MessageReactionRemoveAll = append(bot.Handlers.MessageReactionRemoveAll, f)
			return
		}

	case FlagGatewayEventNameMessageReactionRemoveEmoji:
		if !bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*MessageReactionRemoveEmoji)); ok {
			bot.Handlers.MessageReactionRemoveEmoji = append(bot.Handlers.MessageReactionRemoveEmoji, f)
			return
		}

	case FlagGatewayEventNameMessageUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*MessageUpdate)); ok {
			bot.Handlers.MessageUpdate = append(bot.Handlers.MessageUpdate, f)
			return
		}

	case FlagGatewayEventNamePresenceUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*PresenceUpdate)); ok {
			bot.Handlers.PresenceUpdate = append(bot.Handlers.PresenceUpdate, f)
			return
		}

	case FlagGatewayEventNameReady:
		if !bot.Config.IntentSet[FlagIntentGUILD_INVITES] {
			bot.Config.IntentSet[FlagIntentGUILD_INVITES] = true
			bot.Config.Intents |= FlagIntentGUILD_INVITES
		}

		if f, ok := function.(func(*Ready)); ok {
			bot.Handlers.Ready = append(bot.Handlers.Ready, f)
			return
		}

	case FlagGatewayEventNameReconnect:
		if !bot.Config.IntentSet[FlagIntentGUILD_INVITES] {
			bot.Config.IntentSet[FlagIntentGUILD_INVITES] = true
			bot.Config.Intents |= FlagIntentGUILD_INVITES
		}

		if f, ok := function.(func(*Reconnect)); ok {
			bot.Handlers.Reconnect = append(bot.Handlers.Reconnect, f)
			return
		}

	case FlagGatewayEventNameResumed:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGES | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*Resumed)); ok {
			bot.Handlers.Resumed = append(bot.Handlers.Resumed, f)
			return
		}

	case FlagGatewayEventNameStageInstanceCreate:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGES | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*StageInstanceCreate)); ok {
			bot.Handlers.StageInstanceCreate = append(bot.Handlers.StageInstanceCreate, f)
			return
		}

	case FlagGatewayEventNameStageInstanceDelete:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGES | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*StageInstanceDelete)); ok {
			bot.Handlers.StageInstanceDelete = append(bot.Handlers.StageInstanceDelete, f)
			return
		}

	case FlagGatewayEventNameStageInstanceUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGES] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGES] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGES
		}

		if f, ok := function.(func(*StageInstanceUpdate)); ok {
			bot.Handlers.StageInstanceUpdate = append(bot.Handlers.StageInstanceUpdate, f)
			return
		}

	case FlagGatewayEventNameThreadCreate:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*ThreadCreate)); ok {
			bot.Handlers.ThreadCreate = append(bot.Handlers.ThreadCreate, f)
			return
		}

	case FlagGatewayEventNameThreadDelete:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*ThreadDelete)); ok {
			bot.Handlers.ThreadDelete = append(bot.Handlers.ThreadDelete, f)
			return
		}

	case FlagGatewayEventNameThreadListSync:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*ThreadListSync)); ok {
			bot.Handlers.ThreadListSync = append(bot.Handlers.ThreadListSync, f)
			return
		}

	case FlagGatewayEventNameThreadMemberUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*ThreadMemberUpdate)); ok {
			bot.Handlers.ThreadMemberUpdate = append(bot.Handlers.ThreadMemberUpdate, f)
			return
		}

	case FlagGatewayEventNameThreadMembersUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_PRESENCES] {
			bot.Config.IntentSet[FlagIntentGUILD_PRESENCES] = true
			bot.Config.Intents |= FlagIntentGUILD_PRESENCES
		}

		if f, ok := function.(func(*ThreadMembersUpdate)); ok {
			bot.Handlers.ThreadMembersUpdate = append(bot.Handlers.ThreadMembersUpdate, f)
			return
		}

	case FlagGatewayEventNameThreadUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ThreadUpdate)); ok {
			bot.Handlers.ThreadUpdate = append(bot.Handlers.ThreadUpdate, f)
			return
		}

	case FlagGatewayEventNameTypingStart:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*TypingStart)); ok {
			bot.Handlers.TypingStart = append(bot.Handlers.TypingStart, f)
			return
		}

	case FlagGatewayEventNameUserUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILDS] {
			bot.Config.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*UserUpdate)); ok {
			bot.Handlers.UserUpdate = append(bot.Handlers.UserUpdate, f)
			return
		}

	case FlagGatewayEventNameVoiceServerUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_TYPING] {
			bot.Config.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_TYPING] = true
			bot.Config.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_TYPING
		}

		if f, ok := function.(func(*VoiceServerUpdate)); ok {
			bot.Handlers.VoiceServerUpdate = append(bot.Handlers.VoiceServerUpdate, f)
			return
		}

	case FlagGatewayEventNameVoiceStateUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_VOICE_STATES] {
			bot.Config.IntentSet[FlagIntentGUILD_VOICE_STATES] = true
			bot.Config.Intents |= FlagIntentGUILD_VOICE_STATES
		}

		if f, ok := function.(func(*VoiceStateUpdate)); ok {
			bot.Handlers.VoiceStateUpdate = append(bot.Handlers.VoiceStateUpdate, f)
			return
		}

	case FlagGatewayEventNameWebhooksUpdate:
		if !bot.Config.IntentSet[FlagIntentGUILD_WEBHOOKS] {
			bot.Config.IntentSet[FlagIntentGUILD_WEBHOOKS] = true
			bot.Config.Intents |= FlagIntentGUILD_WEBHOOKS
		}

		if f, ok := function.(func(*WebhooksUpdate)); ok {
			bot.Handlers.WebhooksUpdate = append(bot.Handlers.WebhooksUpdate, f)
			return
		}
	}

	log.Printf("Event Handler for %s was not added.", eventname)
}

// handle handles an event using its name and data.
func (bot *Client) handle(eventname string, data json.RawMessage) {
	bot.Handlers.mu.RLock()
	defer bot.Handlers.mu.RUnlock()

	switch eventname {
	case FlagGatewayEventNameApplicationCommandPermissionsUpdate:
		var event *ApplicationCommandPermissionsUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ApplicationCommandPermissionsUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameChannelCreate:
		var event *ChannelCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ChannelCreate {
			go handler(event)
		}

	case FlagGatewayEventNameChannelDelete:
		var event *ChannelDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ChannelDelete {
			go handler(event)
		}

	case FlagGatewayEventNameChannelPinsUpdate:
		var event *ChannelPinsUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ChannelPinsUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameChannelUpdate:
		var event *ChannelUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ChannelUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildBanAdd:
		var event *GuildBanAdd
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildBanAdd {
			go handler(event)
		}

	case FlagGatewayEventNameGuildBanRemove:
		var event *GuildBanRemove
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildBanRemove {
			go handler(event)
		}

	case FlagGatewayEventNameGuildCreate:
		var event *GuildCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildCreate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildDelete:
		var event *GuildDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildDelete {
			go handler(event)
		}

	case FlagGatewayEventNameGuildEmojisUpdate:
		var event *GuildEmojisUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildEmojisUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildIntegrationsUpdate:
		var event *GuildIntegrationsUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildIntegrationsUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMemberAdd:
		var event *GuildMemberAdd
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildMemberAdd {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMemberRemove:
		var event *GuildMemberRemove
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildMemberRemove {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMemberUpdate:
		var event *GuildMemberUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildMemberUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMembersChunk:
		var event *GuildMembersChunk
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildMembersChunk {
			go handler(event)
		}

	case FlagGatewayEventNameGuildRoleCreate:
		var event *GuildRoleCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildRoleCreate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildRoleDelete:
		var event *GuildRoleDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildRoleDelete {
			go handler(event)
		}

	case FlagGatewayEventNameGuildRoleUpdate:
		var event *GuildRoleUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildRoleUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventCreate:
		var event *GuildScheduledEventCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventCreate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventDelete:
		var event *GuildScheduledEventDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventDelete {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventUpdate:
		var event *GuildScheduledEventUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventUserAdd:
		var event *GuildScheduledEventUserAdd
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventUserAdd {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventUserRemove:
		var event *GuildScheduledEventUserRemove
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventUserRemove {
			go handler(event)
		}

	case FlagGatewayEventNameGuildStickersUpdate:
		var event *GuildStickersUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildStickersUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildUpdate:
		var event *GuildUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.GuildUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameHello:
		var event *Hello
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.Hello {
			go handler(event)
		}

	case FlagGatewayEventNameIntegrationCreate:
		var event *IntegrationCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.IntegrationCreate {
			go handler(event)
		}

	case FlagGatewayEventNameIntegrationDelete:
		var event *IntegrationDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.IntegrationDelete {
			go handler(event)
		}

	case FlagGatewayEventNameIntegrationUpdate:
		var event *IntegrationUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.IntegrationUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameInteractionCreate:
		var event *InteractionCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.InteractionCreate {
			go handler(event)
		}

	case FlagGatewayEventNameInvalidSession:
		var event *InvalidSession
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.InvalidSession {
			go handler(event)
		}

	case FlagGatewayEventNameInviteCreate:
		var event *InviteCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.InviteCreate {
			go handler(event)
		}

	case FlagGatewayEventNameInviteDelete:
		var event *InviteDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.InviteDelete {
			go handler(event)
		}

	case FlagGatewayEventNameMessageCreate:
		var event *MessageCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageCreate {
			go handler(event)
		}

	case FlagGatewayEventNameMessageDelete:
		var event *MessageDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageDelete {
			go handler(event)
		}

	case FlagGatewayEventNameMessageDeleteBulk:
		var event *MessageDeleteBulk
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageDeleteBulk {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionAdd:
		var event *MessageReactionAdd
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageReactionAdd {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionRemove:
		var event *MessageReactionRemove
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageReactionRemove {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionRemoveAll:
		var event *MessageReactionRemoveAll
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageReactionRemoveAll {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionRemoveEmoji:
		var event *MessageReactionRemoveEmoji
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageReactionRemoveEmoji {
			go handler(event)
		}

	case FlagGatewayEventNameMessageUpdate:
		var event *MessageUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.MessageUpdate {
			go handler(event)
		}

	case FlagGatewayEventNamePresenceUpdate:
		var event *PresenceUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.PresenceUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameReady:
		var event *Ready
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.Ready {
			go handler(event)
		}

	case FlagGatewayEventNameReconnect:
		var event *Reconnect
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.Reconnect {
			go handler(event)
		}

	case FlagGatewayEventNameResumed:
		var event *Resumed
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.Resumed {
			go handler(event)
		}

	case FlagGatewayEventNameStageInstanceCreate:
		var event *StageInstanceCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.StageInstanceCreate {
			go handler(event)
		}

	case FlagGatewayEventNameStageInstanceDelete:
		var event *StageInstanceDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.StageInstanceDelete {
			go handler(event)
		}

	case FlagGatewayEventNameStageInstanceUpdate:
		var event *StageInstanceUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.StageInstanceUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadCreate:
		var event *ThreadCreate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ThreadCreate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadDelete:
		var event *ThreadDelete
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ThreadDelete {
			go handler(event)
		}

	case FlagGatewayEventNameThreadListSync:
		var event *ThreadListSync
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ThreadListSync {
			go handler(event)
		}

	case FlagGatewayEventNameThreadMemberUpdate:
		var event *ThreadMemberUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ThreadMemberUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadMembersUpdate:
		var event *ThreadMembersUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ThreadMembersUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadUpdate:
		var event *ThreadUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.ThreadUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameTypingStart:
		var event *TypingStart
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.TypingStart {
			go handler(event)
		}

	case FlagGatewayEventNameUserUpdate:
		var event *UserUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.UserUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameVoiceServerUpdate:
		var event *VoiceServerUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.VoiceServerUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameVoiceStateUpdate:
		var event *VoiceStateUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.VoiceStateUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameWebhooksUpdate:
		var event *WebhooksUpdate
		if err := json.Unmarshal(data, event); err != nil {
			log.Printf(ErrLogEventUnmarshal, eventname, err)
			return
		}

		for _, handler := range bot.Handlers.WebhooksUpdate {
			go handler(event)
		}
	}
}
