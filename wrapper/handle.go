// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package wrapper

import (
	"encoding/json"
	"fmt"
	"log"
	"sync"
)

// Handlers represents a bot's event handlers.
type Handlers struct {
	Hello                               []func(*Hello)
	Ready                               []func(*Ready)
	Resumed                             []func(*Resumed)
	Reconnect                           []func(*Reconnect)
	InvalidSession                      []func(*InvalidSession)
	ApplicationCommandPermissionsUpdate []func(*ApplicationCommandPermissionsUpdate)
	AutoModerationRuleCreate            []func(*AutoModerationRuleCreate)
	AutoModerationRuleUpdate            []func(*AutoModerationRuleUpdate)
	AutoModerationRuleDelete            []func(*AutoModerationRuleDelete)
	AutoModerationActionExecution       []func(*AutoModerationActionExecution)
	InteractionCreate                   []func(*InteractionCreate)
	VoiceServerUpdate                   []func(*VoiceServerUpdate)
	GuildMembersChunk                   []func(*GuildMembersChunk)
	UserUpdate                          []func(*UserUpdate)
	ChannelCreate                       []func(*ChannelCreate)
	ChannelUpdate                       []func(*ChannelUpdate)
	ChannelDelete                       []func(*ChannelDelete)
	ChannelPinsUpdate                   []func(*ChannelPinsUpdate)
	ThreadCreate                        []func(*ThreadCreate)
	ThreadUpdate                        []func(*ThreadUpdate)
	ThreadDelete                        []func(*ThreadDelete)
	ThreadListSync                      []func(*ThreadListSync)
	ThreadMemberUpdate                  []func(*ThreadMemberUpdate)
	ThreadMembersUpdate                 []func(*ThreadMembersUpdate)
	GuildCreate                         []func(*GuildCreate)
	GuildUpdate                         []func(*GuildUpdate)
	GuildDelete                         []func(*GuildDelete)
	GuildBanAdd                         []func(*GuildBanAdd)
	GuildBanRemove                      []func(*GuildBanRemove)
	GuildEmojisUpdate                   []func(*GuildEmojisUpdate)
	GuildStickersUpdate                 []func(*GuildStickersUpdate)
	GuildIntegrationsUpdate             []func(*GuildIntegrationsUpdate)
	GuildMemberAdd                      []func(*GuildMemberAdd)
	GuildMemberRemove                   []func(*GuildMemberRemove)
	GuildMemberUpdate                   []func(*GuildMemberUpdate)
	GuildRoleCreate                     []func(*GuildRoleCreate)
	GuildRoleUpdate                     []func(*GuildRoleUpdate)
	GuildRoleDelete                     []func(*GuildRoleDelete)
	GuildScheduledEventCreate           []func(*GuildScheduledEventCreate)
	GuildScheduledEventUpdate           []func(*GuildScheduledEventUpdate)
	GuildScheduledEventDelete           []func(*GuildScheduledEventDelete)
	GuildScheduledEventUserAdd          []func(*GuildScheduledEventUserAdd)
	GuildScheduledEventUserRemove       []func(*GuildScheduledEventUserRemove)
	IntegrationCreate                   []func(*IntegrationCreate)
	IntegrationUpdate                   []func(*IntegrationUpdate)
	IntegrationDelete                   []func(*IntegrationDelete)
	InviteCreate                        []func(*InviteCreate)
	InviteDelete                        []func(*InviteDelete)
	MessageCreate                       []func(*MessageCreate)
	MessageUpdate                       []func(*MessageUpdate)
	MessageDelete                       []func(*MessageDelete)
	MessageDeleteBulk                   []func(*MessageDeleteBulk)
	MessageReactionAdd                  []func(*MessageReactionAdd)
	MessageReactionRemove               []func(*MessageReactionRemove)
	MessageReactionRemoveAll            []func(*MessageReactionRemoveAll)
	MessageReactionRemoveEmoji          []func(*MessageReactionRemoveEmoji)
	PresenceUpdate                      []func(*PresenceUpdate)
	StageInstanceCreate                 []func(*StageInstanceCreate)
	StageInstanceDelete                 []func(*StageInstanceDelete)
	StageInstanceUpdate                 []func(*StageInstanceUpdate)
	TypingStart                         []func(*TypingStart)
	VoiceStateUpdate                    []func(*VoiceStateUpdate)
	WebhooksUpdate                      []func(*WebhooksUpdate)
	mu                                  sync.RWMutex
}

// Handle adds an event handler for the given event to the bot.
func (bot *Client) Handle(eventname string, function interface{}) error {
	bot.Handlers.mu.Lock()
	defer bot.Handlers.mu.Unlock()

	switch eventname {
	case FlagGatewayEventNameHello:
		if f, ok := function.(func(*Hello)); ok {
			bot.Handlers.Hello = append(bot.Handlers.Hello, f)
			return nil
		}

	case FlagGatewayEventNameReady:
		if f, ok := function.(func(*Ready)); ok {
			bot.Handlers.Ready = append(bot.Handlers.Ready, f)
			return nil
		}

	case FlagGatewayEventNameResumed:
		if f, ok := function.(func(*Resumed)); ok {
			bot.Handlers.Resumed = append(bot.Handlers.Resumed, f)
			return nil
		}

	case FlagGatewayEventNameReconnect:
		if f, ok := function.(func(*Reconnect)); ok {
			bot.Handlers.Reconnect = append(bot.Handlers.Reconnect, f)
			return nil
		}

	case FlagGatewayEventNameInvalidSession:
		if f, ok := function.(func(*InvalidSession)); ok {
			bot.Handlers.InvalidSession = append(bot.Handlers.InvalidSession, f)
			return nil
		}

	case FlagGatewayEventNameApplicationCommandPermissionsUpdate:
		if f, ok := function.(func(*ApplicationCommandPermissionsUpdate)); ok {
			bot.Handlers.ApplicationCommandPermissionsUpdate = append(bot.Handlers.ApplicationCommandPermissionsUpdate, f)
			return nil
		}

	case FlagGatewayEventNameAutoModerationRuleCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_CONFIGURATION] {
			bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_CONFIGURATION] = true
			bot.Config.Gateway.Intents |= FlagIntentAUTO_MODERATION_CONFIGURATION
		}

		if f, ok := function.(func(*AutoModerationRuleCreate)); ok {
			bot.Handlers.AutoModerationRuleCreate = append(bot.Handlers.AutoModerationRuleCreate, f)
			return nil
		}

	case FlagGatewayEventNameAutoModerationRuleUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_CONFIGURATION] {
			bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_CONFIGURATION] = true
			bot.Config.Gateway.Intents |= FlagIntentAUTO_MODERATION_CONFIGURATION
		}

		if f, ok := function.(func(*AutoModerationRuleUpdate)); ok {
			bot.Handlers.AutoModerationRuleUpdate = append(bot.Handlers.AutoModerationRuleUpdate, f)
			return nil
		}

	case FlagGatewayEventNameAutoModerationRuleDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_CONFIGURATION] {
			bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_CONFIGURATION] = true
			bot.Config.Gateway.Intents |= FlagIntentAUTO_MODERATION_CONFIGURATION
		}

		if f, ok := function.(func(*AutoModerationRuleDelete)); ok {
			bot.Handlers.AutoModerationRuleDelete = append(bot.Handlers.AutoModerationRuleDelete, f)
			return nil
		}

	case FlagGatewayEventNameAutoModerationActionExecution:
		if !bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_EXECUTION] {
			bot.Config.Gateway.IntentSet[FlagIntentAUTO_MODERATION_EXECUTION] = true
			bot.Config.Gateway.Intents |= FlagIntentAUTO_MODERATION_EXECUTION
		}

		if f, ok := function.(func(*AutoModerationActionExecution)); ok {
			bot.Handlers.AutoModerationActionExecution = append(bot.Handlers.AutoModerationActionExecution, f)
			return nil
		}

	case FlagGatewayEventNameInteractionCreate:
		if f, ok := function.(func(*InteractionCreate)); ok {
			bot.Handlers.InteractionCreate = append(bot.Handlers.InteractionCreate, f)
			return nil
		}

	case FlagGatewayEventNameVoiceServerUpdate:
		if f, ok := function.(func(*VoiceServerUpdate)); ok {
			bot.Handlers.VoiceServerUpdate = append(bot.Handlers.VoiceServerUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildMembersChunk:
		if f, ok := function.(func(*GuildMembersChunk)); ok {
			bot.Handlers.GuildMembersChunk = append(bot.Handlers.GuildMembersChunk, f)
			return nil
		}

	case FlagGatewayEventNameUserUpdate:
		if f, ok := function.(func(*UserUpdate)); ok {
			bot.Handlers.UserUpdate = append(bot.Handlers.UserUpdate, f)
			return nil
		}

	case FlagGatewayEventNameChannelCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ChannelCreate)); ok {
			bot.Handlers.ChannelCreate = append(bot.Handlers.ChannelCreate, f)
			return nil
		}

	case FlagGatewayEventNameChannelUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ChannelUpdate)); ok {
			bot.Handlers.ChannelUpdate = append(bot.Handlers.ChannelUpdate, f)
			return nil
		}

	case FlagGatewayEventNameChannelDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ChannelDelete)); ok {
			bot.Handlers.ChannelDelete = append(bot.Handlers.ChannelDelete, f)
			return nil
		}

	case FlagGatewayEventNameChannelPinsUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS|FlagIntentDIRECT_MESSAGES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*ChannelPinsUpdate)); ok {
			bot.Handlers.ChannelPinsUpdate = append(bot.Handlers.ChannelPinsUpdate, f)
			return nil
		}

	case FlagGatewayEventNameThreadCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ThreadCreate)); ok {
			bot.Handlers.ThreadCreate = append(bot.Handlers.ThreadCreate, f)
			return nil
		}

	case FlagGatewayEventNameThreadUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ThreadUpdate)); ok {
			bot.Handlers.ThreadUpdate = append(bot.Handlers.ThreadUpdate, f)
			return nil
		}

	case FlagGatewayEventNameThreadDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ThreadDelete)); ok {
			bot.Handlers.ThreadDelete = append(bot.Handlers.ThreadDelete, f)
			return nil
		}

	case FlagGatewayEventNameThreadListSync:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ThreadListSync)); ok {
			bot.Handlers.ThreadListSync = append(bot.Handlers.ThreadListSync, f)
			return nil
		}

	case FlagGatewayEventNameThreadMemberUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*ThreadMemberUpdate)); ok {
			bot.Handlers.ThreadMemberUpdate = append(bot.Handlers.ThreadMemberUpdate, f)
			return nil
		}

	case FlagGatewayEventNameThreadMembersUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS|FlagIntentGUILD_MEMBERS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS|FlagIntentGUILD_MEMBERS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS | FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*ThreadMembersUpdate)); ok {
			bot.Handlers.ThreadMembersUpdate = append(bot.Handlers.ThreadMembersUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildCreate)); ok {
			bot.Handlers.GuildCreate = append(bot.Handlers.GuildCreate, f)
			return nil
		}

	case FlagGatewayEventNameGuildUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildUpdate)); ok {
			bot.Handlers.GuildUpdate = append(bot.Handlers.GuildUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildDelete)); ok {
			bot.Handlers.GuildDelete = append(bot.Handlers.GuildDelete, f)
			return nil
		}

	case FlagGatewayEventNameGuildBanAdd:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_BANS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_BANS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_BANS
		}

		if f, ok := function.(func(*GuildBanAdd)); ok {
			bot.Handlers.GuildBanAdd = append(bot.Handlers.GuildBanAdd, f)
			return nil
		}

	case FlagGatewayEventNameGuildBanRemove:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_BANS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_BANS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_BANS
		}

		if f, ok := function.(func(*GuildBanRemove)); ok {
			bot.Handlers.GuildBanRemove = append(bot.Handlers.GuildBanRemove, f)
			return nil
		}

	case FlagGatewayEventNameGuildEmojisUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_EMOJIS_AND_STICKERS
		}

		if f, ok := function.(func(*GuildEmojisUpdate)); ok {
			bot.Handlers.GuildEmojisUpdate = append(bot.Handlers.GuildEmojisUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildStickersUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_EMOJIS_AND_STICKERS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_EMOJIS_AND_STICKERS
		}

		if f, ok := function.(func(*GuildStickersUpdate)); ok {
			bot.Handlers.GuildStickersUpdate = append(bot.Handlers.GuildStickersUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildIntegrationsUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*GuildIntegrationsUpdate)); ok {
			bot.Handlers.GuildIntegrationsUpdate = append(bot.Handlers.GuildIntegrationsUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildMemberAdd:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MEMBERS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MEMBERS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*GuildMemberAdd)); ok {
			bot.Handlers.GuildMemberAdd = append(bot.Handlers.GuildMemberAdd, f)
			return nil
		}

	case FlagGatewayEventNameGuildMemberRemove:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MEMBERS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MEMBERS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*GuildMemberRemove)); ok {
			bot.Handlers.GuildMemberRemove = append(bot.Handlers.GuildMemberRemove, f)
			return nil
		}

	case FlagGatewayEventNameGuildMemberUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MEMBERS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MEMBERS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MEMBERS
		}

		if f, ok := function.(func(*GuildMemberUpdate)); ok {
			bot.Handlers.GuildMemberUpdate = append(bot.Handlers.GuildMemberUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildRoleCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildRoleCreate)); ok {
			bot.Handlers.GuildRoleCreate = append(bot.Handlers.GuildRoleCreate, f)
			return nil
		}

	case FlagGatewayEventNameGuildRoleUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildRoleUpdate)); ok {
			bot.Handlers.GuildRoleUpdate = append(bot.Handlers.GuildRoleUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildRoleDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*GuildRoleDelete)); ok {
			bot.Handlers.GuildRoleDelete = append(bot.Handlers.GuildRoleDelete, f)
			return nil
		}

	case FlagGatewayEventNameGuildScheduledEventCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*GuildScheduledEventCreate)); ok {
			bot.Handlers.GuildScheduledEventCreate = append(bot.Handlers.GuildScheduledEventCreate, f)
			return nil
		}

	case FlagGatewayEventNameGuildScheduledEventUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*GuildScheduledEventUpdate)); ok {
			bot.Handlers.GuildScheduledEventUpdate = append(bot.Handlers.GuildScheduledEventUpdate, f)
			return nil
		}

	case FlagGatewayEventNameGuildScheduledEventDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*GuildScheduledEventDelete)); ok {
			bot.Handlers.GuildScheduledEventDelete = append(bot.Handlers.GuildScheduledEventDelete, f)
			return nil
		}

	case FlagGatewayEventNameGuildScheduledEventUserAdd:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*GuildScheduledEventUserAdd)); ok {
			bot.Handlers.GuildScheduledEventUserAdd = append(bot.Handlers.GuildScheduledEventUserAdd, f)
			return nil
		}

	case FlagGatewayEventNameGuildScheduledEventUserRemove:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_SCHEDULED_EVENTS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_SCHEDULED_EVENTS
		}

		if f, ok := function.(func(*GuildScheduledEventUserRemove)); ok {
			bot.Handlers.GuildScheduledEventUserRemove = append(bot.Handlers.GuildScheduledEventUserRemove, f)
			return nil
		}

	case FlagGatewayEventNameIntegrationCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*IntegrationCreate)); ok {
			bot.Handlers.IntegrationCreate = append(bot.Handlers.IntegrationCreate, f)
			return nil
		}

	case FlagGatewayEventNameIntegrationUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*IntegrationUpdate)); ok {
			bot.Handlers.IntegrationUpdate = append(bot.Handlers.IntegrationUpdate, f)
			return nil
		}

	case FlagGatewayEventNameIntegrationDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_INTEGRATIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_INTEGRATIONS
		}

		if f, ok := function.(func(*IntegrationDelete)); ok {
			bot.Handlers.IntegrationDelete = append(bot.Handlers.IntegrationDelete, f)
			return nil
		}

	case FlagGatewayEventNameInviteCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_INVITES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_INVITES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_INVITES
		}

		if f, ok := function.(func(*InviteCreate)); ok {
			bot.Handlers.InviteCreate = append(bot.Handlers.InviteCreate, f)
			return nil
		}

	case FlagGatewayEventNameInviteDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_INVITES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_INVITES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_INVITES
		}

		if f, ok := function.(func(*InviteDelete)); ok {
			bot.Handlers.InviteDelete = append(bot.Handlers.InviteDelete, f)
			return nil
		}

	case FlagGatewayEventNameMessageCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGES | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*MessageCreate)); ok {
			bot.Handlers.MessageCreate = append(bot.Handlers.MessageCreate, f)
			return nil
		}

	case FlagGatewayEventNameMessageUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGES | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*MessageUpdate)); ok {
			bot.Handlers.MessageUpdate = append(bot.Handlers.MessageUpdate, f)
			return nil
		}

	case FlagGatewayEventNameMessageDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES|FlagIntentDIRECT_MESSAGES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGES | FlagIntentDIRECT_MESSAGES
		}

		if f, ok := function.(func(*MessageDelete)); ok {
			bot.Handlers.MessageDelete = append(bot.Handlers.MessageDelete, f)
			return nil
		}

	case FlagGatewayEventNameMessageDeleteBulk:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGES
		}

		if f, ok := function.(func(*MessageDeleteBulk)); ok {
			bot.Handlers.MessageDeleteBulk = append(bot.Handlers.MessageDeleteBulk, f)
			return nil
		}

	case FlagGatewayEventNameMessageReactionAdd:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*MessageReactionAdd)); ok {
			bot.Handlers.MessageReactionAdd = append(bot.Handlers.MessageReactionAdd, f)
			return nil
		}

	case FlagGatewayEventNameMessageReactionRemove:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*MessageReactionRemove)); ok {
			bot.Handlers.MessageReactionRemove = append(bot.Handlers.MessageReactionRemove, f)
			return nil
		}

	case FlagGatewayEventNameMessageReactionRemoveAll:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*MessageReactionRemoveAll)); ok {
			bot.Handlers.MessageReactionRemoveAll = append(bot.Handlers.MessageReactionRemoveAll, f)
			return nil
		}

	case FlagGatewayEventNameMessageReactionRemoveEmoji:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_REACTIONS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_REACTIONS
		}

		if f, ok := function.(func(*MessageReactionRemoveEmoji)); ok {
			bot.Handlers.MessageReactionRemoveEmoji = append(bot.Handlers.MessageReactionRemoveEmoji, f)
			return nil
		}

	case FlagGatewayEventNamePresenceUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_PRESENCES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_PRESENCES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_PRESENCES
		}

		if f, ok := function.(func(*PresenceUpdate)); ok {
			bot.Handlers.PresenceUpdate = append(bot.Handlers.PresenceUpdate, f)
			return nil
		}

	case FlagGatewayEventNameStageInstanceCreate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*StageInstanceCreate)); ok {
			bot.Handlers.StageInstanceCreate = append(bot.Handlers.StageInstanceCreate, f)
			return nil
		}

	case FlagGatewayEventNameStageInstanceDelete:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*StageInstanceDelete)); ok {
			bot.Handlers.StageInstanceDelete = append(bot.Handlers.StageInstanceDelete, f)
			return nil
		}

	case FlagGatewayEventNameStageInstanceUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILDS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILDS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILDS
		}

		if f, ok := function.(func(*StageInstanceUpdate)); ok {
			bot.Handlers.StageInstanceUpdate = append(bot.Handlers.StageInstanceUpdate, f)
			return nil
		}

	case FlagGatewayEventNameTypingStart:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_TYPING] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_MESSAGE_REACTIONS|FlagIntentDIRECT_MESSAGE_TYPING] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_MESSAGE_REACTIONS | FlagIntentDIRECT_MESSAGE_TYPING
		}

		if f, ok := function.(func(*TypingStart)); ok {
			bot.Handlers.TypingStart = append(bot.Handlers.TypingStart, f)
			return nil
		}

	case FlagGatewayEventNameVoiceStateUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_VOICE_STATES] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_VOICE_STATES] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_VOICE_STATES
		}

		if f, ok := function.(func(*VoiceStateUpdate)); ok {
			bot.Handlers.VoiceStateUpdate = append(bot.Handlers.VoiceStateUpdate, f)
			return nil
		}

	case FlagGatewayEventNameWebhooksUpdate:
		if !bot.Config.Gateway.IntentSet[FlagIntentGUILD_WEBHOOKS] {
			bot.Config.Gateway.IntentSet[FlagIntentGUILD_WEBHOOKS] = true
			bot.Config.Gateway.Intents |= FlagIntentGUILD_WEBHOOKS
		}

		if f, ok := function.(func(*WebhooksUpdate)); ok {
			bot.Handlers.WebhooksUpdate = append(bot.Handlers.WebhooksUpdate, f)
			return nil
		}
	}

	return fmt.Errorf("event handler for %s was not added.", eventname)
}

// Remove removes the event handler at the given index from the bot.
// This function does NOT remove intents automatically.
func (bot *Client) Remove(eventname string, index int) error {
	bot.Handlers.mu.Lock()
	defer bot.Handlers.mu.Unlock()

	switch eventname {
	case FlagGatewayEventNameHello:
		if len(bot.Handlers.Hello) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.Hello = append(bot.Handlers.Hello[:index], bot.Handlers.Hello[index+1:]...)
		return nil

	case FlagGatewayEventNameReady:
		if len(bot.Handlers.Ready) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.Ready = append(bot.Handlers.Ready[:index], bot.Handlers.Ready[index+1:]...)
		return nil

	case FlagGatewayEventNameResumed:
		if len(bot.Handlers.Resumed) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.Resumed = append(bot.Handlers.Resumed[:index], bot.Handlers.Resumed[index+1:]...)
		return nil

	case FlagGatewayEventNameReconnect:
		if len(bot.Handlers.Reconnect) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.Reconnect = append(bot.Handlers.Reconnect[:index], bot.Handlers.Reconnect[index+1:]...)
		return nil

	case FlagGatewayEventNameInvalidSession:
		if len(bot.Handlers.InvalidSession) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.InvalidSession = append(bot.Handlers.InvalidSession[:index], bot.Handlers.InvalidSession[index+1:]...)
		return nil

	case FlagGatewayEventNameApplicationCommandPermissionsUpdate:
		if len(bot.Handlers.ApplicationCommandPermissionsUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ApplicationCommandPermissionsUpdate = append(bot.Handlers.ApplicationCommandPermissionsUpdate[:index], bot.Handlers.ApplicationCommandPermissionsUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameAutoModerationRuleCreate:
		if len(bot.Handlers.AutoModerationRuleCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.AutoModerationRuleCreate = append(bot.Handlers.AutoModerationRuleCreate[:index], bot.Handlers.AutoModerationRuleCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameAutoModerationRuleUpdate:
		if len(bot.Handlers.AutoModerationRuleUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.AutoModerationRuleUpdate = append(bot.Handlers.AutoModerationRuleUpdate[:index], bot.Handlers.AutoModerationRuleUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameAutoModerationRuleDelete:
		if len(bot.Handlers.AutoModerationRuleDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.AutoModerationRuleDelete = append(bot.Handlers.AutoModerationRuleDelete[:index], bot.Handlers.AutoModerationRuleDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameAutoModerationActionExecution:
		if len(bot.Handlers.AutoModerationActionExecution) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.AutoModerationActionExecution = append(bot.Handlers.AutoModerationActionExecution[:index], bot.Handlers.AutoModerationActionExecution[index+1:]...)
		return nil

	case FlagGatewayEventNameInteractionCreate:
		if len(bot.Handlers.InteractionCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.InteractionCreate = append(bot.Handlers.InteractionCreate[:index], bot.Handlers.InteractionCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameVoiceServerUpdate:
		if len(bot.Handlers.VoiceServerUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.VoiceServerUpdate = append(bot.Handlers.VoiceServerUpdate[:index], bot.Handlers.VoiceServerUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildMembersChunk:
		if len(bot.Handlers.GuildMembersChunk) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildMembersChunk = append(bot.Handlers.GuildMembersChunk[:index], bot.Handlers.GuildMembersChunk[index+1:]...)
		return nil

	case FlagGatewayEventNameUserUpdate:
		if len(bot.Handlers.UserUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.UserUpdate = append(bot.Handlers.UserUpdate[:index], bot.Handlers.UserUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameChannelCreate:
		if len(bot.Handlers.ChannelCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ChannelCreate = append(bot.Handlers.ChannelCreate[:index], bot.Handlers.ChannelCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameChannelUpdate:
		if len(bot.Handlers.ChannelUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ChannelUpdate = append(bot.Handlers.ChannelUpdate[:index], bot.Handlers.ChannelUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameChannelDelete:
		if len(bot.Handlers.ChannelDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ChannelDelete = append(bot.Handlers.ChannelDelete[:index], bot.Handlers.ChannelDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameChannelPinsUpdate:
		if len(bot.Handlers.ChannelPinsUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ChannelPinsUpdate = append(bot.Handlers.ChannelPinsUpdate[:index], bot.Handlers.ChannelPinsUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameThreadCreate:
		if len(bot.Handlers.ThreadCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ThreadCreate = append(bot.Handlers.ThreadCreate[:index], bot.Handlers.ThreadCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameThreadUpdate:
		if len(bot.Handlers.ThreadUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ThreadUpdate = append(bot.Handlers.ThreadUpdate[:index], bot.Handlers.ThreadUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameThreadDelete:
		if len(bot.Handlers.ThreadDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ThreadDelete = append(bot.Handlers.ThreadDelete[:index], bot.Handlers.ThreadDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameThreadListSync:
		if len(bot.Handlers.ThreadListSync) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ThreadListSync = append(bot.Handlers.ThreadListSync[:index], bot.Handlers.ThreadListSync[index+1:]...)
		return nil

	case FlagGatewayEventNameThreadMemberUpdate:
		if len(bot.Handlers.ThreadMemberUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ThreadMemberUpdate = append(bot.Handlers.ThreadMemberUpdate[:index], bot.Handlers.ThreadMemberUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameThreadMembersUpdate:
		if len(bot.Handlers.ThreadMembersUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.ThreadMembersUpdate = append(bot.Handlers.ThreadMembersUpdate[:index], bot.Handlers.ThreadMembersUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildCreate:
		if len(bot.Handlers.GuildCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildCreate = append(bot.Handlers.GuildCreate[:index], bot.Handlers.GuildCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildUpdate:
		if len(bot.Handlers.GuildUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildUpdate = append(bot.Handlers.GuildUpdate[:index], bot.Handlers.GuildUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildDelete:
		if len(bot.Handlers.GuildDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildDelete = append(bot.Handlers.GuildDelete[:index], bot.Handlers.GuildDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildBanAdd:
		if len(bot.Handlers.GuildBanAdd) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildBanAdd = append(bot.Handlers.GuildBanAdd[:index], bot.Handlers.GuildBanAdd[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildBanRemove:
		if len(bot.Handlers.GuildBanRemove) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildBanRemove = append(bot.Handlers.GuildBanRemove[:index], bot.Handlers.GuildBanRemove[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildEmojisUpdate:
		if len(bot.Handlers.GuildEmojisUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildEmojisUpdate = append(bot.Handlers.GuildEmojisUpdate[:index], bot.Handlers.GuildEmojisUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildStickersUpdate:
		if len(bot.Handlers.GuildStickersUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildStickersUpdate = append(bot.Handlers.GuildStickersUpdate[:index], bot.Handlers.GuildStickersUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildIntegrationsUpdate:
		if len(bot.Handlers.GuildIntegrationsUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildIntegrationsUpdate = append(bot.Handlers.GuildIntegrationsUpdate[:index], bot.Handlers.GuildIntegrationsUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildMemberAdd:
		if len(bot.Handlers.GuildMemberAdd) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildMemberAdd = append(bot.Handlers.GuildMemberAdd[:index], bot.Handlers.GuildMemberAdd[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildMemberRemove:
		if len(bot.Handlers.GuildMemberRemove) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildMemberRemove = append(bot.Handlers.GuildMemberRemove[:index], bot.Handlers.GuildMemberRemove[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildMemberUpdate:
		if len(bot.Handlers.GuildMemberUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildMemberUpdate = append(bot.Handlers.GuildMemberUpdate[:index], bot.Handlers.GuildMemberUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildRoleCreate:
		if len(bot.Handlers.GuildRoleCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildRoleCreate = append(bot.Handlers.GuildRoleCreate[:index], bot.Handlers.GuildRoleCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildRoleUpdate:
		if len(bot.Handlers.GuildRoleUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildRoleUpdate = append(bot.Handlers.GuildRoleUpdate[:index], bot.Handlers.GuildRoleUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildRoleDelete:
		if len(bot.Handlers.GuildRoleDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildRoleDelete = append(bot.Handlers.GuildRoleDelete[:index], bot.Handlers.GuildRoleDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildScheduledEventCreate:
		if len(bot.Handlers.GuildScheduledEventCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildScheduledEventCreate = append(bot.Handlers.GuildScheduledEventCreate[:index], bot.Handlers.GuildScheduledEventCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildScheduledEventUpdate:
		if len(bot.Handlers.GuildScheduledEventUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildScheduledEventUpdate = append(bot.Handlers.GuildScheduledEventUpdate[:index], bot.Handlers.GuildScheduledEventUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildScheduledEventDelete:
		if len(bot.Handlers.GuildScheduledEventDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildScheduledEventDelete = append(bot.Handlers.GuildScheduledEventDelete[:index], bot.Handlers.GuildScheduledEventDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildScheduledEventUserAdd:
		if len(bot.Handlers.GuildScheduledEventUserAdd) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildScheduledEventUserAdd = append(bot.Handlers.GuildScheduledEventUserAdd[:index], bot.Handlers.GuildScheduledEventUserAdd[index+1:]...)
		return nil

	case FlagGatewayEventNameGuildScheduledEventUserRemove:
		if len(bot.Handlers.GuildScheduledEventUserRemove) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.GuildScheduledEventUserRemove = append(bot.Handlers.GuildScheduledEventUserRemove[:index], bot.Handlers.GuildScheduledEventUserRemove[index+1:]...)
		return nil

	case FlagGatewayEventNameIntegrationCreate:
		if len(bot.Handlers.IntegrationCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.IntegrationCreate = append(bot.Handlers.IntegrationCreate[:index], bot.Handlers.IntegrationCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameIntegrationUpdate:
		if len(bot.Handlers.IntegrationUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.IntegrationUpdate = append(bot.Handlers.IntegrationUpdate[:index], bot.Handlers.IntegrationUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameIntegrationDelete:
		if len(bot.Handlers.IntegrationDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.IntegrationDelete = append(bot.Handlers.IntegrationDelete[:index], bot.Handlers.IntegrationDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameInviteCreate:
		if len(bot.Handlers.InviteCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.InviteCreate = append(bot.Handlers.InviteCreate[:index], bot.Handlers.InviteCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameInviteDelete:
		if len(bot.Handlers.InviteDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.InviteDelete = append(bot.Handlers.InviteDelete[:index], bot.Handlers.InviteDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageCreate:
		if len(bot.Handlers.MessageCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageCreate = append(bot.Handlers.MessageCreate[:index], bot.Handlers.MessageCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageUpdate:
		if len(bot.Handlers.MessageUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageUpdate = append(bot.Handlers.MessageUpdate[:index], bot.Handlers.MessageUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageDelete:
		if len(bot.Handlers.MessageDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageDelete = append(bot.Handlers.MessageDelete[:index], bot.Handlers.MessageDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageDeleteBulk:
		if len(bot.Handlers.MessageDeleteBulk) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageDeleteBulk = append(bot.Handlers.MessageDeleteBulk[:index], bot.Handlers.MessageDeleteBulk[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageReactionAdd:
		if len(bot.Handlers.MessageReactionAdd) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageReactionAdd = append(bot.Handlers.MessageReactionAdd[:index], bot.Handlers.MessageReactionAdd[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageReactionRemove:
		if len(bot.Handlers.MessageReactionRemove) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageReactionRemove = append(bot.Handlers.MessageReactionRemove[:index], bot.Handlers.MessageReactionRemove[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageReactionRemoveAll:
		if len(bot.Handlers.MessageReactionRemoveAll) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageReactionRemoveAll = append(bot.Handlers.MessageReactionRemoveAll[:index], bot.Handlers.MessageReactionRemoveAll[index+1:]...)
		return nil

	case FlagGatewayEventNameMessageReactionRemoveEmoji:
		if len(bot.Handlers.MessageReactionRemoveEmoji) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.MessageReactionRemoveEmoji = append(bot.Handlers.MessageReactionRemoveEmoji[:index], bot.Handlers.MessageReactionRemoveEmoji[index+1:]...)
		return nil

	case FlagGatewayEventNamePresenceUpdate:
		if len(bot.Handlers.PresenceUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.PresenceUpdate = append(bot.Handlers.PresenceUpdate[:index], bot.Handlers.PresenceUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameStageInstanceCreate:
		if len(bot.Handlers.StageInstanceCreate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.StageInstanceCreate = append(bot.Handlers.StageInstanceCreate[:index], bot.Handlers.StageInstanceCreate[index+1:]...)
		return nil

	case FlagGatewayEventNameStageInstanceDelete:
		if len(bot.Handlers.StageInstanceDelete) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.StageInstanceDelete = append(bot.Handlers.StageInstanceDelete[:index], bot.Handlers.StageInstanceDelete[index+1:]...)
		return nil

	case FlagGatewayEventNameStageInstanceUpdate:
		if len(bot.Handlers.StageInstanceUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.StageInstanceUpdate = append(bot.Handlers.StageInstanceUpdate[:index], bot.Handlers.StageInstanceUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameTypingStart:
		if len(bot.Handlers.TypingStart) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.TypingStart = append(bot.Handlers.TypingStart[:index], bot.Handlers.TypingStart[index+1:]...)
		return nil

	case FlagGatewayEventNameVoiceStateUpdate:
		if len(bot.Handlers.VoiceStateUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.VoiceStateUpdate = append(bot.Handlers.VoiceStateUpdate[:index], bot.Handlers.VoiceStateUpdate[index+1:]...)
		return nil

	case FlagGatewayEventNameWebhooksUpdate:
		if len(bot.Handlers.WebhooksUpdate) <= index {
			return fmt.Errorf(errRemoveInvalidEventHandler, eventname, index)
		}

		bot.Handlers.WebhooksUpdate = append(bot.Handlers.WebhooksUpdate[:index], bot.Handlers.WebhooksUpdate[index+1:]...)
		return nil
	}

	return fmt.Errorf("event handler for %s at index %d was not removed.", eventname, index)
}

// handle handles an event using its name and data.
func (bot *Client) handle(eventname string, data json.RawMessage) {
	bot.Handlers.mu.RLock()
	defer bot.Handlers.mu.RUnlock()

	switch eventname {
	case FlagGatewayEventNameHello:
		event := new(Hello)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameHello, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.Hello {
			go handler(event)
		}

	case FlagGatewayEventNameReady:
		event := new(Ready)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameReady, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.Ready {
			go handler(event)
		}

	case FlagGatewayEventNameResumed:
		event := new(Resumed)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameResumed, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.Resumed {
			go handler(event)
		}

	case FlagGatewayEventNameReconnect:
		event := new(Reconnect)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameReconnect, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.Reconnect {
			go handler(event)
		}

	case FlagGatewayEventNameInvalidSession:
		event := new(InvalidSession)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameInvalidSession, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.InvalidSession {
			go handler(event)
		}

	case FlagGatewayEventNameApplicationCommandPermissionsUpdate:
		event := new(ApplicationCommandPermissionsUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameApplicationCommandPermissionsUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ApplicationCommandPermissionsUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameAutoModerationRuleCreate:
		event := new(AutoModerationRuleCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameAutoModerationRuleCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.AutoModerationRuleCreate {
			go handler(event)
		}

	case FlagGatewayEventNameAutoModerationRuleUpdate:
		event := new(AutoModerationRuleUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameAutoModerationRuleUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.AutoModerationRuleUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameAutoModerationRuleDelete:
		event := new(AutoModerationRuleDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameAutoModerationRuleDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.AutoModerationRuleDelete {
			go handler(event)
		}

	case FlagGatewayEventNameAutoModerationActionExecution:
		event := new(AutoModerationActionExecution)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameAutoModerationActionExecution, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.AutoModerationActionExecution {
			go handler(event)
		}

	case FlagGatewayEventNameInteractionCreate:
		event := new(InteractionCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameInteractionCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.InteractionCreate {
			go handler(event)
		}

	case FlagGatewayEventNameVoiceServerUpdate:
		event := new(VoiceServerUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameVoiceServerUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.VoiceServerUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMembersChunk:
		event := new(GuildMembersChunk)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildMembersChunk, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildMembersChunk {
			go handler(event)
		}

	case FlagGatewayEventNameUserUpdate:
		event := new(UserUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameUserUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.UserUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameChannelCreate:
		event := new(ChannelCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameChannelCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ChannelCreate {
			go handler(event)
		}

	case FlagGatewayEventNameChannelUpdate:
		event := new(ChannelUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameChannelUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ChannelUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameChannelDelete:
		event := new(ChannelDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameChannelDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ChannelDelete {
			go handler(event)
		}

	case FlagGatewayEventNameChannelPinsUpdate:
		event := new(ChannelPinsUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameChannelPinsUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ChannelPinsUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadCreate:
		event := new(ThreadCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameThreadCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ThreadCreate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadUpdate:
		event := new(ThreadUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameThreadUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ThreadUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadDelete:
		event := new(ThreadDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameThreadDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ThreadDelete {
			go handler(event)
		}

	case FlagGatewayEventNameThreadListSync:
		event := new(ThreadListSync)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameThreadListSync, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ThreadListSync {
			go handler(event)
		}

	case FlagGatewayEventNameThreadMemberUpdate:
		event := new(ThreadMemberUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameThreadMemberUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ThreadMemberUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameThreadMembersUpdate:
		event := new(ThreadMembersUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameThreadMembersUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.ThreadMembersUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildCreate:
		event := new(GuildCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildCreate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildUpdate:
		event := new(GuildUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildDelete:
		event := new(GuildDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildDelete {
			go handler(event)
		}

	case FlagGatewayEventNameGuildBanAdd:
		event := new(GuildBanAdd)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildBanAdd, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildBanAdd {
			go handler(event)
		}

	case FlagGatewayEventNameGuildBanRemove:
		event := new(GuildBanRemove)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildBanRemove, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildBanRemove {
			go handler(event)
		}

	case FlagGatewayEventNameGuildEmojisUpdate:
		event := new(GuildEmojisUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildEmojisUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildEmojisUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildStickersUpdate:
		event := new(GuildStickersUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildStickersUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildStickersUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildIntegrationsUpdate:
		event := new(GuildIntegrationsUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildIntegrationsUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildIntegrationsUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMemberAdd:
		event := new(GuildMemberAdd)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildMemberAdd, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildMemberAdd {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMemberRemove:
		event := new(GuildMemberRemove)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildMemberRemove, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildMemberRemove {
			go handler(event)
		}

	case FlagGatewayEventNameGuildMemberUpdate:
		event := new(GuildMemberUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildMemberUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildMemberUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildRoleCreate:
		event := new(GuildRoleCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildRoleCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildRoleCreate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildRoleUpdate:
		event := new(GuildRoleUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildRoleUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildRoleUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildRoleDelete:
		event := new(GuildRoleDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildRoleDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildRoleDelete {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventCreate:
		event := new(GuildScheduledEventCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildScheduledEventCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventCreate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventUpdate:
		event := new(GuildScheduledEventUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildScheduledEventUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventDelete:
		event := new(GuildScheduledEventDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildScheduledEventDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventDelete {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventUserAdd:
		event := new(GuildScheduledEventUserAdd)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildScheduledEventUserAdd, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventUserAdd {
			go handler(event)
		}

	case FlagGatewayEventNameGuildScheduledEventUserRemove:
		event := new(GuildScheduledEventUserRemove)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameGuildScheduledEventUserRemove, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.GuildScheduledEventUserRemove {
			go handler(event)
		}

	case FlagGatewayEventNameIntegrationCreate:
		event := new(IntegrationCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameIntegrationCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.IntegrationCreate {
			go handler(event)
		}

	case FlagGatewayEventNameIntegrationUpdate:
		event := new(IntegrationUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameIntegrationUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.IntegrationUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameIntegrationDelete:
		event := new(IntegrationDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameIntegrationDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.IntegrationDelete {
			go handler(event)
		}

	case FlagGatewayEventNameInviteCreate:
		event := new(InviteCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameInviteCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.InviteCreate {
			go handler(event)
		}

	case FlagGatewayEventNameInviteDelete:
		event := new(InviteDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameInviteDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.InviteDelete {
			go handler(event)
		}

	case FlagGatewayEventNameMessageCreate:
		event := new(MessageCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageCreate {
			go handler(event)
		}

	case FlagGatewayEventNameMessageUpdate:
		event := new(MessageUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameMessageDelete:
		event := new(MessageDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageDelete {
			go handler(event)
		}

	case FlagGatewayEventNameMessageDeleteBulk:
		event := new(MessageDeleteBulk)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageDeleteBulk, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageDeleteBulk {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionAdd:
		event := new(MessageReactionAdd)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageReactionAdd, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageReactionAdd {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionRemove:
		event := new(MessageReactionRemove)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageReactionRemove, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageReactionRemove {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionRemoveAll:
		event := new(MessageReactionRemoveAll)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageReactionRemoveAll, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageReactionRemoveAll {
			go handler(event)
		}

	case FlagGatewayEventNameMessageReactionRemoveEmoji:
		event := new(MessageReactionRemoveEmoji)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameMessageReactionRemoveEmoji, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.MessageReactionRemoveEmoji {
			go handler(event)
		}

	case FlagGatewayEventNamePresenceUpdate:
		event := new(PresenceUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNamePresenceUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.PresenceUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameStageInstanceCreate:
		event := new(StageInstanceCreate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameStageInstanceCreate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.StageInstanceCreate {
			go handler(event)
		}

	case FlagGatewayEventNameStageInstanceDelete:
		event := new(StageInstanceDelete)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameStageInstanceDelete, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.StageInstanceDelete {
			go handler(event)
		}

	case FlagGatewayEventNameStageInstanceUpdate:
		event := new(StageInstanceUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameStageInstanceUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.StageInstanceUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameTypingStart:
		event := new(TypingStart)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameTypingStart, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.TypingStart {
			go handler(event)
		}

	case FlagGatewayEventNameVoiceStateUpdate:
		event := new(VoiceStateUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameVoiceStateUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.VoiceStateUpdate {
			go handler(event)
		}

	case FlagGatewayEventNameWebhooksUpdate:
		event := new(WebhooksUpdate)
		if err := json.Unmarshal(data, event); err != nil {
			log.Println(ErrorEvent{Event: FlagGatewayEventNameWebhooksUpdate, Err: err, Action: ErrorEventActionUnmarshal})
			return
		}

		for _, handler := range bot.Handlers.WebhooksUpdate {
			go handler(event)
		}
	}
}
