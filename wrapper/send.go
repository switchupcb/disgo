// Code generated by github.com/switchupcb/copygen
// DO NOT EDIT.

package wrapper

import (
	"encoding/json"
	"fmt"

	"github.com/valyala/fasthttp"
)

// Send sends a AddGuildMember to Discord and returns a GuildMember.
func (r *AddGuildMember) Send(bot *Client) (*GuildMember, error) {
	var result *GuildMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "AddGuildMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointAddGuildMember(r.GuildID, r.UserID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "AddGuildMember", err)
	}

	return result, nil
}

// Send sends a AddGuildMemberRole to Discord and returns a error.
func (r *AddGuildMemberRole) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "AddGuildMemberRole", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointAddGuildMemberRole(r.GuildID, r.UserID, r.RoleID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "AddGuildMemberRole", err)
	}

	return nil
}

// Send sends a AddThreadMember to Discord and returns a error.
func (r *AddThreadMember) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "AddThreadMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointAddThreadMember(r.ChannelID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "AddThreadMember", err)
	}

	return nil
}

// Send sends a BatchEditApplicationCommandPermissions to Discord and returns a GuildApplicationCommandPermissions.
func (r *BatchEditApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var result *GuildApplicationCommandPermissions
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "BatchEditApplicationCommandPermissions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointBatchEditApplicationCommandPermissions(bot.ApplicationID, r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "BatchEditApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a BeginGuildPrune to Discord and returns a error.
func (r *BeginGuildPrune) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "BeginGuildPrune", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointBeginGuildPrune(r.GuildID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "BeginGuildPrune", err)
	}

	return nil
}

// Send sends a BulkDeleteMessages to Discord and returns a error.
func (r *BulkDeleteMessages) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "BulkDeleteMessages", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointBulkDeleteMessages(r.ChannelID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "BulkDeleteMessages", err)
	}

	return nil
}

// Send sends a BulkOverwriteGlobalApplicationCommands to Discord and returns a []*ApplicationCommand.
func (r *BulkOverwriteGlobalApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var result []*ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "BulkOverwriteGlobalApplicationCommands", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointBulkOverwriteGlobalApplicationCommands(bot.ApplicationID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "BulkOverwriteGlobalApplicationCommands", err)
	}

	return result, nil
}

// Send sends a BulkOverwriteGuildApplicationCommands to Discord and returns a []*ApplicationCommand.
func (r *BulkOverwriteGuildApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var result []*ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "BulkOverwriteGuildApplicationCommands", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointBulkOverwriteGuildApplicationCommands(bot.ApplicationID, r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "BulkOverwriteGuildApplicationCommands", err)
	}

	return result, nil
}

// Send sends a CreateChannelInvite to Discord and returns a Invite.
func (r *CreateChannelInvite) Send(bot *Client) (*Invite, error) {
	var result *Invite
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateChannelInvite", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointCreateChannelInvite(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateChannelInvite", err)
	}

	return result, nil
}

// Send sends a CreateFollowupMessage to Discord and returns a Message.
func (r *CreateFollowupMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateFollowupMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointCreateFollowupMessage(bot.ApplicationID, r.InteractionToken), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateFollowupMessage", err)
	}

	return result, nil
}

// Send sends a CreateGlobalApplicationCommand to Discord and returns a ApplicationCommand.
func (r *CreateGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var result *ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGlobalApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointCreateGlobalApplicationCommand(bot.ApplicationID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGlobalApplicationCommand", err)
	}

	return result, nil
}

// Send sends a CreateGroupDM to Discord and returns a Channel.
func (r *CreateGroupDM) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGroupDM", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointCreateGroupDM(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGroupDM", err)
	}

	return result, nil
}

// Send sends a CreateGuild to Discord and returns a Guild.
func (r *CreateGuild) Send(bot *Client) (*Guild, error) {
	var result *Guild
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuild", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointCreateGuild(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuild", err)
	}

	return result, nil
}

// Send sends a CreateGuildApplicationCommand to Discord and returns a ApplicationCommand.
func (r *CreateGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var result *ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointCreateGuildApplicationCommand(bot.ApplicationID, r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildApplicationCommand", err)
	}

	return result, nil
}

// Send sends a CreateGuildBan to Discord and returns a error.
func (r *CreateGuildBan) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "CreateGuildBan", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointCreateGuildBan(r.GuildID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "CreateGuildBan", err)
	}

	return nil
}

// Send sends a CreateGuildChannel to Discord and returns a Channel.
func (r *CreateGuildChannel) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildChannel", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointCreateGuildChannel(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildChannel", err)
	}

	return result, nil
}

// Send sends a CreateGuildEmoji to Discord and returns a Emoji.
func (r *CreateGuildEmoji) Send(bot *Client) (*Emoji, error) {
	var result *Emoji
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildEmoji", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointCreateGuildEmoji(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildEmoji", err)
	}

	return result, nil
}

// Send sends a CreateGuildRole to Discord and returns a Role.
func (r *CreateGuildRole) Send(bot *Client) (*Role, error) {
	var result *Role
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildRole", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointCreateGuildRole(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildRole", err)
	}

	return result, nil
}

// Send sends a CreateGuildScheduledEvent to Discord and returns a GuildScheduledEvent.
func (r *CreateGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	var result *GuildScheduledEvent
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildScheduledEvent", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointCreateGuildScheduledEvent(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildScheduledEvent", err)
	}

	return result, nil
}

// Send sends a CreateGuildSticker to Discord and returns a Sticker.
func (r *CreateGuildSticker) Send(bot *Client) (*Sticker, error) {
	var result *Sticker
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildSticker", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointCreateGuildSticker(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildSticker", err)
	}

	return result, nil
}

// Send sends a CreateGuildTemplate to Discord and returns a GuildTemplate.
func (r *CreateGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var result *GuildTemplate
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildTemplate", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointCreateGuildTemplate(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildTemplate", err)
	}

	return result, nil
}

// Send sends a CreateGuildfromGuildTemplate to Discord and returns a []*GuildTemplate.
func (r *CreateGuildfromGuildTemplate) Send(bot *Client) ([]*GuildTemplate, error) {
	var result []*GuildTemplate
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateGuildfromGuildTemplate", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointCreateGuildfromGuildTemplate(r.TemplateCode), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateGuildfromGuildTemplate", err)
	}

	return result, nil
}

// Send sends a CreateInteractionResponse to Discord and returns a error.
func (r *CreateInteractionResponse) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "CreateInteractionResponse", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointCreateInteractionResponse(r.InteractionID, r.InteractionToken), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "CreateInteractionResponse", err)
	}

	return nil
}

// Send sends a CreateMessage to Discord and returns a Message.
func (r *CreateMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointCreateMessage(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateMessage", err)
	}

	return result, nil
}

// Send sends a CreateReaction to Discord and returns a error.
func (r *CreateReaction) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "CreateReaction", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointCreateReaction(r.ChannelID, r.MessageID, r.Emoji), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "CreateReaction", err)
	}

	return nil
}

// Send sends a CreateStageInstance to Discord and returns a StageInstance.
func (r *CreateStageInstance) Send(bot *Client) (*StageInstance, error) {
	var result *StageInstance
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateStageInstance", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointCreateStageInstance(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateStageInstance", err)
	}

	return result, nil
}

// Send sends a CreateWebhook to Discord and returns a Webhook.
func (r *CreateWebhook) Send(bot *Client) (*Webhook, error) {
	var result *Webhook
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CreateWebhook", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointCreateWebhook(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CreateWebhook", err)
	}

	return result, nil
}

// Send sends a CrosspostMessage to Discord and returns a Message.
func (r *CrosspostMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "CrosspostMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointCrosspostMessage(r.ChannelID, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "CrosspostMessage", err)
	}

	return result, nil
}

// Send sends a DeleteAllReactions to Discord and returns a error.
func (r *DeleteAllReactions) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteAllReactions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointDeleteAllReactions(r.ChannelID, r.MessageID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteAllReactions", err)
	}

	return nil
}

// Send sends a DeleteAllReactionsforEmoji to Discord and returns a error.
func (r *DeleteAllReactionsforEmoji) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteAllReactionsforEmoji", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointDeleteAllReactionsforEmoji(r.ChannelID, r.MessageID, r.Emoji), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteAllReactionsforEmoji", err)
	}

	return nil
}

// Send sends a DeleteChannelPermission to Discord and returns a error.
func (r *DeleteChannelPermission) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteChannelPermission", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointDeleteChannelPermission(r.ChannelID, r.OverwriteID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteChannelPermission", err)
	}

	return nil
}

// Send sends a DeleteCloseChannel to Discord and returns a Channel.
func (r *DeleteCloseChannel) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "DeleteCloseChannel", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointDeleteCloseChannel(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "DeleteCloseChannel", err)
	}

	return result, nil
}

// Send sends a DeleteFollowupMessage to Discord and returns a error.
func (r *DeleteFollowupMessage) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteFollowupMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointDeleteFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteFollowupMessage", err)
	}

	return nil
}

// Send sends a DeleteGlobalApplicationCommand to Discord and returns a error.
func (r *DeleteGlobalApplicationCommand) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGlobalApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointDeleteGlobalApplicationCommand(bot.ApplicationID, r.CommandID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGlobalApplicationCommand", err)
	}

	return nil
}

// Send sends a DeleteGuild to Discord and returns a error.
func (r *DeleteGuild) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGuild", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointDeleteGuild(r.GuildID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuild", err)
	}

	return nil
}

// Send sends a DeleteGuildApplicationCommand to Discord and returns a error.
func (r *DeleteGuildApplicationCommand) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGuildApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointDeleteGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildApplicationCommand", err)
	}

	return nil
}

// Send sends a DeleteGuildEmoji to Discord and returns a error.
func (r *DeleteGuildEmoji) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGuildEmoji", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointDeleteGuildEmoji(r.GuildID, r.EmojiID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildEmoji", err)
	}

	return nil
}

// Send sends a DeleteGuildIntegration to Discord and returns a error.
func (r *DeleteGuildIntegration) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGuildIntegration", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointDeleteGuildIntegration(r.GuildID, r.IntegrationID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildIntegration", err)
	}

	return nil
}

// Send sends a DeleteGuildRole to Discord and returns a error.
func (r *DeleteGuildRole) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGuildRole", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointDeleteGuildRole(r.GuildID, r.RoleID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildRole", err)
	}

	return nil
}

// Send sends a DeleteGuildScheduledEvent to Discord and returns a error.
func (r *DeleteGuildScheduledEvent) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGuildScheduledEvent", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointDeleteGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildScheduledEvent", err)
	}

	return nil
}

// Send sends a DeleteGuildSticker to Discord and returns a error.
func (r *DeleteGuildSticker) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteGuildSticker", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointDeleteGuildSticker(r.GuildID, r.StickerID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteGuildSticker", err)
	}

	return nil
}

// Send sends a DeleteGuildTemplate to Discord and returns a GuildTemplate.
func (r *DeleteGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var result *GuildTemplate
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "DeleteGuildTemplate", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointDeleteGuildTemplate(r.GuildID, r.TemplateCode), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "DeleteGuildTemplate", err)
	}

	return result, nil
}

// Send sends a DeleteInvite to Discord and returns a Invite.
func (r *DeleteInvite) Send(bot *Client) (*Invite, error) {
	var result *Invite
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "DeleteInvite", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointDeleteInvite(r.InviteCode), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "DeleteInvite", err)
	}

	return result, nil
}

// Send sends a DeleteMessage to Discord and returns a error.
func (r *DeleteMessage) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointDeleteMessage(r.ChannelID, r.MessageID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteMessage", err)
	}

	return nil
}

// Send sends a DeleteOriginalInteractionResponse to Discord and returns a error.
func (r *DeleteOriginalInteractionResponse) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteOriginalInteractionResponse", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointDeleteOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteOriginalInteractionResponse", err)
	}

	return nil
}

// Send sends a DeleteOwnReaction to Discord and returns a error.
func (r *DeleteOwnReaction) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteOwnReaction", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointDeleteOwnReaction(r.ChannelID, r.MessageID, r.Emoji), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteOwnReaction", err)
	}

	return nil
}

// Send sends a DeleteStageInstance to Discord and returns a error.
func (r *DeleteStageInstance) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteStageInstance", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointDeleteStageInstance(r.ChannelID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteStageInstance", err)
	}

	return nil
}

// Send sends a DeleteUserReaction to Discord and returns a error.
func (r *DeleteUserReaction) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteUserReaction", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointDeleteUserReaction(r.ChannelID, r.MessageID, r.Emoji, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteUserReaction", err)
	}

	return nil
}

// Send sends a DeleteWebhook to Discord and returns a error.
func (r *DeleteWebhook) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteWebhook", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointDeleteWebhook(r.WebhookID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteWebhook", err)
	}

	return nil
}

// Send sends a DeleteWebhookMessage to Discord and returns a error.
func (r *DeleteWebhookMessage) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteWebhookMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointDeleteWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteWebhookMessage", err)
	}

	return nil
}

// Send sends a DeleteWebhookwithToken to Discord and returns a error.
func (r *DeleteWebhookwithToken) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "DeleteWebhookwithToken", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointDeleteWebhookwithToken(r.WebhookID, r.WebhookToken), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "DeleteWebhookwithToken", err)
	}

	return nil
}

// Send sends a EditApplicationCommandPermissions to Discord and returns a GuildApplicationCommandPermissions.
func (r *EditApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var result *GuildApplicationCommandPermissions
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditApplicationCommandPermissions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointEditApplicationCommandPermissions(bot.ApplicationID, r.GuildID, r.CommandID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a EditChannelPermissions to Discord and returns a error.
func (r *EditChannelPermissions) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "EditChannelPermissions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointEditChannelPermissions(r.ChannelID, r.OverwriteID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "EditChannelPermissions", err)
	}

	return nil
}

// Send sends a EditFollowupMessage to Discord and returns a Message.
func (r *EditFollowupMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditFollowupMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointEditFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditFollowupMessage", err)
	}

	return result, nil
}

// Send sends a EditGlobalApplicationCommand to Discord and returns a ApplicationCommand.
func (r *EditGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var result *ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditGlobalApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointEditGlobalApplicationCommand(bot.ApplicationID, r.CommandID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditGlobalApplicationCommand", err)
	}

	return result, nil
}

// Send sends a EditGuildApplicationCommand to Discord and returns a ApplicationCommand.
func (r *EditGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var result *ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditGuildApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointEditGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditGuildApplicationCommand", err)
	}

	return result, nil
}

// Send sends a EditMessage to Discord and returns a Message.
func (r *EditMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointEditMessage(r.ChannelID, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditMessage", err)
	}

	return result, nil
}

// Send sends a EditOriginalInteractionResponse to Discord and returns a Message.
func (r *EditOriginalInteractionResponse) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditOriginalInteractionResponse", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointEditOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditOriginalInteractionResponse", err)
	}

	return result, nil
}

// Send sends a EditWebhookMessage to Discord and returns a Message.
func (r *EditWebhookMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "EditWebhookMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointEditWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "EditWebhookMessage", err)
	}

	return result, nil
}

// Send sends a ExecuteGitHubCompatibleWebhook to Discord and returns a error.
func (r *ExecuteGitHubCompatibleWebhook) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ExecuteGitHubCompatibleWebhook", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointExecuteGitHubCompatibleWebhook(r.WebhookID, r.WebhookToken), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ExecuteGitHubCompatibleWebhook", err)
	}

	return nil
}

// Send sends a ExecuteSlackCompatibleWebhook to Discord and returns a error.
func (r *ExecuteSlackCompatibleWebhook) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ExecuteSlackCompatibleWebhook", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointExecuteSlackCompatibleWebhook(r.WebhookID, r.WebhookToken), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ExecuteSlackCompatibleWebhook", err)
	}

	return nil
}

// Send sends a ExecuteWebhook to Discord and returns a error.
func (r *ExecuteWebhook) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ExecuteWebhook", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointExecuteWebhook(r.WebhookID, r.WebhookToken), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ExecuteWebhook", err)
	}

	return nil
}

// Send sends a FollowNewsChannel to Discord and returns a FollowedChannel.
func (r *FollowNewsChannel) Send(bot *Client) (*FollowedChannel, error) {
	var result *FollowedChannel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "FollowNewsChannel", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointFollowNewsChannel(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "FollowNewsChannel", err)
	}

	return result, nil
}

// Send sends a GetApplicationCommandPermissions to Discord and returns a GuildApplicationCommandPermissions.
func (r *GetApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var result *GuildApplicationCommandPermissions
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetApplicationCommandPermissions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetApplicationCommandPermissions(bot.ApplicationID, r.GuildID, r.CommandID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a GetChannel to Discord and returns a Channel.
func (r *GetChannel) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetChannel", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetChannel(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannel", err)
	}

	return result, nil
}

// Send sends a GetChannelInvites to Discord and returns a []*Invite.
func (r *GetChannelInvites) Send(bot *Client) ([]*Invite, error) {
	var result []*Invite
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetChannelInvites", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetChannelInvites(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelInvites", err)
	}

	return result, nil
}

// Send sends a GetChannelMessage to Discord and returns a Message.
func (r *GetChannelMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetChannelMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetChannelMessage(r.ChannelID, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelMessage", err)
	}

	return result, nil
}

// Send sends a GetChannelMessages to Discord and returns a []*Message.
func (r *GetChannelMessages) Send(bot *Client) ([]*Message, error) {
	var result []*Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetChannelMessages", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetChannelMessages(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelMessages", err)
	}

	return result, nil
}

// Send sends a GetChannelWebhooks to Discord and returns a []*Webhook.
func (r *GetChannelWebhooks) Send(bot *Client) ([]*Webhook, error) {
	var result []*Webhook
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetChannelWebhooks", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetChannelWebhooks(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetChannelWebhooks", err)
	}

	return result, nil
}

// Send sends a GetCurrentAuthorizationInformation to Discord and returns a CurrentAuthorizationInformationResponse.
func (r *GetCurrentAuthorizationInformation) Send(bot *Client) (*CurrentAuthorizationInformationResponse, error) {
	var result *CurrentAuthorizationInformationResponse
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetCurrentAuthorizationInformation", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointGetCurrentAuthorizationInformation(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentAuthorizationInformation", err)
	}

	return result, nil
}

// Send sends a GetCurrentBotApplicationInformation to Discord and returns a Application.
func (r *GetCurrentBotApplicationInformation) Send(bot *Client) (*Application, error) {
	var result *Application
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetCurrentBotApplicationInformation", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetCurrentBotApplicationInformation(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentBotApplicationInformation", err)
	}

	return result, nil
}

// Send sends a GetCurrentUser to Discord and returns a User.
func (r *GetCurrentUser) Send(bot *Client) (*User, error) {
	var result *User
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetCurrentUser", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGetCurrentUser(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentUser", err)
	}

	return result, nil
}

// Send sends a GetCurrentUserGuildMember to Discord and returns a GuildMember.
func (r *GetCurrentUserGuildMember) Send(bot *Client) (*GuildMember, error) {
	var result *GuildMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetCurrentUserGuildMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointGetCurrentUserGuildMember(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentUserGuildMember", err)
	}

	return result, nil
}

// Send sends a GetCurrentUserGuilds to Discord and returns a []*Guild.
func (r *GetCurrentUserGuilds) Send(bot *Client) ([]*Guild, error) {
	var result []*Guild
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetCurrentUserGuilds", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetCurrentUserGuilds(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetCurrentUserGuilds", err)
	}

	return result, nil
}

// Send sends a GetFollowupMessage to Discord and returns a Message.
func (r *GetFollowupMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetFollowupMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetFollowupMessage(bot.ApplicationID, r.InteractionToken, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetFollowupMessage", err)
	}

	return result, nil
}

// Send sends a GetGateway to Discord and returns a GetGateway.
func (r *GetGateway) Send(bot *Client) (*GetGateway, error) {
	var result *GetGateway
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGateway", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetGateway(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGateway", err)
	}

	return result, nil
}

// Send sends a GetGatewayBot to Discord and returns a GetGatewayBot.
func (r *GetGatewayBot) Send(bot *Client) (*GetGatewayBot, error) {
	var result *GetGatewayBot
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGatewayBot", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGetGatewayBot(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGatewayBot", err)
	}

	return result, nil
}

// Send sends a GetGlobalApplicationCommand to Discord and returns a ApplicationCommand.
func (r *GetGlobalApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var result *ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGlobalApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGlobalApplicationCommand(bot.ApplicationID, r.CommandID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGlobalApplicationCommand", err)
	}

	return result, nil
}

// Send sends a GetGlobalApplicationCommands to Discord and returns a []*ApplicationCommand.
func (r *GetGlobalApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var result []*ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGlobalApplicationCommands", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointGetGlobalApplicationCommands(bot.ApplicationID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGlobalApplicationCommands", err)
	}

	return result, nil
}

// Send sends a GetGuild to Discord and returns a Guild.
func (r *GetGuild) Send(bot *Client) (*Guild, error) {
	var result *Guild
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuild", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetGuild(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuild", err)
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommand to Discord and returns a ApplicationCommand.
func (r *GetGuildApplicationCommand) Send(bot *Client) (*ApplicationCommand, error) {
	var result *ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildApplicationCommand", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildApplicationCommand(bot.ApplicationID, r.GuildID, r.CommandID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildApplicationCommand", err)
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommandPermissions to Discord and returns a GuildApplicationCommandPermissions.
func (r *GetGuildApplicationCommandPermissions) Send(bot *Client) (*GuildApplicationCommandPermissions, error) {
	var result *GuildApplicationCommandPermissions
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildApplicationCommandPermissions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildApplicationCommandPermissions(bot.ApplicationID, r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildApplicationCommandPermissions", err)
	}

	return result, nil
}

// Send sends a GetGuildApplicationCommands to Discord and returns a []*ApplicationCommand.
func (r *GetGuildApplicationCommands) Send(bot *Client) ([]*ApplicationCommand, error) {
	var result []*ApplicationCommand
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildApplicationCommands", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildApplicationCommands(bot.ApplicationID, r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildApplicationCommands", err)
	}

	return result, nil
}

// Send sends a GetGuildAuditLog to Discord and returns a AuditLog.
func (r *GetGuildAuditLog) Send(bot *Client) (*AuditLog, error) {
	var result *AuditLog
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildAuditLog", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildAuditLog(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildAuditLog", err)
	}

	return result, nil
}

// Send sends a GetGuildBan to Discord and returns a Ban.
func (r *GetGuildBan) Send(bot *Client) (*Ban, error) {
	var result *Ban
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildBan", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointGetGuildBan(r.GuildID, r.UserID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildBan", err)
	}

	return result, nil
}

// Send sends a GetGuildBans to Discord and returns a []*Ban.
func (r *GetGuildBans) Send(bot *Client) ([]*Ban, error) {
	var result []*Ban
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildBans", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetGuildBans(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildBans", err)
	}

	return result, nil
}

// Send sends a GetGuildChannels to Discord and returns a []*Channel.
func (r *GetGuildChannels) Send(bot *Client) ([]*Channel, error) {
	var result []*Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildChannels", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetGuildChannels(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildChannels", err)
	}

	return result, nil
}

// Send sends a GetGuildEmoji to Discord and returns a Emoji.
func (r *GetGuildEmoji) Send(bot *Client) (*Emoji, error) {
	var result *Emoji
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildEmoji", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointGetGuildEmoji(r.GuildID, r.EmojiID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildEmoji", err)
	}

	return result, nil
}

// Send sends a GetGuildIntegrations to Discord and returns a []*Integration.
func (r *GetGuildIntegrations) Send(bot *Client) ([]*Integration, error) {
	var result []*Integration
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildIntegrations", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGetGuildIntegrations(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildIntegrations", err)
	}

	return result, nil
}

// Send sends a GetGuildInvites to Discord and returns a []*Invite.
func (r *GetGuildInvites) Send(bot *Client) ([]*Invite, error) {
	var result []*Invite
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildInvites", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGetGuildInvites(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildInvites", err)
	}

	return result, nil
}

// Send sends a GetGuildMember to Discord and returns a GuildMember.
func (r *GetGuildMember) Send(bot *Client) (*GuildMember, error) {
	var result *GuildMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildMember(r.GuildID, r.UserID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildMember", err)
	}

	return result, nil
}

// Send sends a GetGuildPreview to Discord and returns a GuildPreview.
func (r *GetGuildPreview) Send(bot *Client) (*GuildPreview, error) {
	var result *GuildPreview
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildPreview", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildPreview(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildPreview", err)
	}

	return result, nil
}

// Send sends a GetGuildPruneCount to Discord and returns a error.
func (r *GetGuildPruneCount) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "GetGuildPruneCount", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointGetGuildPruneCount(r.GuildID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GetGuildPruneCount", err)
	}

	return nil
}

// Send sends a GetGuildRoles to Discord and returns a []*Role.
func (r *GetGuildRoles) Send(bot *Client) ([]*Role, error) {
	var result []*Role
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildRoles", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGetGuildRoles(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildRoles", err)
	}

	return result, nil
}

// Send sends a GetGuildScheduledEvent to Discord and returns a GuildScheduledEvent.
func (r *GetGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	var result *GuildScheduledEvent
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildScheduledEvent", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildScheduledEvent", err)
	}

	return result, nil
}

// Send sends a GetGuildScheduledEventUsers to Discord and returns a []*GuildScheduledEventUser.
func (r *GetGuildScheduledEventUsers) Send(bot *Client) ([]*GuildScheduledEventUser, error) {
	var result []*GuildScheduledEventUser
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildScheduledEventUsers", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointGetGuildScheduledEventUsers(r.GuildID, r.GuildScheduledEventID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildScheduledEventUsers", err)
	}

	return result, nil
}

// Send sends a GetGuildSticker to Discord and returns a Sticker.
func (r *GetGuildSticker) Send(bot *Client) (*Sticker, error) {
	var result *Sticker
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildSticker", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetGuildSticker(r.GuildID, r.StickerID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildSticker", err)
	}

	return result, nil
}

// Send sends a GetGuildTemplate to Discord and returns a GuildTemplate.
func (r *GetGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var result *GuildTemplate
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildTemplate", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetGuildTemplate(r.TemplateCode), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildTemplate", err)
	}

	return result, nil
}

// Send sends a GetGuildTemplates to Discord and returns a []*GuildTemplate.
func (r *GetGuildTemplates) Send(bot *Client) ([]*GuildTemplate, error) {
	var result []*GuildTemplate
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildTemplates", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGetGuildTemplates(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildTemplates", err)
	}

	return result, nil
}

// Send sends a GetGuildVanityURL to Discord and returns a Invite.
func (r *GetGuildVanityURL) Send(bot *Client) (*Invite, error) {
	var result *Invite
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildVanityURL", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildVanityURL(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildVanityURL", err)
	}

	return result, nil
}

// Send sends a GetGuildVoiceRegions to Discord and returns a VoiceRegion.
func (r *GetGuildVoiceRegions) Send(bot *Client) (*VoiceRegion, error) {
	var result *VoiceRegion
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildVoiceRegions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointGetGuildVoiceRegions(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildVoiceRegions", err)
	}

	return result, nil
}

// Send sends a GetGuildWebhooks to Discord and returns a []*Webhook.
func (r *GetGuildWebhooks) Send(bot *Client) ([]*Webhook, error) {
	var result []*Webhook
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildWebhooks", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildWebhooks(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWebhooks", err)
	}

	return result, nil
}

// Send sends a GetGuildWelcomeScreen to Discord and returns a WelcomeScreen.
func (r *GetGuildWelcomeScreen) Send(bot *Client) (*WelcomeScreen, error) {
	var result *WelcomeScreen
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildWelcomeScreen", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildWelcomeScreen(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWelcomeScreen", err)
	}

	return result, nil
}

// Send sends a GetGuildWidget to Discord and returns a GuildWidget.
func (r *GetGuildWidget) Send(bot *Client) (*GuildWidget, error) {
	var result *GuildWidget
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildWidget", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildWidget(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWidget", err)
	}

	return result, nil
}

// Send sends a GetGuildWidgetImage to Discord and returns a EmbedImage.
func (r *GetGuildWidgetImage) Send(bot *Client) (*EmbedImage, error) {
	var result *EmbedImage
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildWidgetImage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGetGuildWidgetImage(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWidgetImage", err)
	}

	return result, nil
}

// Send sends a GetGuildWidgetSettings to Discord and returns a GuildWidget.
func (r *GetGuildWidgetSettings) Send(bot *Client) (*GuildWidget, error) {
	var result *GuildWidget
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetGuildWidgetSettings", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetGuildWidgetSettings(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetGuildWidgetSettings", err)
	}

	return result, nil
}

// Send sends a GetInvite to Discord and returns a Invite.
func (r *GetInvite) Send(bot *Client) (*Invite, error) {
	var result *Invite
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetInvite", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetInvite(r.InviteCode), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetInvite", err)
	}

	return result, nil
}

// Send sends a GetOriginalInteractionResponse to Discord and returns a error.
func (r *GetOriginalInteractionResponse) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "GetOriginalInteractionResponse", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetOriginalInteractionResponse(bot.ApplicationID, r.InteractionToken), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GetOriginalInteractionResponse", err)
	}

	return nil
}

// Send sends a GetPinnedMessages to Discord and returns a []*Message.
func (r *GetPinnedMessages) Send(bot *Client) ([]*Message, error) {
	var result []*Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetPinnedMessages", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetPinnedMessages(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetPinnedMessages", err)
	}

	return result, nil
}

// Send sends a GetReactions to Discord and returns a []*User.
func (r *GetReactions) Send(bot *Client) ([]*User, error) {
	var result []*User
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetReactions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetReactions(r.ChannelID, r.MessageID, r.Emoji), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetReactions", err)
	}

	return result, nil
}

// Send sends a GetStageInstance to Discord and returns a error.
func (r *GetStageInstance) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "GetStageInstance", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetStageInstance(r.ChannelID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GetStageInstance", err)
	}

	return nil
}

// Send sends a GetSticker to Discord and returns a Sticker.
func (r *GetSticker) Send(bot *Client) (*Sticker, error) {
	var result *Sticker
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetSticker", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetSticker(r.StickerID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetSticker", err)
	}

	return result, nil
}

// Send sends a GetThreadMember to Discord and returns a ThreadMember.
func (r *GetThreadMember) Send(bot *Client) (*ThreadMember, error) {
	var result *ThreadMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetThreadMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetThreadMember(r.ChannelID, r.UserID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetThreadMember", err)
	}

	return result, nil
}

// Send sends a GetUser to Discord and returns a User.
func (r *GetUser) Send(bot *Client) (*User, error) {
	var result *User
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetUser", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetUser(r.UserID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetUser", err)
	}

	return result, nil
}

// Send sends a GetUserConnections to Discord and returns a []*Connection.
func (r *GetUserConnections) Send(bot *Client) ([]*Connection, error) {
	var result []*Connection
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetUserConnections", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetUserConnections(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetUserConnections", err)
	}

	return result, nil
}

// Send sends a GetWebhook to Discord and returns a Webhook.
func (r *GetWebhook) Send(bot *Client) (*Webhook, error) {
	var result *Webhook
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetWebhook", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointGetWebhook(r.WebhookID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetWebhook", err)
	}

	return result, nil
}

// Send sends a GetWebhookMessage to Discord and returns a Message.
func (r *GetWebhookMessage) Send(bot *Client) (*Message, error) {
	var result *Message
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetWebhookMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGetWebhookMessage(r.WebhookID, r.WebhookToken, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetWebhookMessage", err)
	}

	return result, nil
}

// Send sends a GetWebhookwithToken to Discord and returns a Webhook.
func (r *GetWebhookwithToken) Send(bot *Client) (*Webhook, error) {
	var result *Webhook
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "GetWebhookwithToken", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointGetWebhookwithToken(r.WebhookID, r.WebhookToken), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "GetWebhookwithToken", err)
	}

	return result, nil
}

// Send sends a GroupDMAddRecipient to Discord and returns a error.
func (r *GroupDMAddRecipient) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "GroupDMAddRecipient", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointGroupDMAddRecipient(r.ChannelID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GroupDMAddRecipient", err)
	}

	return nil
}

// Send sends a GroupDMRemoveRecipient to Discord and returns a error.
func (r *GroupDMRemoveRecipient) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "GroupDMRemoveRecipient", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointGroupDMRemoveRecipient(r.ChannelID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "GroupDMRemoveRecipient", err)
	}

	return nil
}

// Send sends a JoinThread to Discord and returns a error.
func (r *JoinThread) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "JoinThread", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointJoinThread(r.ChannelID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "JoinThread", err)
	}

	return nil
}

// Send sends a LeaveGuild to Discord and returns a error.
func (r *LeaveGuild) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "LeaveGuild", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointLeaveGuild(r.GuildID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "LeaveGuild", err)
	}

	return nil
}

// Send sends a LeaveThread to Discord and returns a error.
func (r *LeaveThread) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "LeaveThread", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointLeaveThread(r.ChannelID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "LeaveThread", err)
	}

	return nil
}

// Send sends a ListActiveGuildThreads to Discord and returns a ListActiveGuildThreadsResponse.
func (r *ListActiveGuildThreads) Send(bot *Client) (*ListActiveGuildThreadsResponse, error) {
	var result *ListActiveGuildThreadsResponse
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListActiveGuildThreads", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointListActiveGuildThreads(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListActiveGuildThreads", err)
	}

	return result, nil
}

// Send sends a ListGuildEmojis to Discord and returns a []*Emoji.
func (r *ListGuildEmojis) Send(bot *Client) ([]*Emoji, error) {
	var result []*Emoji
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListGuildEmojis", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPut, EndpointListGuildEmojis(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListGuildEmojis", err)
	}

	return result, nil
}

// Send sends a ListGuildMembers to Discord and returns a []*GuildMember.
func (r *ListGuildMembers) Send(bot *Client) ([]*GuildMember, error) {
	var result []*GuildMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListGuildMembers", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointListGuildMembers(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListGuildMembers", err)
	}

	return result, nil
}

// Send sends a ListGuildStickers to Discord and returns a []*Sticker.
func (r *ListGuildStickers) Send(bot *Client) ([]*Sticker, error) {
	var result []*Sticker
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListGuildStickers", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointListGuildStickers(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListGuildStickers", err)
	}

	return result, nil
}

// Send sends a ListJoinedPrivateArchivedThreads to Discord and returns a ListJoinedPrivateArchivedThreadsResponse.
func (r *ListJoinedPrivateArchivedThreads) Send(bot *Client) (*ListJoinedPrivateArchivedThreadsResponse, error) {
	var result *ListJoinedPrivateArchivedThreadsResponse
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListJoinedPrivateArchivedThreads", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointListJoinedPrivateArchivedThreads(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListJoinedPrivateArchivedThreads", err)
	}

	return result, nil
}

// Send sends a ListNitroStickerPacks to Discord and returns a []*StickerPack.
func (r *ListNitroStickerPacks) Send(bot *Client) ([]*StickerPack, error) {
	var result []*StickerPack
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListNitroStickerPacks", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointListNitroStickerPacks(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListNitroStickerPacks", err)
	}

	return result, nil
}

// Send sends a ListPrivateArchivedThreads to Discord and returns a ListPrivateArchivedThreadsResponse.
func (r *ListPrivateArchivedThreads) Send(bot *Client) (*ListPrivateArchivedThreadsResponse, error) {
	var result *ListPrivateArchivedThreadsResponse
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListPrivateArchivedThreads", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointListPrivateArchivedThreads(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListPrivateArchivedThreads", err)
	}

	return result, nil
}

// Send sends a ListPublicArchivedThreads to Discord and returns a ListPublicArchivedThreadsResponse.
func (r *ListPublicArchivedThreads) Send(bot *Client) (*ListPublicArchivedThreadsResponse, error) {
	var result *ListPublicArchivedThreadsResponse
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListPublicArchivedThreads", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointListPublicArchivedThreads(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListPublicArchivedThreads", err)
	}

	return result, nil
}

// Send sends a ListScheduledEventsforGuild to Discord and returns a []*GuildScheduledEvent.
func (r *ListScheduledEventsforGuild) Send(bot *Client) ([]*GuildScheduledEvent, error) {
	var result []*GuildScheduledEvent
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListScheduledEventsforGuild", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointListScheduledEventsforGuild(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListScheduledEventsforGuild", err)
	}

	return result, nil
}

// Send sends a ListThreadMembers to Discord and returns a []*ThreadMember.
func (r *ListThreadMembers) Send(bot *Client) ([]*ThreadMember, error) {
	var result []*ThreadMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListThreadMembers", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointListThreadMembers(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListThreadMembers", err)
	}

	return result, nil
}

// Send sends a ListVoiceRegions to Discord and returns a []*VoiceRegion.
func (r *ListVoiceRegions) Send(bot *Client) ([]*VoiceRegion, error) {
	var result []*VoiceRegion
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ListVoiceRegions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointListVoiceRegions(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ListVoiceRegions", err)
	}

	return result, nil
}

// Send sends a ModifyChannel to Discord and returns a Channel.
func (r *ModifyChannel) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyChannel", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyChannel(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannel", err)
	}

	return result, nil
}

// Send sends a ModifyChannelGroupDM to Discord and returns a Channel.
func (r *ModifyChannelGroupDM) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyChannelGroupDM", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyChannelGroupDM(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannelGroupDM", err)
	}

	return result, nil
}

// Send sends a ModifyChannelGuild to Discord and returns a Channel.
func (r *ModifyChannelGuild) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyChannelGuild", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyChannelGuild(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannelGuild", err)
	}

	return result, nil
}

// Send sends a ModifyChannelThread to Discord and returns a Channel.
func (r *ModifyChannelThread) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyChannelThread", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointModifyChannelThread(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyChannelThread", err)
	}

	return result, nil
}

// Send sends a ModifyCurrentMember to Discord and returns a GuildMember.
func (r *ModifyCurrentMember) Send(bot *Client) (*GuildMember, error) {
	var result *GuildMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyCurrentMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointModifyCurrentMember(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyCurrentMember", err)
	}

	return result, nil
}

// Send sends a ModifyCurrentUser to Discord and returns a User.
func (r *ModifyCurrentUser) Send(bot *Client) (*User, error) {
	var result *User
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyCurrentUser", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointModifyCurrentUser(), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyCurrentUser", err)
	}

	return result, nil
}

// Send sends a ModifyCurrentUserVoiceState to Discord and returns a error.
func (r *ModifyCurrentUserVoiceState) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ModifyCurrentUserVoiceState", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyCurrentUserVoiceState(r.GuildID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ModifyCurrentUserVoiceState", err)
	}

	return nil
}

// Send sends a ModifyGuild to Discord and returns a Guild.
func (r *ModifyGuild) Send(bot *Client) (*Guild, error) {
	var result *Guild
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuild", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyGuild(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuild", err)
	}

	return result, nil
}

// Send sends a ModifyGuildChannelPositions to Discord and returns a error.
func (r *ModifyGuildChannelPositions) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ModifyGuildChannelPositions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointModifyGuildChannelPositions(r.GuildID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ModifyGuildChannelPositions", err)
	}

	return nil
}

// Send sends a ModifyGuildEmoji to Discord and returns a Emoji.
func (r *ModifyGuildEmoji) Send(bot *Client) (*Emoji, error) {
	var result *Emoji
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildEmoji", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyGuildEmoji(r.GuildID, r.EmojiID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildEmoji", err)
	}

	return result, nil
}

// Send sends a ModifyGuildMember to Discord and returns a GuildMember.
func (r *ModifyGuildMember) Send(bot *Client) (*GuildMember, error) {
	var result *GuildMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyGuildMember(r.GuildID, r.UserID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildMember", err)
	}

	return result, nil
}

// Send sends a ModifyGuildRole to Discord and returns a Role.
func (r *ModifyGuildRole) Send(bot *Client) (*Role, error) {
	var result *Role
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildRole", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointModifyGuildRole(r.GuildID, r.RoleID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildRole", err)
	}

	return result, nil
}

// Send sends a ModifyGuildRolePositions to Discord and returns a []*Role.
func (r *ModifyGuildRolePositions) Send(bot *Client) ([]*Role, error) {
	var result []*Role
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildRolePositions", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointModifyGuildRolePositions(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildRolePositions", err)
	}

	return result, nil
}

// Send sends a ModifyGuildScheduledEvent to Discord and returns a GuildScheduledEvent.
func (r *ModifyGuildScheduledEvent) Send(bot *Client) (*GuildScheduledEvent, error) {
	var result *GuildScheduledEvent
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildScheduledEvent", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyGuildScheduledEvent(r.GuildID, r.GuildScheduledEventID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildScheduledEvent", err)
	}

	return result, nil
}

// Send sends a ModifyGuildSticker to Discord and returns a Sticker.
func (r *ModifyGuildSticker) Send(bot *Client) (*Sticker, error) {
	var result *Sticker
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildSticker", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyGuildSticker(r.GuildID, r.StickerID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildSticker", err)
	}

	return result, nil
}

// Send sends a ModifyGuildTemplate to Discord and returns a GuildTemplate.
func (r *ModifyGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var result *GuildTemplate
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildTemplate", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointModifyGuildTemplate(r.GuildID, r.TemplateCode), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildTemplate", err)
	}

	return result, nil
}

// Send sends a ModifyGuildWelcomeScreen to Discord and returns a WelcomeScreen.
func (r *ModifyGuildWelcomeScreen) Send(bot *Client) (*WelcomeScreen, error) {
	var result *WelcomeScreen
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildWelcomeScreen", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyGuildWelcomeScreen(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildWelcomeScreen", err)
	}

	return result, nil
}

// Send sends a ModifyGuildWidget to Discord and returns a GuildWidget.
func (r *ModifyGuildWidget) Send(bot *Client) (*GuildWidget, error) {
	var result *GuildWidget
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyGuildWidget", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyGuildWidget(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyGuildWidget", err)
	}

	return result, nil
}

// Send sends a ModifyStageInstance to Discord and returns a StageInstance.
func (r *ModifyStageInstance) Send(bot *Client) (*StageInstance, error) {
	var result *StageInstance
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyStageInstance", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyStageInstance(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyStageInstance", err)
	}

	return result, nil
}

// Send sends a ModifyUserVoiceState to Discord and returns a error.
func (r *ModifyUserVoiceState) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "ModifyUserVoiceState", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointModifyUserVoiceState(r.GuildID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "ModifyUserVoiceState", err)
	}

	return nil
}

// Send sends a ModifyWebhook to Discord and returns a Webhook.
func (r *ModifyWebhook) Send(bot *Client) (*Webhook, error) {
	var result *Webhook
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyWebhook", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointModifyWebhook(r.WebhookID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyWebhook", err)
	}

	return result, nil
}

// Send sends a ModifyWebhookwithToken to Discord and returns a Webhook.
func (r *ModifyWebhookwithToken) Send(bot *Client) (*Webhook, error) {
	var result *Webhook
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "ModifyWebhookwithToken", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointModifyWebhookwithToken(r.WebhookID, r.WebhookToken), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "ModifyWebhookwithToken", err)
	}

	return result, nil
}

// Send sends a PinMessage to Discord and returns a error.
func (r *PinMessage) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "PinMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointPinMessage(r.ChannelID, r.MessageID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "PinMessage", err)
	}

	return nil
}

// Send sends a RemoveGuildBan to Discord and returns a error.
func (r *RemoveGuildBan) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "RemoveGuildBan", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointRemoveGuildBan(r.GuildID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveGuildBan", err)
	}

	return nil
}

// Send sends a RemoveGuildMember to Discord and returns a error.
func (r *RemoveGuildMember) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "RemoveGuildMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointRemoveGuildMember(r.GuildID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveGuildMember", err)
	}

	return nil
}

// Send sends a RemoveGuildMemberRole to Discord and returns a error.
func (r *RemoveGuildMemberRole) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "RemoveGuildMemberRole", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointRemoveGuildMemberRole(r.GuildID, r.UserID, r.RoleID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveGuildMemberRole", err)
	}

	return nil
}

// Send sends a RemoveThreadMember to Discord and returns a error.
func (r *RemoveThreadMember) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "RemoveThreadMember", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPost, EndpointRemoveThreadMember(r.ChannelID, r.UserID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "RemoveThreadMember", err)
	}

	return nil
}

// Send sends a SearchGuildMembers to Discord and returns a []*GuildMember.
func (r *SearchGuildMembers) Send(bot *Client) ([]*GuildMember, error) {
	var result []*GuildMember
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "SearchGuildMembers", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointSearchGuildMembers(r.GuildID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "SearchGuildMembers", err)
	}

	return result, nil
}

// Send sends a StartThreadfromMessage to Discord and returns a Channel.
func (r *StartThreadfromMessage) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "StartThreadfromMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodPatch, EndpointStartThreadfromMessage(r.ChannelID, r.MessageID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "StartThreadfromMessage", err)
	}

	return result, nil
}

// Send sends a StartThreadinForumChannel to Discord and returns a Channel.
func (r *StartThreadinForumChannel) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "StartThreadinForumChannel", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodDelete, EndpointStartThreadinForumChannel(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "StartThreadinForumChannel", err)
	}

	return result, nil
}

// Send sends a StartThreadwithoutMessage to Discord and returns a Channel.
func (r *StartThreadwithoutMessage) Send(bot *Client) (*Channel, error) {
	var result *Channel
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "StartThreadwithoutMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointStartThreadwithoutMessage(r.ChannelID), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "StartThreadwithoutMessage", err)
	}

	return result, nil
}

// Send sends a SyncGuildTemplate to Discord and returns a GuildTemplate.
func (r *SyncGuildTemplate) Send(bot *Client) (*GuildTemplate, error) {
	var result *GuildTemplate
	body, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf(ErrSendMarshal, "SyncGuildTemplate", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointSyncGuildTemplate(r.GuildID, r.TemplateCode), body)
	if err != nil {
		return nil, fmt.Errorf(ErrSendRequest, "SyncGuildTemplate", err)
	}

	return result, nil
}

// Send sends a TriggerTypingIndicator to Discord and returns a error.
func (r *TriggerTypingIndicator) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "TriggerTypingIndicator", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointTriggerTypingIndicator(r.ChannelID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "TriggerTypingIndicator", err)
	}

	return nil
}

// Send sends a UnpinMessage to Discord and returns a error.
func (r *UnpinMessage) Send(bot *Client) error {
	var result error
	body, err := json.Marshal(r)
	if err != nil {
		return fmt.Errorf(ErrSendMarshal, "UnpinMessage", err)
	}

	err = SendRequest(result, bot.client, fasthttp.MethodGet, EndpointUnpinMessage(r.ChannelID, r.MessageID), body)
	if err != nil {
		return fmt.Errorf(ErrSendRequest, "UnpinMessage", err)
	}

	return nil
}
